"use strict";(self.webpackChunkblog_waku_org=self.webpackChunkblog_waku_org||[]).push([[822],{10711:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"message-reliability","metadata":{"permalink":"/message-reliability","source":"@site/posts/2024-06-20-message-reliability.mdx","title":"Message Reliability","description":"An introduction to message reliability and the role of Waku protocols in ensuring it.","date":"2024-06-20T00:00:00.000Z","formattedDate":"June 20, 2024","tags":[],"readingTime":8.565,"hasTruncateMarker":true,"authors":[{"name":"Franck","twitter":"fryorcraken","github":"fryorcraken","key":"franck"}],"frontMatter":{"layout":"post","name":"Message Reliability","title":"Message Reliability","date":"2024-06-20T00:00:00.000Z","authors":["franck"],"published":true,"slug":"message-reliability","categories":"waku, progress","image":"/img/black-waku-logo-with-name.png"},"nextItem":{"title":"Permissionless Community Creation","permalink":"/permissionless-community-creation"}},"content":"An introduction to message reliability and the role of Waku protocols in ensuring it.\\n\\n\x3c!--truncate--\x3e\\n\\nWaku provides a suite of protocols to enable Denial-of-Service (DoS) protected, peer-to-peer message routing and access to said peer-to-peer network for resource-restricted devices.\\n\\nThose protocols have been designed to solve message routing, focusing on privacy and censorship resistance, hence implementing a peer-to-peer decentralised topology.\\n\\nWhile libp2p gossipsub and Waku relay are [reliable](https://docs.google.com/document/d/1vK1OxI-YYqYWRYpb3imENcsUvFXBOzTkT6xnfUNA0yM/edit?usp=sharing) in a well-connected environment, those protocols remain only as reliable as their underlying transport (TCP, WebSocket).\\n\\nBuilding [working](https://blog.waku.org/railgun-waku-case-study) [applications](https://blog.waku.org/thegraph-waku-case-study) over Waku is possible, but end-to-end reliability is up to the application developer. Those strategies can be heavy on resource consumption. Moreover, the redundancy, dynamic mesh of peers, and gossiping that provide Waku Relay with its reliability are not present out of the box for light client protocols.\\n\\nThese are overheads for application developers who would rather focus on application logic than connection management for Waku.\\n\\n\\n## Definition\\n\\nWe define reliability as:\\n\\n\\n\\n* There is a high likelihood of messages being sent and received by a node in a timely fashion\\n* Awareness of liveness state:\\n    * Was a message sent or not sent, or do we not know (yet)?\\n    * Can I receive messages at the moment?\\n\\nIn the context of Waku, there are three layers to reliability, from lowest to highest in the stack:\\n\\n1. Transport: Reliability within the libp2p layer, constituent transports, and protocol stack, including peer discovery.\\n2. Peer-to-peer: Reliability within the Waku message routing and discovery layers between a local node and its direct connections to remote peers; said peers may have no functional relevance to the application.\\n3. End-to-end: Reliability within the application layer, on top of the Waku message routing and discovery layer. This layer is used primarily for the application to know whether the intended recipients received messages or whether incoming messages are missed, regardless of the number of hops away.\\n\\n\\n## Transport-level reliability\\n\\nApart from setting the correct parameters for TCP usage, we can do little to improve its reliability beyond what can be done in the underlying libp2p library. However, new transports, such as QUIC and WebTransport, can be introduced to improve on TCP/WebSocket.\\n\\nLibp2p-gossipsub usage is a similar case. We can tune some parameters at Waku level. We are also reviewing go-libp2p-gossipsub and nim-libp2p-gossipsub behaviour in desktop and mobile environments to answer questions such as: can disconnection detection in gossipsub be improved?\\n\\nNo major changes are expected at this layer, but understanding the inner workings will enable a more efficient strategy at the next layer.\\n\\n\\n## Peer-to-peer reliability\\n\\nBy peer-to-peer reliability, we mean message reliability between reachable nodes in the network. At this level, we can better understand the connectivity state, whether outgoing messages are propagated across part of the network, and whether we are receiving messages from the network. With every peer implementing peer-to-peer reliability strategies, heuristics of end-to-end reliability will increase but cannot be guaranteed.\\n\\nFilter and light push protocols already have baked-in reliability mechanisms such as filter ping and light push ack messages. However, this is not sufficient. Relay redundancy must be replicated in light client protocols, especially in a decentralised topology.\\n\\nMoreover, while gossipsub is very reliable on a stable connection, its mechanism to detect disconnection has practical limitations.\\n\\nStrategies to increase peer-to-peer reliability heavily depend on the new store v3 protocol. This protocol enables store responses to only contain message IDs and is more cost-savvy than store v2, which replies with the full message payload. A mix of regular store queries, libp2p ping, filter ping, and enhanced peer management will increase p2p reliability. Our RFCs will also define this. However, these strategies are likely to be at the cost of increased bandwidth usage and high connections requirements.\\n\\n\\n## End-to-end reliability\\n\\nIn the user\'s eyes, meaningful reliability means ascertaining whether the intended recipient of their messages has received them and ensuring that, as a recipient, they do not miss messages.\\n\\nEnd-to-end reliability is the way that specific users can communicate reliably across the network, in contrast with peer-to-peer reliability, which is focused on reliability between somewhat random reachable nodes in the network. It also ensures that nodes that are multiple hops away from each other are able to exchange messages reliably.\\n\\n[MVDS](https://rfc.vac.dev/vac/2/mvds) is an end-to-end reliability protocol. It is used in the Status application. The main caveat is that it only handles communication between two people and cannot be scaled without drastically increasing bandwidth usage.\\n\\nWith Status Communities, we want to enable thousands of users in a given community, so a new protocol is needed to enable end-to-end reliability among community participants.\\n\\n\\n## Encryption\\n\\nA protocol that enables users to know what message they missed or need to resend is likely to leak information about their social graph, even if the message content is encrypted. This is why it is essential for the metadata generated by an e2e reliability protocol to be encrypted and only accessible to the intended participants.\\n\\nFor 1:1 chats, [Status\' encryption](https://rfc.vac.dev/waku/standards/application/53/x3dh) provides confidentiality, integrity, authenticity, and forward secrecy. It adapts [Signal\'s double ratchet algorithm](https://signal.org/docs/specifications/doubleratchet/) to a decentralised topology. Unfortunately, this scheme does not scale to large groups as it only enables 1:1 scenarios. It can be used in small groups by setting up encrypted channels for each participant, but this strategy creates overhead that becomes impractical for larger groups.\\n\\nLarge groups (communities) currently use symmetric encryption. While it includes end-to-end encryption of data and metadata, it does not provide forward secrecy. An encryption scheme such as [MLS](https://messaginglayersecurity.rocks/) should be used to set up a secure channel between hundreds or thousands of participants. MLS provides native group encryption that can be [scaled to approximately 50,000 clients](https://datatracker.ietf.org/doc/html/draft-ietf-mls-architecture-01#section-3.1).\\n\\nUnfortunately, MLS does assume the use of some central[services](https://datatracker.ietf.org/doc/html/draft-ietf-mls-architecture-01#section-2.2), so further research is needed to design a secure group encryption algorithm that works in a decentralised topology.\\n\\n\\n## APIs and Timeline\\n\\n![Waku Stack Overview](/img/waku-stack-overview.jpg)\\n\\nThe Waku team is currently focusing on providing the reliability layers outlined above. We will deliver this work through new APIs for application developers that abstract complexity and use the existing Waku protocols with new reliability guarantees and heuristics.\\n\\n\\n### **Core protocols API**\\n\\nThe API currently available to developers provides direct access to the Waku core protocols. While it is functioning, it has several caveats:\\n\\n1. **Reliability: **As discussed, these protocols are as reliable as their underlying transport.\\n2. **Protocol knowledge: **Developers need to understand each protocol API and its behaviour.\\n3. **Encryption: **Encryption is provided in the library, but its application is left to the developer.\\n\\nAs part of the work outlined below, the core protocols API will be improved to ensure that reliability concerns are isolated in a different layer (separation of concerns principle). The first iterations of Waku Store improvements (v3) have recently been delivered, and further work on the peer manager is expected to enable peer-to-peer reliability.\\n\\n\\n### **Messaging API**\\n\\nWe are currently working across Waku implementations to abstract peer-to-peer reliability strategies to provide them in a new, simpler API. Ideally, an app developer wants to _send_, _receive_ and _retrieve _messages with fair reliability. They should not be concerned by the underlying protocols and how Waku handles this.\\n\\nThis is the most basic API. It should improve the_ status quo _and be used by developers when higher APIs do not fit the purpose (e.g., broadcast messages, ephemeral messages).\\n\\nDevelopers can use this API without any application context, and it enables them to solve some of the previously stated caveats:\\n\\n1. **Reliability: **Improved disconnection identification and handling, using store queries to check for sent and missed messages, using multiple connections for resource-restricted protocols (light push, filter).\\n2. **Protocol knowledge: **Core protocols are abstracted to provide simple verbs such as _relay_ versus _light client_ mode, _send message, receive messages, and retrieve past messages._\\n3. **Encryption: **same as core protocols API.\\n\\nWe aim to deliver this API and integrate it in Status applications by the end of Q3 2024, with earlier commitments on specific deliverables.\\n\\n\\n### **Reliable Communication API**\\n\\nWith this API, the user gains more certainty on message delivery. However, it does imply several assumptions, such as knowing the number of recipients and their identifiers.\\n\\nSuch API would resolve most, but not all, caveats:\\n\\n1. **Reliability: **Waku uses a new end-to-end reliability protocol to provide better feedback about the status of a given sent message or messages for which the user is the intended recipient. While transient _unknown_ states may still occur, Waku software will clarify whether the application or user should retry.\\n2. **Protocol knowledge: **The set of _verbs _from the messaging API still applies. However, the API will need more application context to be passed (e.g., some identifier for the message recipients) to enable the developer and user to be more certain about the message status.\\n3. **Encryption: **same as core protocols API.\\n\\nResearch on this [has started](https://forum.vac.dev/t/end-to-end-reliability-for-scalable-distributed-logs/293). While we expect delivery to be iterative through Proof of Concepts, we committed to delivering a working protocol and integrating it into the Status application by the end of 2024.\\n\\n\\n### **Encryption API**\\n\\nWith the reliability API, developers still need to reason about encryption. Waku should provide a scheme that enables encryption with forward secrecy, plausible deniability, and scalability for large groups in a decentralised topology out of the box.\\n\\nDevelopers should then only need to pass the public keys (or other cryptographic artefacts) of group members for Waku to negotiate a secure channel and provide end-to-end encryption. This would allow the end-to-end reliability protocol to operate without leaking metadata.\\n\\nIn this context, content topics are also likely to be handled by Waku software to ensure developers do not inadvertently leak metadata.\\n\\nThe Vac cryptography team is already conducting research on this topic. The timeline for integrating the result in Waku currently needs to be defined.\\n\\n\\n## Conclusion\\n\\nUsers and developers expect high reliability from the communication systems they use. When operating in a peer-to-peer domain, developers cannot always apply the traditional strategies used in centralised architecture.\\n\\nWhile the margin to make the existing Waku protocols more reliable is thin, it is possible to build new layers on top of them to achieve higher reliability. For the next six months, the Waku team will focus on designing the said layers, which will then be integrated into the Status applications and included by default in the Waku SDKs."},{"id":"permissionless-community-creation","metadata":{"permalink":"/permissionless-community-creation","source":"@site/posts/2024-05-20-permissionless-community-creation.mdx","title":"Permissionless Community Creation","description":"An overview of the foundational requirements of permissionless communities and Waku\'s research on autosharding to enhance decentralisation, privacy, and scalability.","date":"2024-05-20T00:00:00.000Z","formattedDate":"May 20, 2024","tags":[],"readingTime":7.67,"hasTruncateMarker":true,"authors":[{"name":"Amelia Trapp","twitter":"@amelia_trapp","github":"Amelia7689","key":"amelia"},{"name":"Franck","twitter":"fryorcraken","github":"fryorcraken","key":"franck"}],"frontMatter":{"layout":"post","name":"Permissionless Community Creation","title":"Permissionless Community Creation","date":"2024-05-20T00:00:00.000Z","authors":["amelia","franck"],"published":true,"slug":"permissionless-community-creation","categories":"waku","image":"/img/black-waku-logo-with-name.png"},"prevItem":{"title":"Message Reliability","permalink":"/message-reliability"},"nextItem":{"title":"Deep Dive Into The Graph: Powered by Waku","permalink":"/thegraph-waku-case-study"}},"content":"An overview of the foundational requirements of permissionless communities and Waku\'s research on autosharding to enhance decentralisation, privacy, and scalability.\\n\\n\x3c!--truncate--\x3e\\n\\nThere is no one-size-fits-all approach to building permissionless communities. Indeed, Waku and other projects are still researching the best ways to enable such communities while retaining decentralisation, privacy protection, and censorship resistance. The following blog post will discuss the fundamental requirements of peer-to-peer systems, analysing the strengths and weaknesses of federated models before delving into Waku\'s cutting-edge research on autosharding and its potential to enable permissionless communities to scale exponentially. \\n\\n\\n## Fundamentals of peer-to-peer systems\\n\\nPeer-to-peer decentralised systems have several core components required to function:\\n\\n* Bootstrapping: a way for a new node to enter the network. \\n\\nThis process typically involves obtaining a list of node addresses, enabling the new node to connect with existing ones. Various approaches to bootstrapping exist, such as hardcoding the list of addresses into the system\'s code, utilising a dynamic method, or posting the list on a DNS record. Regardless of the method chosen, bootstrapping is essential for enabling new nodes to join the network.\\n\\n* Peer discovery: a way for nodes in the network to discover other nodes.\\n\\nPeer discovery mechanisms allow nodes to find and establish connections with peers dynamically. This ensures that the network remains robust and resilient, avoiding bottlenecks that could arise from relying solely on a fixed set of bootstrap nodes. Peer discovery mechanisms vary depending on the specific requirements of the decentralised system but are essential for maintaining the network\'s integrity and scalability.\\n\\n* Peer-to-peer transport: a way for two nodes to communicate with each other to execute the demands of the network. \\n\\nThis communication can take various forms, depending on the nature of the decentralised system. For example, in a file-sharing network like BitTorrent, nodes exchange file chunks directly, allowing for efficient transmission of large files. In blockchain networks, nodes communicate by exchanging transactions and blocks, facilitating consensus and maintaining the integrity of the distributed ledger. Peer-to-peer transport could also happen through a broadcast system based on peers congregating around publish-subscribe topics, i.e. a message is published to a topic and broadcast to all peers subscribed to the same topic.\\n\\nThese are the building blocks for any decentralised peer-to-peer network. Decentralisation is not an objective in itself but a way to ensure a system is resilient, permissionless, censorship-resistant, and private. The properties discussed are requirements for such a system\'s foundation, but additional requirements exist.\\n\\nHence, for a chat protocol to be resilient, permissionless, censorship-resistant and private, the three pillars must be implemented: decentralised bootstrapping, decentralised peer discovery, and unmediated peer-to-peer transport. One example of such a system that does this would be the federated system, Matrix.\\n\\n\\n## The federated approach\\n\\nFederated chat solutions such as Matrix provide the software infrastructure, primarily through clients like Element, enabling any community owner to run or request an operator to run server software. This approach decentralises the hosting of communication servers, allowing for greater autonomy and flexibility within communities. Users connect to specific hosting server instances in the ecosystem to engage with their respective communities. The domain name of the hosting server, such as matrix.org, is included in each user\'s name, facilitating cross-community and one-to-one chats seamlessly.\\n\\nWith a federated approach, there is a lack of participation and sender anonymity due to the localised centralisation around communication servers. The servers can log users\' IP addresses, and observant parties can track user connections to such servers. Since users connect directly to their community servers to send messages, these servers may link IP addresses with message metadata.\\n\\nSuch a topology is also vulnerable to censorship; if a user\'s home server instance goes offline, they will experience service interruption. Moreover, if authorities seize the domain name, the entire community hosted on that server will be affected.\\n\\nWhile federated systems usually have a permissionless approach, anyone is able to run and host server software and each separate instance is a centralised system in itself. This comes with a number of drawbacks in terms of privacy and de-platforming risk both for end users and server administrators.\\n\\nA strategy can be implemented to enable users to back up their data on an alternative instance, but this usually does not help with privacy and only postpones the issue of censorship resistance. In other words, there is no easy path to solving those problems without changing the entire message routing layer.\\n\\n\\n## Waku\'s message routing layer\\n\\nTo solve privacy and censorship-resistance issues, Waku uses GossipSub as a message routing protocol.\\n\\nNodes in the network connect to each other and forward messages they receive from peers. Contrary to FloodSub, used by Whisper, GossipSub only forwards messages to a small set of nodes (the recommended number of nodes for Waku is four), meaning that while there is some amplification, it is limited to save bandwidth.\\n\\nAs long as the metadata on each message is limited, it becomes difficult for an observer to find the sender of a particular message in this model. Moreover, as all nodes in the GossipSub network receive all messages, the recipient can also benefit from anonymity.\\n\\n\\n## Using static sharding to scale Waku\\n\\nA common message routing layer does not scale as the nodes receive every message. This could function for up to thousands of users, but beyond this, the bandwidth demand for each node would likely exceed the average household bandwidth. Excluding nodes with lower bandwidth from the network would then impact the decentralisation of the routing network.\\n\\nInstead of having one relay network, Waku sharding splits the message routing network into several GossipSub topics so that the end user is not required to relay all of the applications\' traffic but rather just the subset of traffic on the same shard. \\n\\nWith static sharding, the logic for dispatching messages on the correct shard is naive: a community or application is assigned a shard, and each shard is used by only one application or community. To provide some basic DoS protection, the application or community owner distributes a private key to all members or users, which they use to sign messages.\\n\\nThis enables nodes in the shard to only relay messages from legitimate publishers (i.e. members of the community) while preserving some anonymity properties. Senders cannot be identified by their signatures, as all senders use the same private key.\\n\\nHowever, the current implementation of static sharding faces several challenges regarding privacy, censorship resistance and permissionless participation.\\n\\n**Bootstrapping **\\n\\nWhile passing multiple bootstrap node lists with several FQDNs to a Waku node is possible, further research is needed to enable truly decentralised bootstrapping. \\n\\n**Peer discovery dynamics**\\n\\nWaku leverages discv5 for peer discovery, a decentralised solution that enables privacy and censorship-resistance. However, decentralised discovery of capability, such as finding nodes with specific protocols like store and filter, is an area that needs improvement.\\n\\n**Peer-to-peer transport considerations**\\n\\nThe current approach for providing predictable scalability per Status Community is to statically assign an individual shard to each community; no shard would be assigned to multiple communities. This implies a shard assignment process, which poses a hurdle. Overall, Waku\'s implementation has validated our assumptions that static sharding provides a useful stepping stone to an architecture where communities share shards. The approach includes features such as autosharding, enabling multiple communities to use the same set of shards without needing to consider shard assignments. Additionally, RLN will be implemented to provide DoS protection on the shared shards. It also validates our assumptions about discv5 in the context of shards and capabilities.\\n\\n\\n## Future improvements: Autosharding and RLN\\n\\nStatic sharding on Waku is being rolled out to around 100 communities, with predictable scalability per community. The team is researching several sharding strategies to scale the rollout to more communities by enabling the sharing of shards, including autosharding and [rate limit nullifiers](https://github.com/vacp2p/rfc-index) (RLN). \\n\\nAutosharding will help abstract routing and sharding decisions away from communities and applications while providing an easy way for communities to share a bounded number of shards. This will allow the network to maintain a manageable number of shards, ideally under 100. Our research indicates the network can accommodate unlimited communities as long as the total user count remains below 1 million. New research will be necessary to extend discv5 or explore alternative systems for scalability beyond this threshold.\\n\\nIt is important to note that as a new technology, Waku\'s reliance on RLN introduces some risk. However, the Waku team is committed to hardening RLN and fostering its adoption by other projects and users, thus mitigating this concern over time.\\n\\n\\n## Become a part of the Waku ecosystem\\n\\nThe Waku research team made significant discoveries during their dogfooding of the Wau network. RLN provides DoS protections that do not compromise privacy or censorship resistance and can enable permissionless communities to scale to millions of users. \\n\\nTo integrate Waku into your application, check the table below for the necessary links. You can always get further support from us on [Discord](discord.waku.org).\\n\\n<table>\\n  <tr>\\n    <td>\\n    </td>\\n    <td><strong>Integrate Waku into your application</strong>\\n    </td>\\n  </tr>\\n  <tr>\\n    <td>docs\\n    </td>\\n    <td><a href=\\"https://docs.waku.org/\\">https://docs.waku.org</a>\\n    </td>\\n  </tr>\\n  <tr>\\n    <td>nwaku\\n    </td>\\n    <td><a href=\\"https://github.com/waku-org/nwaku\\">https://github.com/waku-org/nwaku</a>\\n    </td>\\n  </tr>\\n  <tr>\\n    <td>browser (JS/TS)\\n    </td>\\n    <td><a href=\\"https://github.com/waku-org/js-waku\\">https://github.com/waku-org/js-waku</a>\\n    </td>\\n  </tr>\\n  <tr>\\n    <td>Go\\n    </td>\\n    <td><a href=\\"https://github.com/waku-org/go-waku\\">https://github.com/waku-org/go-waku</a>\\n    </td>\\n  </tr>\\n  <tr>\\n    <td>Rust\\n    </td>\\n    <td><a href=\\"https://github.com/waku-org/waku-rust-bindings\\">https://github.com/waku-org/waku-rust-bindings</a>\\n    </td>\\n  </tr>\\n</table>"},{"id":"thegraph-waku-case-study","metadata":{"permalink":"/thegraph-waku-case-study","source":"@site/posts/2024-05-13-the-graph-case-study.mdx","title":"Deep Dive Into The Graph: Powered by Waku","description":"Learn more about how The Graph uses Waku to build a decentralised data querying layer for blockchains","date":"2024-05-13T00:00:00.000Z","formattedDate":"May 13, 2024","tags":[],"readingTime":6.14,"hasTruncateMarker":true,"authors":[{"name":"Guru","twitter":"@hackyguru","github":"hackyguru","key":"guru"}],"frontMatter":{"layout":"post","name":"Deep Dive Into The Graph: Powered by Waku","title":"Deep Dive Into The Graph: Powered by Waku","date":"2024-05-13T00:00:00.000Z","authors":["guru"],"published":true,"slug":"thegraph-waku-case-study","categories":"waku","image":"/img/thegraph.png","hide_table_of_contents":false},"prevItem":{"title":"Permissionless Community Creation","permalink":"/permissionless-community-creation"},"nextItem":{"title":"April Progress Report","permalink":"/April-progress"}},"content":"Learn more about how The Graph uses Waku to build a decentralised data querying layer for blockchains\\n\\n\x3c!--truncate--\x3e\\n\\n![TheGraph Case Study](/img/thegraph.png)\\n\\n\\nIndexing blockchain data can be challenging for projects with complex smart contracts. Managing and querying the vast data generated has become a significant challenge as the blockchain ecosystem proliferates.\\n\\nThe inherent properties of blockchain pose unique challenges when it comes to retrieving and querying data effectively. Some of the challenges include:\\n\\n- **Blockchain finality**: refers to the irreversible acceptance of a transaction or block into the canonical chain, which can complicate the querying process. \\n\\n- **Chain reorganisations** refer to situations where the canonical chain is revised due to competing blocks. This block revision, in turn, introduces uncertainties that must be accounted for.\\n\\n- **Uncled blocks** refer to valid blocks not included in the canonical chain. These blocks complicate retrieving accurate and consistent query results from blockchain data. \\n\\nThese peculiarities of blockchain architecture make querying data time-consuming and conceptually complex, requiring specialised solutions to navigate seamlessly. \\n\\nWhat is our solution? The Graph. \\n\\n## Gateway to querying web3 data - The Graph\\nThe Graph aims to be the querying layer for blockchains. It intends to create a decentralised protocol for indexing and querying blockchain data. The Graph is similar to a middleware layer that indexes data from blockchains and storage networks, making it easily accessible and queryable without much hassle.\\n\\nThere are various segments within The Graph Protocol:\\n### 1. Data Indexing Segment:\\n- **Subgraphs:** The open-source GraphQL schemas that define the data requirements and mapping rules.\\n- **Indexers:** The nodes responsible for processing blockchain data based on the subgraph specifications and storing the indexed data in a queryable format.\\n- **Curators:** The participants who signal the importance of specific subgraphs by staking tokens and incentivising indexers to prioritise indexing those subgraphs.\\n### 2. Data Querying Segment:\\n- **Query Node:** The stateless component that serves as the entry point for querying the indexed data routing GraphQL queries to the appropriate indexers.\\n- **Graph Explorer:** The graphical user interface allowing developers and users to explore and interact with the indexed data, execute GraphQL queries, and visualise the subgraph schemas.\\n### 3. Network and Governance Segment:\\n- **The Graph Network:** The decentralised network of indexers, curators, and other participants contributing to indexing and querying blockchain data, operating on the Waku messaging protocol.\\n\\n## Proof of Indexing\\nProof of Indexing is a mechanism The Graph uses to ensure the integrity and reliability of the indexed data within its ecosystem. It is closely related to the core functionality of The Graph Protocol.\\n\\nProof of Indexing works by having indexers periodically submit a proof that they have correctly indexed the data specified by the assigned subgraphs. These proofs are cryptographic hashes that summarise the indexed data, allowing other nodes in the network to verify the correctness of the indexing process without having to re-index the entire data themselves.\\n\\nThe role of Proof of Indexing is twofold:\\n\\n1. **Data Integrity:** By requiring indexers to submit proofs, The Graph ensures that the indexed data is accurate and consistent across the decentralised network of indexers. This helps maintain the reliability and trustworthiness of the indexed data, which is crucial for applications built on top of The Graph.\\n\\n2. **Indexer Accountability:** Proof of Indexing holds indexers accountable for their work. Indexers who fail to submit valid proofs or are caught submitting incorrect proofs can face penalties, such as slashing their staked tokens or removal from the indexing pool. This incentivises indexers to perform their indexing duties honestly and accurately.\\n\\n## Core developer teams in The Graph ecosystem\\n\\nMultiple teams work on various focus areas within The Graph. [GraphOps](https://graphops.xyz) is one of the teams focusing on data indexing. GraphOps leverages Waku for a unique use case in [\'subgraph radios\'](https://thegraph.com/blog/subgraph-radio-information-exchange/), which we will explain in detail.\\n\\nSubgraph radios are a feature introduced by Graphcast that allows real-time streaming of data updates and events from The Graph\'s indexed subgraphs. They bridge The Graph\'s indexed data and Graphcast\'s event processing framework, making subgraph radios a key component of Graphcast\'s real-time data streaming and event processing capabilities.\\n\\n## What is Graphcast?\\n\\nThe Graph is a decentralised indexing layer that does not rely on centralised communications. Graphcast was introduced to provide uncompromised communications in The Graph\'s indexing solution. \\n\\nBefore the GraphOps team introduced Graphcast, the majority of the indexing solutions used three ways to communicate:\\n\\n**1. Onchain communications:** Expensive and inefficient regarding scalability as the users need to pay gas for every state change.\\n\\n**2. Old-fashioned group chat:** It is highly dependent on Web2 communications, which have a single point of failure and higher security risks.\\n\\n**3. Automated bots:** Several indexer bots running on centralised servers to automate communication on event signalling.\\n\\nAll three solutions listed above could have been more efficient. Hence, we wanted a more robust and decentralised communications infrastructure to fix several issues. The core contributors of GraphOps mention that Waku is an obvious choice for solving this problem. Continue reading to learn more about how Graphcast uses Waku.\\n\\n## How does The Graph use Waku?\\n\\nWaku is one of the foundational technologies used to build Graphcast, a domain-specific gossip network for indexers.\\n\\n### Waku as an infrastructure for decentralised indexing\\nTo maintain the decentralised nature of its infrastructure, The Graph leverages [Waku](https://waku.org), a family of decentralised Web3 communications protocols, for communication between its indexers. Indexers are responsible for processing blockchain data and creating queryable subgraphs.\\n\\nWaku enables indexers to communicate and sync data peer-to-peer, eliminating the need for centralised servers or intermediaries. This approach aligns with the decentralisation principles and censorship resistance underpinning Web3.\\n\\nBy utilising Waku, The Graph ensures that its indexing infrastructure remains decentralised, resilient, and resistant to single points of failure. This not only enhances the security and reliability of The Graph\'s services but also upholds the core values of Web3, fostering a truly decentralised ecosystem for data indexing and querying.\\n\\n### The Waku implementation used for Graphcast\\n\\nWaku provides [several implementations](https://docs.waku.org/) that apply to various use cases based on resource availability. Graphcast uses Waku\'s Rust bindings. In Graphcast\'s Waku integration, all downstream radios act as Waku relay nodes. Graphcast uses its unique pubsub topic. The GraphOps team also operates their own `nwaku` fleet in addition to the already-existing Waku nodes that support Graphcast\'s pubsub topic.\\n\\n### Subgraph versioning with Waku\\n\\nGraphOps core contributors also mentioned they face difficulties with subgraph versioning. These difficulties revolve around syncing the subgraph data based on the correct versions.\\n\\nThe core contributors are also interested in exploring `js-waku`- a light node implementation of Waku - to create a web interface that allows sending messages to the Graphcast network to sync the subgraph data based on the correct versions. \\n\\nThis is another fantastic use case that Waku provides to Graphcast, providing private, robust, and reliable communication.\\n\\n## Closing words\\n\\nThe Graph is one of the most widely used projects in the Web3 space. Waku\'s unique use case of decentralising their indexers with a peer-to-peer network is one of a kind, and only a limited number of Web3 infrastructure projects implement such a high degree of decentralisation in their indexers. [TheGraph](https://thegraph.com) has introduced a novel use case to the space, and the Waku team is happy to help other projects decentralise their communications infrastructure.\\n\\nJoin our [Discord community](https://discord.waku.org), and our core contributors will be happy to assist you in getting started with Waku."},{"id":"April-progress","metadata":{"permalink":"/April-progress","source":"@site/posts/2024-05-06-april-progress-report.md","title":"April Progress Report","description":"Highlights from the Waku team in April 2024.","date":"2024-05-06T00:00:00.000Z","formattedDate":"May 6, 2024","tags":[],"readingTime":7.4,"hasTruncateMarker":true,"authors":[{"name":"Amelia Trapp","twitter":"@amelia_trapp","github":"Amelia7689","key":"amelia"}],"frontMatter":{"layout":"post","name":"April Progress Report","title":"April Progress Report","date":"2024-05-06T00:00:00.000Z","authors":["amelia"],"published":true,"slug":"April-progress","categories":"waku, progress","image":"/img/black-waku-logo-with-name.png"},"prevItem":{"title":"Deep Dive Into The Graph: Powered by Waku","permalink":"/thegraph-waku-case-study"},"nextItem":{"title":"Deep Dive Into RAILGUN: Powered by Waku","permalink":"/railgun-waku-case-study"}},"content":"Highlights from the Waku team in April 2024.\\n\\n\x3c!--truncate--\x3e\\n\\nWelcome to the monthly Waku progress report. The EcoDev group at Waku covers community, growth, partnerships, and communications. The Research and Development group covers the academic and engineering research that supports Waku\u2019s development, as well as the core team of Waku engineers building the protocols. Each month, we will share the key highlights and progress of the teams. You can [subscribe](https://waku.org/subscribe/) to the monthly newsletter if you prefer to receive an abridged version of these updates in your inbox.\\n\\n\\n## Events\\n\\n**ETHDam 12th - 14th April**\\n\\nAfter a busy hackathon in Amsterdam that included the [workshop](https://www.youtube.com/watch?v=K1S0Zzzeiqo) \u201cPrivacy-preserving web3 communications at scale with Waku\u201d, we announced the [ETHDam hackathon winners](https://twitter.com/Waku_org/status/1780243018173325819). Team [StealthAlloc](https://taikai.network/cryptocanal/hackathons/ethdam2024/projects/cluxse8cz00pjz3010wbq3thf/idea) claimed first place with their platform that bridges creators and DAOs to ensure confidential voting and fair allocations for quadratic funding. The team integrated Waku to support private communication channels between DAO treasuries and funding pools.\\n\\nThe runners-up [Brain Crypto Interfaces](https://taikai.network/cryptocanal/hackathons/ethdam2024/projects/cluz9mmr1016cyz01g3iry70i/idea) suggests using incentives for uploading brain data to improve open-source classification models. The team used Waku to facilitate private and secure communications between users. \\n\\n**Web3 Family Conference 17th - 19th April**\\n\\nSoftware Engineer Ivan spoke at Web3 Family Conference in Barcelona, delivering the talk \u201cWaku \u2013 The Web3 Communication Layer uring on Web3Family\u2019s\u201d. He also spoke on the panel \u201cPrivacy in Web3\u201d alongside Web3rivacy Now and zkSync. \\n\\n**Privacy Reunion 24th April**\\n\\n[Waku Eco Dev Team Lead Marina](https://twitter.com/Waku_org/status/1783170168597688746) moderated the panel \\"The Next Privacy Paradigm for Ethereum and Rollups\u201d at Privacy Reunion in Barcelona alongside Codex, zkSync, and Ethereum speakers. Notably, she commented: \u201cTo support the privacy sector, we need to help everyone understand that it\u2019s not about having nothing to hide; it\u2019s about choosing what to share.\\"\\n\\n**Waku Strategy and Planning Week **\\n\\nThe Waku team [came together](https://twitter.com/Waku_org/status/1775784705666818335) in Athens for a week of strategising, workshopping, and planning for the year. The team has developed a roadmap for the rest of 2024, which will be made public soon.\\n\\n**Upcoming Events**\\n\\nBookmark [waku.org/event](walu.org/events)s, where we\u2019ll be adding more information about upcoming events. \\n\\n\\n<table>\\n  <tr>\\n   <td><strong>Event</strong>\\n   </td>\\n   <td><strong>Date</strong>\\n   </td>\\n   <td><strong>Location</strong>\\n   </td>\\n   <td><strong>Engagement type</strong>\\n   </td>\\n  </tr>\\n  <tr>\\n   <td><a href=\\"https://events.geekle.us/wsas/\\">Worldwide</a>\\n\\n<a href=\\"https://events.geekle.us/wsas/\\">Software Architecture</a>\\n\\n<a href=\\"https://events.geekle.us/wsas/\\">Summit 2024</a>\\n   </td>\\n   <td>7th - 8th May\\n   </td>\\n   <td>Online\\n   </td>\\n   <td>Presentation from Vaclav \\n   </td>\\n  </tr>\\n  <tr>\\n   <td><a href=\\"https://www.ethbratislava.com/\\">ETHBratislava</a>\\n   </td>\\n   <td>10th - 11th May\\n   </td>\\n   <td>Bratislava, Slovakia\\n   </td>\\n   <td>Presentation from Vaclav \\n   </td>\\n  </tr>\\n  <tr>\\n   <td><a href=\\"https://dlt2024.di.unito.it/\\">6th Distributed Ledger Technologies Workshop</a>\\n   </td>\\n   <td>14th - 15th May\\n   </td>\\n   <td>Turin, Italy\\n   </td>\\n   <td>Presenting our academic paper\\n   </td>\\n  </tr>\\n  <tr>\\n   <td><a href=\\"https://www.dappcon.io/\\">Dappcon</a>\\n   </td>\\n   <td>21st - 23rd May \\n   </td>\\n   <td>Berlin, Germany\\n   </td>\\n   <td>Event sponsors with booth, and a presentation from Vaclav\\n   </td>\\n  </tr>\\n  <tr>\\n   <td><a href=\\"https://web3privacy.info/event/m24ber/\\">Web3PrivacyNow &lt;> Waku meetup</a>\\n   </td>\\n   <td>22nd May\\n   </td>\\n   <td>Berlin, Germany\\n   </td>\\n   <td>Co-hosting the meetup, Vaclav and Sergei will also be presenting \\n   </td>\\n  </tr>\\n  <tr>\\n   <td><a href=\\"https://ethberlin.org/\\">ETHBerlin</a>\\n   </td>\\n   <td>24th - 26th May\\n   </td>\\n   <td>Berlin, Germany\\n   </td>\\n   <td>Sergei is giving a workshop on Waku and mentoring the hackathon. Pedro will also be attending to meet projects interested in integrating Waku.\\n   </td>\\n  </tr>\\n  <tr>\\n   <td><a href=\\"https://web3privacy.info/event/s24prg/\\">Web3PrivacyNow Summit</a>\\n   </td>\\n   <td>30th May\\n   </td>\\n   <td>Berlin, Germany\\n   </td>\\n   <td>Presentation from Vaclav \\n   </td>\\n  </tr>\\n  <tr>\\n   <td><a href=\\"https://ethprague.com/\\">ETHPrague</a>\\n   </td>\\n   <td>31st May - 2nd June\\n   </td>\\n   <td>Prague, Czech Republic\\n   </td>\\n   <td>Pedro, Vaclav, Sasha, and Guru will attend to hack and meet projects interested in integrating Waku. \\n   </td>\\n  </tr>\\n</table>\\n\\n\\n\\n## Reads and learning resources\\n\\n**Ecosystem Spotlight: RAILGUN **\\n\\nEthereum does not provide privacy by default; every transactional data in the Ethereum network is transparent. RAILGUN is an on-chain privacy system built for EVM-based blockchains. The RAILGUN community claims the project to be the only uncompromising on-chain privacy solution with unparalleled encryption, security, and with DeFi functionality on par with other leading wallets.\\n\\n[Learn more](https://twitter.com/Waku_org/status/1783845021583601783) about how RAILGUN uses Waku to build a privacy layer on top of EVM-based chains. You can also learn more in this our [Ecosystem Spotlight video](https://www.youtube.com/watch?v=SbgslZxyV3M).\\n\\n**Waku\u2019s origin story**\\n\\nAfter the development of the Ethereum subprotocol Whisper was abandoned, Status suffered platform risk consequences. Vac helped engineer a new GossipSub protocol that could scale to meet Status\' needs. Waku was born from the demand for a privacy-preserving, scalable communications layer.\\n\\n[Learn more](https://twitter.com/Waku_org/status/1782388932828709314) about Waku\u2019s origin story.\\n\\n\\n## News\\n\\nIn an effort to protect digital privacy, the Logos technology stack, including Waku, has entered into [a strategic partnership with Web3 Privacy Now](https://twitter.com/Logos_network/status/1780255677836923133). The projects will launch initiatives to fortify data protection mechanisms, empower users with greater control of their data, and instil a commitment to privacy in web3 true to its cypherpunk roots.\\n\\n\\n## Research and Development\\n\\n**Store v3**\\n\\nThe Store protocol is how nodes in the Waku network can be queried on their message history. The development team has achieved incentivisation for the latest version of Store and is working on the proof of concept. They are also working to add message hashes to the protocol. \\n\\n**RLN v2**\\n\\nRate Limit Nullifiers (RLN) are based on zero-knowledge proofs and enable message rate-limiting in the Waku Network while preserving users\' anonymity. The development team is working on RLN v2, which enables functionality on resource-restricted devices. The team has deployed a [new Merkle tree integration](https://github.com/alrevuelta/go-waku-light/pull/2) (LazyIMT) and a [new version of the contract](https://github.com/vacp2p/rln-contract/pull/31) using the tree. The PoC that uses[ Merkle proofs from the contract](https://github.com/privacy-scaling-explorations/zk-kit/pull/162) has been merged, allowing roots and Merkle proofs on-chain in exchange for increased gas costs.\\n\\n**JSON RPC Deprecated**\\n\\nWaku nodes have migrated from using a [JSON RPC to REST API](https://waku-org.github.io/waku-rest-api/). We have updated our tests accordingly and successfully deprecated [JSON RPC](https://waku-org.github.io/waku-rest-api/).\\n\\n\\n## Milestones\\n\\nBelow are status updates and links to the progress report for each Waku engineering milestone. \\n\\n[Composing Waku Protocols to Improve Reliability](https://github.com/waku-org/pm/issues/114)\\n\\nStatus: In Progress\\n\\nSuccessfully ensured js-waku protocol implementations in @waku/core are as unopinionated as possible.\\n\\n[Operator Feature Requests](https://github.com/waku-org/pm/issues/152)\\n\\nStatus: In Progress\\n\\nCompleted a detailed JSON report on /health endpoint for nwaku. Also ensured that extend node is ready with more mature checks and result returned.\\n\\n[Bindings (Rust, NodeJS, Golang)](https://github.com/waku-org/pm/issues/121)\\n\\nStatus: In Progress\\n\\n[Node Bandwidth Management Mechanism](https://github.com/waku-org/pm/issues/66)\\n\\nStatus: In Progress\\n\\n\\n---\\n\\n\\n# Community Call\\n\\nWaku hosts a Community Call on X during the last week of each month. The objective of the call is to update the community on our progress and provide a space where questions can be put directly to the team.\\n\\nThe Community Call took place on the 26th March. You can [listen back to the full Space](https://x.com/Waku_org/status/1783888975867908582) and read the highlights below. [Guru](https://twitter.com/hackyguru) and [Vaclav](https://twitter.com/vpavlin) from the Waku team led the call. They were also joined by [Kieran](https://twitter.com/mesquka) from RAILGUN. \\n\\n\\n## Why RAILGUN chose Waku\\n\\nWaku is designed to operate both off-chain and chain agnostic, serving as a peer-to-peer networking library enabling relevant wallets to communicate with relayer RPCs. Its primary aim is to minimise data leakage, particularly concerning IP addresses, which could potentially compromise the anonymity of RAILGUN users.\\n\\nInitially, RAILGUN attempted to utilise libp2p directly, the underlying framework upon which Waku is constructed, and endeavoured to incorporate a transport tool for use as the networking library. However, this proved exceedingly challenging, and the concept never progressed to production. Instead, the team found that Waku protocols could be implemented or adapted effectively. Keiran remarked, \\"It just turned out to be well-suited for our needs, so we\'ve stuck with it.\\"\\n\\n\\n## Protecting transaction privacy \\n\\nKeiran elaborated on the importance of transaction privacy, initially citing the potential of Bitcoin and other cryptocurrencies to achieve financial independence, democratise access to finance, and enable individuals to act as their own banks. However, in practice, this vision has shifted from empowerment to near-total surveillance. Rather than a select few having access to one\'s financial activities, now anyone with an internet connection can monitor transactions through the block explorer.\\n\\nWhile this level of transparency may be acceptable for occasional meme coin trading, if we envision cryptocurrencies as everyday financial instruments, it becomes imperative not to publicly disclose all transaction data.\\n\\n\u201cThe question of privacy is really something that needs to be solved.\u201d\\n\\n\\n## On Vitalik Buterin\\n\\nRAILGUN garnered considerable attention following the news that Vitalik Buterin had transferred 100 ETH to the platform. Keiran commented that this action exemplified one of RAILGUN\'s most compelling use cases: providing privacy for public figures with substantial funds tied to their identities. Such visibility naturally attracts scrutiny and assumptions, necessitating a means to safeguard personal data.\\n\\nKeiran disclosed that he believed Vitalik had been utilising RAILGUN for approximately six months before publicly endorsing it. Subsequently, RAILGUN experienced a surge of interest from new users and critics alike. This heightened interest in RAILGUN shows no signs of abating, but once it does, the team plans to conduct a retrospective analysis on its impact on growth and overall sentiment.\\n\\n\\n---\\n\\nIf you have questions about what the team has been doing or want to join a like-minded community focused on bringing peer-to-peer communications to millions of users, join the Waku [Discord](https://discord.com/invite/gMPAzmcDER) or follow us on [X](https://twitter.com/Waku_org).\\n\\n[Subscribe](https://waku.org/subscribe/) to the monthly newsletter for these updates directly in your inbox."},{"id":"railgun-waku-case-study","metadata":{"permalink":"/railgun-waku-case-study","source":"@site/posts/2024-04-26-railgun-case-study.mdx","title":"Deep Dive Into RAILGUN: Powered by Waku","description":"Learn more about how RAILGUN uses Waku to build a privacy layer on top of EVM based chains","date":"2024-04-26T00:00:00.000Z","formattedDate":"April 26, 2024","tags":[],"readingTime":3.96,"hasTruncateMarker":true,"authors":[{"name":"Guru","twitter":"@hackyguru","github":"hackyguru","key":"guru"}],"frontMatter":{"layout":"post","name":"Deep Dive Into RAILGUN: Powered by Waku","title":"Deep Dive Into RAILGUN: Powered by Waku","date":"2024-04-26T00:00:00.000Z","authors":["guru"],"published":true,"slug":"railgun-waku-case-study","categories":"waku","image":"/img/railguncover.png","hide_table_of_contents":false},"prevItem":{"title":"April Progress Report","permalink":"/April-progress"},"nextItem":{"title":"March Progress Report","permalink":"/march-progress"}},"content":"Learn more about how RAILGUN uses Waku to build a privacy layer on top of EVM based chains\\n\\n\x3c!--truncate--\x3e\\n\\n![Railgun Case Study](/img/railguncover.png)\\n\\n\\nDoes your Dapp need to offer private on-chain transactions? The following scenarios are examples of users that have such privacy requirements:\\n\\n* **Donations made for humanitarian reasons**: A humanitarian cross-border organisation like [UNICEF](https://www.unicef.org/) might not want to disclose their donations to specific countries or communities under crisis to avoid unwanted political tensions.\\n* **Private expenses:** Some web3 users might not wish to keep their private expenses transparent (for example - costs related to medical treatments).\\n* **Public goods funding:** Donars may wish to donate anonymously towards a public goods project.\\n\\nAll the above examples are not possible directly with Ethereum since the blockchain is, by design, a public ledger. Continue reading to understand how Waku can offer your users privacy. \\n\\n\\n### **The transparent nature of Ethereum**\\n\\nEthereum does not provide privacy by default; every transactional data in the Ethereum network is transparent. Similar to Bitcoin, _Ethereum-based technologies are designed for pseudonymity and not anonymity_. Lack of privacy is one of the many factors hindering DeFi use cases, as many financial applications require transactional data that is not publicly available. This creates the demand for privacy solutions like RAILGUN - a privacy-preserving project built using Waku.\\n\\nWith RAILGUN, users can leverage various DeFi functionalities like lending, borrowing, swapping and trading tokens privately.\\n\\n\\n# What is RAILGUN?\\n\\n<br /> \\n\\n[RAILGUN](https://github.com/Railgun-Privacy) is an on-chain privacy system built for EVM-based blockchains. The RAILGUN community claims the project to be the only uncompromising on-chain privacy solution with unparalleled encryption, security, and with DeFi functionality on par with other leading wallets. \\n\\nThe core features RAILGUN provides are:\\n\\n\\n##### **ZK Powered Security and Resilience**\\n\\nRAILGUN uses Zero-Knowledge (ZK) cryptography to enable the private use of smart contracts and DeFi without leaving the user\u2019s preferred chain. This makes the solution self-custodial and bulletproof for private transactions without requiring a new L2 validator. There is no bridge risk, preserving security and decentralisation. In short, RAILGUN is as secure as the EVM chain on which it is deployed.\\n\\n\\n##### **Bonded well with the EVM ecosystem**\\n\\nRAILGUN is not a separate blockchain that stands alone from the EVM ecosystem. The project seeks to enhance privacy utilities for the EVM ecosystem with the least dependencies. It solves many interoperability issues that exist with the other pro-privacy chains. RAILGUN is embedded into the Ethereum ecosystem; users can access transactional data and liquidity on Ethereum.\\n\\n\\n##### **No breaking changes in the UX**\\n\\nThe user experience is similar to leading self-custodial wallets like MetaMask to interact with Ethereum/EVM chains regarding liquidity and DeFi.\\n\\n\\n# Components of RAILGUN\\n\\n<br/>\\n\\nThe RAILGUN system has three key attributes:\\n\\n![RAILGUN Workflow](/img/railgun1.png)\\n\\n1. **RAILGUN Smart contracts**\\n\\nRAILGUN smart contracts enable Zero-Knowledge privacy for any on-chain dApp. By integrating these smart contracts, developers can provide an incognito-like experience for their users without affecting the user experience.\\n\\n\\n\\n2. **RAILGUN\u2019s Relayer network**\\n\\nRAILGUN is supported by a decentralised relayer network that submits transactional data into the blockchain. The relayer network is also expected to preserve privacy to meet their \u2018privacy-first\u2019 approach and end-user anonymity requirements.\\n\\n\\n\\n3. **RAILGUN Wallets**\\n\\nRAILGUN does not have a single in-house official wallet but already has an ecosystem of wallets that integrate the RAILGUN smart contracts and run independently. Check out more about the RAILGUN wallets [on their community-curated website](https://www.railgun.org/wallets.html).\\n\\n<br/>\\n\\n# How does RAILGUN use Waku?\\n\\n<br/>\\n\\nMost of RAILGUN\u2019s core functionalities are executed as on-chain transactions. However, RAILGUN\u2019s infrastructure demands a network of privacy-preserving and decentralised relayers. These relayers should be able to submit user-signed transactions to the blockchain.\\n\\n![RAILGUN\'s Waku usage](/img/railgun2.png)\\n\\n### **Waku as a relayer network**\\n\\nMuch of RAILGUN\u2019s user experience and privacy features are powered by a relayer network provided by Waku. RAILGUN runs a self-federated network of [nwaku](https://github.com/waku-org/nwaku) nodes that relay the transactions from the signer into the blockchain. [nwaku](https://github.com/waku-org/nwaku) is a full node implementation of Waku that usually runs resource-rich environments. The [nwaku](https://github.com/waku-org/nwaku) relayers advertise their fees, and the signer selects the most appropriate relayer that leverages Waku to submit the transactional data.\\n\\n\\n### **High-level architecture**\\n\\nThe current Waku integration with RAILGUN uses nwaku via REST API, and the users leverage the wallet functionalities with [js-waku](https://github.com/waku-org/js-waku) , a lightweight implementation of Waku that makes it adaptable in resource-restricted environments like browsers and desktop apps.\\n\\n<br/>\\n\\n# Inspired by RAILGUN? Try Waku.\\n\\n<br/>\\n\\nRAILGUN is possibly the most unique use case for [Waku](https://waku.org/). If you are inspired to learn more about integrating Waku into your dApp, join our [Discord community](https://discord.waku.org/) . Our core contributors would be happy to help you get onboarded. The [Waku documentation](https://docs.waku.org/) is an excellent place to get started if you are looking for code snippets with in-depth conceptual guides."},{"id":"march-progress","metadata":{"permalink":"/march-progress","source":"@site/posts/2024-04-03-march-progress-update.mdx","title":"March Progress Report","description":"Highlights from the Waku team in March 2024.","date":"2024-04-03T00:00:00.000Z","formattedDate":"April 3, 2024","tags":[],"readingTime":6.785,"hasTruncateMarker":true,"authors":[{"name":"Amelia Trapp","twitter":"@amelia_trapp","github":"Amelia7689","key":"amelia"}],"frontMatter":{"layout":"post","name":"March Progress Report","title":"March Progress Report","date":"2024-04-03T00:00:00.000Z","authors":["amelia"],"published":true,"slug":"march-progress","categories":"waku, progress","image":"/img/black-waku-logo-with-name.png"},"prevItem":{"title":"Deep Dive Into RAILGUN: Powered by Waku","permalink":"/railgun-waku-case-study"},"nextItem":{"title":"The Waku Network: Technical Overview","permalink":"/2024-waku-network-tech-overview"}},"content":"Highlights from the Waku team in March 2024.\\n\\n\x3c!--truncate--\x3e\\n\\n---\\n\\nWelcome to the monthly Waku progress report. The EcoDev group at Waku covers community, growth, partnerships, and communications. The Research and Development group covers the academic and engineering research that supports Waku\u2019s development, as well as the core team of Waku engineers building the protocols. Each month, we will share the key highlights and progress of the teams. You can [subscribe](https://waku.org/subscribe/) to the monthly newsletter if you prefer to receive an abridged version of these updates in your inbox. \\n\\n# Events\\n\\n**ETHLatam 13th - 14th March**\\n\\nWaku sponsored ETHLatam with US$2,500 in prizes for hackers who created privacy-preserving solutions using Waku. Developer Relations Engineer Guru also gave a hands-on workshop that served as an introduction to Waku. The Waku team gave one-to-one support to the hackers, who were also gifted limited edition Waku swag.\\n\\nCongratulations to the ETHLatam hackathon bounty winners, [EduChain](https://twitter.com/Waku_org/status/1772530541859885160)! The team developed a privacy-focused platform for maintaining and accessing academic records.\\n\\n**ETHTaipei 21st - 24th March**\\n\\nWaku Protocol Engineer Danish [delivered two excellent talks](https://twitter.com/Waku_org/status/1772284941117562935?utm_source=%7C%7CTEST+3%7C%7C+See+you+i...+%28Mass+Mailing+created+on+2024-04-03%29+%5B7%5D&utm_medium=Email) in Taipei. At ETHTaipei, Danish presented on \u201cBridging the Gap in Decentralised Communications with Waku\u201d. He also spoke at the Liberty ZK Hacker House side event on the 25th of March, presenting \u201cLeveraging ZK proofs for spam mitigation in a p2p multi-client environment | Waku with RLN.\u201d \\n\\nThank you to everyone who attended for the great reception and openness to learning about privacy-first peer-to-peer communications. \\n\\n**ETHDam 12th - 14th April**\\n\\nOur next stop is ETHDam! Waku has \u20ac2,000 in bounty prizes for hackers who submit the best use of Waku. If you are attending ETHDam, there is still time to [schedule a meeting with the team](https://waku.org/events/ethdam/) to discuss integrating Waku or to exchange ideas about the future of web3 and privacy.\\n\\n**Privacy in the Age of AI: DarkFi, Logos & Waku Roundtable**\\n\\nWaku and Logos co-hosted an X Space with Lunar Mining of DarkFi. The speakers discussed how to prevent a future where privacy becomes a luxury accessible only to those who can afford it while the rest of society becomes increasingly exposed to the scrutiny of AI surveillance. You can [listen back](https://twitter.com/Waku_org/status/1773017040166535486) to the Space.\\n\\n\\n# Reads and tutorials\\n\\nThe Waku Network is the first decentralised and privacy-preserving network that provides Denial-of-Service (DoS) protections for peer-to-peer messaging. It aims to enhance privacy and security in peer-to-peer communications by implementing innovative protocols and technologies. You can take a deep dive into the Waku Network to learn how we can scale peer-to-peer communications to millions of users in a decentralised, privacy-focused way in this [blog post from Waku Lead Franck](https://twitter.com/Waku_org/status/1772919691255644602). \\n\\nAfter the recent boom in the generative artificial intelligence (AI) space, there is a growing misconception that web3 does not have native use cases for AI. Indeed, some are popularising an unfounded argument that web3 is being forced into the AI space. Learn from Guru how Waku fits into a privacy-preserving blockchain and AI stack [in this blog post](https://blog.waku.org/convergence-of-ai-blockchain-privacy/).\\n\\nIn this tutorial, Guru introduces Waku protocols and demonstrates with [DBlockEd](https://www.youtube.com/@DBlockEd) how to build a peer-to-peer game like Battleship with Waku. It is suitable for first-timers using Waku as it takes you from installing the necessary dependencies and using the starter kit to deploying your game. You can [watch the video here](https://twitter.com/Waku_org/status/1770117993197953099).\\n\\n\\n# Technical Updates\\n\\n[rln-v2 has been integrated into nwaku](https://twitter.com/Waku_org/status/1768359640415273339), enabling variable messaging rates depending on the stake. Users can register to the rln-v2 membership set and send multiple messages per epoch. We are currently testing this release in simulations.\\n\\nThe Waku template for Akash Network deployment has been updated to the latest nwaku version (v0.26.0) and is now available in the [Cloudmos Template catalogue](https://deploy.cloudmos.io/templates/akash-network-awesome-akash-waku). You can find the deployment manifests in the [Awesome Akash repository](https://github.com/akash-network/awesome-akash/tree/master/waku). Remember that you must follow the deployment process in the how-to section. \\n\\n\\n# Research and Development\\n\\nBelow are the key highlights from across the research and development teams. \\n\\n* The Store protocol is how nodes in the Waku network can be queried on their message history. We have developed a [proof-of-concept implementation](https://github.com/waku-org/nwaku/pull/2431) for the Store v3 protocol, which adds greater reliability to the query responses and incentivises node runners. \\n* We aim to ensure builders and hackers can easily use Waku without needing to learn all the protocols. \\n* We have created a new simplified SDK function for creating a node for autosharding. [Learn more about the JavaScript Waku SDK](https://docs.waku.org/guides/js-waku/). \\n* nwaku is a Nim-based Waku implementation to run a standalone node and access the network. We have [implemented CORS enhancements](https://github.com/waku-org/nwaku/issues/2223), as well as [implementing the RLN v2](https://github.com/waku-org/nwaku/issues/2345) proof-of-concept into nwaku. \\n* The research team has submitted two academic papers that are currently under review. \\n\\n\\n---\\n\\n# Community call\\n\\nWaku hosts a Community Call on X during the last week of each month. The objective of the call is to update the community on our progress and provide a space where questions can be put directly to the team.\\n\\nThe Community Call took place on the 29th of March. You can [listen back to the full Space](https://twitter.com/i/spaces/1lDxLPRNqaMxm?s=20) and read the highlights below. [Aaron](https://twitter.com/vrycmfy), [Guru](https://twitter.com/hackyguru), [Vaclav,](https://twitter.com/vpavlin) and [Danish](https://twitter.com/danisharora099) from the Waku team led the call. \\n\\n## ETHLatam winners: EduChain\\n\\nThe Waku team was joined by bounty winners [Kenneth](https://twitter.com/KennethAlvaren5) and [Fernanda](https://twitter.com/ferji1997) from ETHLatam\u2019s winning team, EduChain. Kenneth and Fernanda shared that they chose to hack with Waku because of their need to maintain transparent communications and feedback on their platform. Their project is blockchain-based and demands a quick and secure notification system for its users. They also shared that University officials have agreed to start trialling the EduChain platform with Masters-level scholarship students. Kudos to the EduChain team!\\n\\n## Improving the Store protocol \\n\\nThe Waku team shared three key milestones for 2024. The first is improvements to the [Store protocol](https://docs.waku.org/guides/nwaku/configure-nwaku/#configure-store-protocol-and-message-store), which provides message caching and serves it to network peers. The current version can, however, result in different nodes in the network providing you with different answers when queried. This is due to a reliability issue where the peer-to-peer network cannot absolutely guarantee that all of the messages are delivered to all of the nodes. V3 Store nodes will check with other nodes in the network to give you an accurate answer. The team is also working on incentivisation for running these nodes to provide further assurance and reliability to the network. This will require some form of payment for network users to query the nodes.\\n\\n## RLN v2 and v3\\n\\nRLN v1 is already used in the Waku Network to offer message rate limiting. It is strongly recommended to use RLN because, on any peer-to-peer network, anyone can join and spam, which can result in DoS attacks. RLN is a privacy-preserving way to limit users\u2019 messages and give assurance against DoS attacks. We use ZK knowledge proofs for each message; relayers see the proof and validate that the users are part of the network, permitting them to send one message per second. In RLN v2 and v3, the rate limit will be configurable per user. The Waku team is now testing and running simulations of v2 to ensure it offers the scalability and reliability required. \\n\\n## Increasing Waku\u2019s usability\\n\\nThe third milestone highlighted in the call was \u201ccomposing Waku protocols\u201d. This milestone aims to ensure builders and hackers can easily use Waku without knowing all the details of each protocol or needing to learn which protocol is best for specific use cases and actions. This year, the team will create high-level SDKs with APIs that can be extrapolated for certain uses. One example would be for builders using Waku to send messages; the protocols will be automatically selected without the builder needing to configure them. \\n\\nBy composing Waku protocols, anyone can immediately and easily start using Waku. If or when they reach the barriers of the high-level SDKs, they can then go deeper into the individual protocols. \\n\\n\\n---\\n\\nIf you have questions about what the team has been doing or want to join a like-minded community focused on bringing peer-to-peer communications to millions of users, join the Waku [Discord](https://discord.com/invite/gMPAzmcDER) or follow us on [X](https://twitter.com/Waku_org).\\n\\n[Subscribe](https://waku.org/subscribe/) to the monthly newsletter for these updates directly in your inbox."},{"id":"2024-waku-network-tech-overview","metadata":{"permalink":"/2024-waku-network-tech-overview","source":"@site/posts/2024-03-26-waku-network-tech-overview.mdx","title":"The Waku Network: Technical Overview","description":"A comprehensive overview of the Waku Network.","date":"2024-03-26T00:00:00.000Z","formattedDate":"March 26, 2024","tags":[],"readingTime":11.61,"hasTruncateMarker":true,"authors":[{"name":"Franck","twitter":"fryorcraken","github":"fryorcraken","key":"franck"}],"frontMatter":{"layout":"post","name":"The Waku Network: Technical Overview","title":"The Waku Network: Technical Overview","date":"2024-03-26T00:00:00.000Z","authors":["franck"],"published":true,"slug":"2024-waku-network-tech-overview","categories":"waku, technical, network","image":"/img/black-waku-logo-with-name.png","hide_table_of_contents":false},"prevItem":{"title":"March Progress Report","permalink":"/march-progress"},"nextItem":{"title":"The convergence of AI, Blockchain and Privacy","permalink":"/convergence-of-ai-blockchain-privacy"}},"content":"A comprehensive overview of the Waku Network. \\n\\n\x3c!--truncate--\x3e\\n\\n---\\n\\nLast December [we announced the Waku Network](https://thedefiant.io/waku-launches-first-decentralised-privacy-preserving-dos-protections-for-peer-to-peer-messaging).\\n\\t\\t\\nThe Waku Network is the first decentralised and privacy-preserving network that provides Denial-of-Service (DoS) protections for peer-to-peer messaging. It aims to enhance privacy and security in peer-to-peer communication by implementing innovative protocols and technologies.\\n\\nLet us dig deeper into the why and what the Waku Network is.\\n\\t\\t\\n## Origin\\nIf you have been following Waku or Status, you are likely to be familiar with the origin of Waku.\\nThe Status mobile app was created to be a web3 super app, a portal to the Ethereum ecosystem that leverages the three original pillars: Ethereum for consensus, Swarm for storage and Whisper for communication.\\n\\t\\t\\nThe Status development team attempted to build Status with Whisper, but this protocol had fundamental limitations, especially for resource-restricted devices, such as mobile phones.\\n\\t\\t\\nWaku was born as a successor of Whisper, learning from its flaws to provide a scalable peer-to-peer communication network fit for mobile and browsers.\\n\\t\\t\\n## Challenges / desired properties\\n\\t\\t\\nWaku aims to overcome the following challenges:\\n\\t\\t\\n- Generalised messaging: Waku aims to provide protocols and a network that enables the transfer of arbitrary payloads. While Waku was originally created for a chat application, Status, the aim is to be generalised enough to build any decentralised communication or signalling application on Waku.\\n- Ephemeral messaging: Waku aims to solve the problem of real-time communication, which aims to provide fair latency to enable one or several users to exchange small data payloads. This is in contrast to IPFS or other decentralised storage systems, which provide a way to store large amounts of data at the expense of latency and responsiveness.\\n- Censorship-resistance: Waku aims to provide a censorship-resistant solution where external actors cannot block users\' access to the Waku infrastructure. But also for app developers to be able to build with a _cannot do evil_ mindset where they do not have the key to the kingdom and the ability to deplatform their users.\\n- Privacy-minded: To provide the ability for app developers to operate on a _cannot do evil_ principle in terms of data and metadata collection of their users. This means that even if they wanted or were pressured to they, or any third party, could not collect metadata such as social graphs or activity patterns from their users.\\n- Anonymity: Similarly to privacy, this is the ability for users to not link Personal Identifiable Information (PII) to their activity on the Waku network or application using the network. PII considered here are in regards to the network (IP address), blockchain (e.g. Ethereum address), and routing (message correlation).\\n- Resource-restricted devices: as previously mentioned, when designing Waku, an effort is made to consider environments such as mobile and browser to enable developers to build DApps for these platforms and provide as many of the properties listed above as possible.\\n- Scalability: Waku aims to support millions of users while maintaining the principles above; this needs to be thoughtfully designed and tested.\\n\\t\\t\\nAll the properties above mean that other problems need to be overcome when designing Waku:\\n\\t\\t\\n- DOS protection: ensuring that the network cannot be flooded with messages, leading users who have fewer resources to be booted off the network.\\n- Network sustainability and incentivisation: How do we ensure enough resources in the network to enable devices such as browsers and mobile devices to access the network?\\n- Decentralisation: Waku needs to be decentralised at several levels to enable those properties. How do we maintain a fair level of decentralisation to ensure those properties remain over time?\\n\\t\\t\\n## The Waku Network\\n\\t\\t\\nHow does the Waku Network help deliver the properties above?\\n\\t\\t\\nLet us review the different Waku protocols that are combined in the network and how they enable us to achieve this feat.\\n\\t\\t\\n### Peer discovery\\n\\t\\t\\nFor any peer-to-peer system to be reliable and decentralised, there must be a mechanism to find new peers or nodes in said system, usually called _peer discovery_.\\n\\t\\t\\nWaku uses discv5, similar to Ethereum. Minor enhancements to ENR have been done to enable the Waku node to advertise:\\n\\t\\t\\n- the shards they are operating in (see [message routing - sharding](#message-routing--sharding))\\n- the protocol they have enabled\\n- alternative multiaddr they may have, e.g., for the browser to connect to the said node via WebSocket.\\n\\t\\t\\nDiscv5 is decentralised, which can prevent potential sybil attacks where an attacker tries to surround the victim\'s node to give a manipulated view of the network.\\n\\t\\t\\nThis helps enable anonymity, privacy, and censorship resistance.\\n\\t\\t\\nThanks to the protocol serviced being advertised, it enables mobile phones and the browser to find nodes that can service them.\\n### Message Routing - Gossipsub\\n\\t\\t\\nSimilar to Ethereum, Waku uses libp2p-gossipsub. This brings several benefits:\\n\\t\\t\\n- improved bandwidth performance in comparison to Whisper: in gossipsub, nodes form a group of neighbours (mesh) to which they send messages. A given node will only attempt to maintain connections and actively exchange messages with other nodes. Reducing the number of times each message is uploaded or downloaded.\\n- Reliability: gossipsub has built-in redundancy, which gives fair reliability when operating in a decentralised peer-to-peer network, where no node can be trusted to be reliable or well-behaved.\\n- Anonymity: as nodes forward messages from other nodes in their mesh, and no metadata is present on individual messages (e.g., no plain text signature), this provides fair anonymity as it is not possible for an observer to know if their neighbour originated or forwarded a message. This works when combined with a decentralised peer discovery mechanism such as discv5.\\n\\t\\t\\nWe named Waku\'s usage of gossipsub, the protocol and the network. **Waku Relay.**\\n\\t\\t\\n### Message routing - sharding\\n\\t\\t\\nOne of the drawbacks of Gossipsub is that every node in the network receives and sends every message of the network, with some amplification.\\n\\t\\t\\nOne can see how this limits scalability: it cannot be expected to traffic the whole traffic of the network from a household internet connection.\\n\\t\\t\\nTo solve this problem, sharding is used instead of having one gossipsub network. The Waku network is subdivided into several distinct message-routing subnetworks, or shards.\\nCurrently, the Waku network is split into eight shards.\\n\\t\\t\\nIt means that any user of a Waku application would only relay the traffic of one shard or one-eighth (approximately) of the whole network.\\n\\t\\t\\nEight was a small, arbitrary number to start with. Our theoretical analysis shows that a shard can support around 10k active users while maintaining an average bandwidth requirement of around 4Mbps, meaning 80k for the whole network. We are working on running further simulations to confirm our assumptions. We are also onboarding developers and users on the network to test the theory.\\n The aim is to increase the number of shards in the network over time.\\n\\t\\t\\nThanks to the enhancements made to discv5, nodes can know what shards other peers are servicing before connecting to them.\\n\\t\\t\\n### Message routing - autosharding\\n\\t\\t\\nOne issue with sharding is that users and applications must know what shard to use.\\n\\t\\t\\nOne application could arbitrarily decide what shard they want to use, but that may take a lot of work, especially when adding new shards. It is also one more decision for the developer to make; we prefer to make the developer experience as easy as possible. It also allows developers to build applications that spread on several shards without delegating shard choices to the user.\\n\\t\\t\\nAutosharding is a simple protocol that dispatches messages on a shard based on the application.\\n### Message Routing - RLN Relay\\n\\t\\t\\nWaku is generalised and privacy-preserving, meaning any kind of payload can be transported. Hence, there is no strict definition of \\"spam\\". Whether the message contains a [meme](https://github.com/b4s36t4/waku-meme) or a [zk note for private DeFi](https://railgun.ch/#/), Waku shouldn\'t even know the content; metadata and data should remain private.\\n\\t\\t\\nHence, there is a risk of someone pushing gigabits of data to the network. This can be a problem at different levels:\\n\\t\\t\\n- Bandwidth usage: This may lead to a user\'s bandwidth being hogged and affecting other services (streaming, staking) or a surprise bill.\\n- Connectivity: if a node does not have enough bandwidth to send/receive all messages on the gossipsub layer, then their behaviour may be seen as incorrect by other nodes that may disconnect from it.\\n- Reliability: If the traffic is higher than the available bandwidth, then a node may not be able to send and receive messages reliably.\\n- Other resources: memory usage is correlated with the traffic, and so is disk space for a store service.\\n\\t\\t\\nSo rather than defining what a \\"spam\\" message looks like, we introduced a rate limit on the network to enable a fair use of Waku, with a capping of the bandwidth usage per shard.\\n\\t\\t\\nThis is done with RLN, or Rate Limiting Nullifier, which limits the rate of messages a given publisher sends.\\nIt is currently set to 1 msg/s. Coupled with a maximum message size (150kB) and a maximum number of publishers (80k, TBD), we can assume a maximum bandwidth usage per shard of [around 10Mbps](https://docs.waku.org/research/research-and-studies/capped-bandwidth). Read more about the maximum bandwidth [here](https://docs.waku.org/research/research-and-studies/maximum-bandwidth).\\n\\t\\t\\nRate-limiting publishers in a censorship-resistant and private manner is difficult; this is why we are using zero-knowledge technology:\\n\\t\\t\\n1. Users push their RLN credentials to a smart contract (currently on Ethereum Sepolia testnet).\\n2. Nodes keep track of all registered memberships on the contract.\\n3. When sending a message, the user attaches an RLN proof to the message with the current epoch (timestamp in seconds).\\n4. Nodes can verify the proof without being able to correlate the user\'s Ethereum address (used on the smart contract) with the message being sent, preserving anonymity.\\n5. If a user attempts to send more than 1 msg/s, nodes can detect this and drop the message surplus or spam, protecting the network.\\n\\n### Servicing Mostly-offline and Resource-restricted Devices\\nFinally, how is Waku useful to resource-restricted devices, such as mobile phones and web browsers?\\nWaku defines a number of [request-response protocols](https://rfc.vac.dev/spec/10/#requestreply-domain) to enable such devices to access the Waku network without having to be always online or consume extensive amounts of bandwidth, i.e., without participating in the Waku Relay network.\\nThe [light push protocol](https://docs.waku.org/learn/concepts/protocols#light-push) sends a message to be forwarded to the Waku Relay network, with acknowledgement of reception from the remote node.\\n\\t\\t\\nThe [filter protocol](https://docs.waku.org/learn/concepts/protocols/#filter) enables a _light client_ to subscribe to a remote peer and only request a subset of messages instead of all messages transmitted on a shard.\\n\\t\\t\\nFinally, the store protocol enables _light clients_ and _relay nodes_ to retrieve historical messages that may have been missed.\\n\\t\\t\\n## The Waku Network\'s value proposition\\n\\t\\t\\nWhile we have defined the desired properties and the technology, it is important to understand the potential use cases of the Waku Network. This [issue](https://github.com/waku-org/docs.waku.org/issues/134) currently describes several USPs (Unique Value Propositions), and we will be documenting the subject further. Some noteworthy use cases are, beyond building any machine-to-machine or human-to-human communication app:\\n\\t\\t\\n- No-Infra DApps: combining various decentralised technologies (Waku, Ethereum, IPFS) to deploy a DApp without paying a centralised hosting provider.\\n- Censorship-resistant access to a decentralised network for light clients: using the request-response protocols to enable light clients to access your peer-to-peer network without relying on a centralised, censorable web gateway.\\n- Signal network: Use The Waku Network to find other peers and negotiate specific parameters to form your own peer-to-peer, Waku or not, network with different rules (higher rate limit, etc.).\\n## Are we  _blank_ yet?\\n\\t\\t\\nWe have described Waku\'s desired properties and how the Waku Network delivers on those. Does it mean Waku is censorship-resistant, private, sustainable, and scalable? *Not quite.*\\n\\t\\t\\nBootstrapping is a component of all peer-to-peer networks we did not address: how does a new node find other nodes in the network? We use Ethereum technology for bootstrapping (ENR + DNS Discovery). However, this technology could be more decentralised. We intend to improve this potential around the end of 2024 or 2025.\\n\\t\\t\\nIn general, the network needs to be decentralised to achieve the desired properties. While some of the technology enables such decentralisation (and we are working on improving the part that does not), this problem has a social component. If the Waku team is the only one running nodes, then inherently, the network cannot be considered decentralised, and hence censorship-resistant, etc. To solve this, we need to push for the adoption of the Waku network so we can build a good base of node operators and developers that run nodes without depending on the Waku team to do so.\\n\\t\\t\\nWe increased this effort last year and will continue this year.\\n\\t\\t\\nAnother aspect is providing monetary incentivisation to node operators to run nodes so the network can become self-sustainable. We do not have such a protocol; we are building the first PoC.\\n\\t\\t\\nThe Waku Network plays an important role here. Once such a protocol is available, a common (market) place is needed for developers/users and operators to find each other; the Waku Network would be such a place.\\n\\t\\t\\n## Conclusion\\n\\t\\t\\nWaku aims to enable sovereign communications with specific properties. The Waku Network is a critical milestone towards achieving such a goal and creating a common, decentralisable network on which developers can build, and we can add more protocols.\\n\\t\\t\\nWhile we cannot say that Waku is all it aims to be today, it is already permissionless and decentralisable on several layers.\\n\\t\\t\\nWe are now working on not only adding the missing pieces to the protocols but also pushing for Waku\'s adoption to make it de facto decentralised, enabling private & censorship resistance for everyone.\\n\\n---\\n\\nIf you have questions about Waku\u2019s development roadmap or want to join a like-minded community focused on bringing peer-to-peer communications to millions of users, join the Waku [Discord](https://discord.waku.org/) or follow us on [X](https://twitter.com/Waku_org).\\n\\nIf the technology speaks to you, [check out our open job positions](https://https//status.app/jobs/) or crack some of our [bounties](https://github.org/waku-org/bounties).\\n\\nYou can also help to ensure that we stay decentralised by [running your own Waku Node!](https://docs.waku.org/guides/nwaku/run-node)"},{"id":"convergence-of-ai-blockchain-privacy","metadata":{"permalink":"/convergence-of-ai-blockchain-privacy","source":"@site/posts/2024-03-22-march-convergence-of-ai-blockchain-privacy.md","title":"The convergence of AI, Blockchain and Privacy","description":"An overview of the need for decentralised and privacy-preserving artificial intelligence.","date":"2024-03-22T00:00:00.000Z","formattedDate":"March 22, 2024","tags":[],"readingTime":4.64,"hasTruncateMarker":true,"authors":[{"name":"Guru","twitter":"@hackyguru","github":"hackyguru","key":"guru"}],"frontMatter":{"layout":"post","name":"The convergence of AI, Blockchain and Privacy","title":"The convergence of AI, Blockchain and Privacy","date":"2024-03-22T00:00:00.000Z","authors":["guru"],"published":true,"slug":"convergence-of-ai-blockchain-privacy","categories":"waku, ideas","image":"/img/ai-waku.png"},"prevItem":{"title":"The Waku Network: Technical Overview","permalink":"/2024-waku-network-tech-overview"},"nextItem":{"title":"Build a dApp Using Waku and Vue.js","permalink":"/build-dapps-using-waku"}},"content":"An overview of the need for decentralised and privacy-preserving artificial intelligence.\\n\\n\x3c!--truncate--\x3e\\n\\n---\\n\\n<figure>\\n    <img src=\\"/img/ai-waku.png\\"\\n         alt=\\"header-image\\" />\\n    <figcaption>Image generated with MidJourney</figcaption>\\n</figure>\\n\\n<br />\\nAfter the recent boom in the generative artificial intelligence (AI) space, several critics have questioned the convergence of AI and web3. There is also a growing misconception that web3 does not have native use cases within the AI space. Indeed, some are popularising an unfounded argument that web3 is being forced into the AI space. This blog post will explore the need for an intersection between these cutting-edge technologies and some potential use cases where we can implement a technology like [Waku](https://waku.org/) in AI-related areas.\\n\\n\\n## The need for an intersection between AI and web3\\n\\nI have always believed that web3 is not \'just\' about blockchains but extends to the broader idealogy of building censorship-resistant infrastructure with privacy-preserving technologies.\\n\\nWe often only understand the need for such ethos once we get exposed to the problems that hinder innovation through censorship. A perfect example of this scenario is a recent [statement from an Indian government official](https://timesofindia.indiatimes.com/gadgets-news/government-to-tech-companies-take-permission-before-launching-ai-models-in-india/articleshow/108167769.cms).\\n\\nThe government official stated that with new regulations and compliance requirements faced by the artificial intelligence space, GenAI domain experts are looking to web3 for solutions. AI innovators are turning to permissionless and privacy-preserving technologies to distribute their model deployments and avoid being censored.\\n\\n\\n## The role of a privacy-preserving communications protocol in AI\\n\\nCommunication is one of the most important aspects of any application or service that uses any generative AI model. This is to solve the problem of censorship and safeguard user data from mass surveillance attacks.\\n\\n\\n### **Why privacy-preserving communications over traditional web2 communications?**\\n\\nThe AI space proposes a vast and unspoken risk of mass surveillance attacks. Centralised LLMs can log your prompts and identity in the pretext of data analytics and reinforcement learning. This means that the centralised stakeholders know about the conversations between you and your AI agent.\\n\\nIt gets even scarier when we think about the potential attacks that can be carried out with this data. Your AI agents can use critical information, such as your health conditions, to carry out targeted advertisements or data harvesting.\\n\\n\\n### **How can Waku impact communications in the AI space?**\\n\\n[Waku](https://waku.org/) is a decentralised and privacy-preserving communications protocol that can be used to build securely scalable and robust communication between different nodes.\\n\\nWaku has a huge potential to create an everlasting impact on the AI space. Waku can help AI projects fill up some of the most crucial technical gaps:\\n\\n\\n1. Decoupling identity from data\\n\\n    Understandably, AI projects have the potential to generate massive amounts of data that can be useful in areas like big data analysis, analytics and reinforcement training. However, storing data sourced by an AI model can pose a considerable risk as the user\'s identity will be linked with their particular prompts. For example, a centralised LLM platform should be able to know about the critical health-related prompts that you search for.\\n\\n2. By knowing the identity of a prompt, users are vulnerable to mass surveillance that can result in targeted advertising, social engineering and other attacks.\\n\\n    With a technology like Waku, decoupling the identity from the prompts is possible. All data generated from LLMs and GenAI models will be anonymous and private.\\n\\n3. Censorship\\n\\n    Centralised gatekeepers can block traffic from a specific country or geographic/cultural/economic identity. By using Waku, a project cannot resolve the IP address of a message sender or receiver. The identity of every node in the network is dynamic. It can not reveal any geographic or cultural information, making it impossible for gatekeepers to ban a specific group of users.\\n\\n4. Data security at its best\\n\\n    Waku provides flexibility for projects to choose their cryptographic encryption standard. This enables developers to build secure communication channels that do not force a specific type of encryption.\\n\\n5. Federated Learning Networks\\n\\n    Waku can facilitate communication and data sharing among edge devices participating in federated learning networks. It can ensure privacy by enabling encrypted communication channels between devices, allowing them to collaborate on model training tasks without revealing sensitive data since the communication channels are built without revealing.\\n\\n6. Decentralised AI Governance\\n\\n    Waku can facilitate decentralised governance mechanisms for AI systems, allowing stakeholders to participate in decision-making processes while maintaining privacy and transparency. This could be particularly useful in ensuring fairness, accountability, and transparency in AI systems.\\n\\n7. Privacy-Preserving Data Labeling\\n\\n    An essential component of training AI models is data labelling. Waku can be used to crowdsource data labelling tasks while preserving the privacy of the labelled data. Workers can contribute labels without directly accessing the underlying data, mitigating privacy risks.\\n\\n8. Decentralised Governance models for AI\\n\\n    Waku can facilitate decentralised governance mechanisms for AI systems, allowing stakeholders to participate in decision-making processes while maintaining privacy and transparency. This could be particularly useful in ensuring fairness, accountability, and transparency in AI systems.\\n\\n9. DOS Protection for APIs\\n\\n    With Waku\'s Rate Limiting Nullifiers (RLN), it is possible to implement economic rate limiting for the API endpoints. Denial of Service (DoS) attacks cannot exploit the LLM models. Exposing an API endpoint without a proper rate-limiting mechanism can lead to service outages or unintended computation expenses.\\n\\n\\n### **Some closing words**\\n\\nThe use cases mentioned above are just a few examples of where Waku can add value within the AI space. So many areas are yet to be explored, and the Waku team is on hand to help AI projects integrate a privacy-preserving communications infrastructure. [Reach out to the Waku team](https://discord.waku.org/) if you want to learn more!"},{"id":"build-dapps-using-waku","metadata":{"permalink":"/build-dapps-using-waku","source":"@site/posts/build-dapps-using-waku-and-vue-js.mdx","title":"Build a dApp Using Waku and Vue.js","description":"Read in Spanish","date":"2024-03-04T00:00:00.000Z","formattedDate":"March 4, 2024","tags":[],"readingTime":19.725,"hasTruncateMarker":true,"authors":[{"name":"Joel Adewole","twitter":"@wolz_codelife","github":"wolz-CODElife","key":"joel"}],"frontMatter":{"layout":"post","name":"Build a dApp Using Waku and Vue.js","title":"Build a dApp Using Waku and Vue.js","date":"2024-03-04T00:00:00.000Z","authors":"joel","published":null,"slug":"build-dapps-using-waku","image":"/img/black-waku-logo-with-name.png","sidebar_class_name":"hidden"},"prevItem":{"title":"The convergence of AI, Blockchain and Privacy","permalink":"/convergence-of-ai-blockchain-privacy"},"nextItem":{"title":"February EcoDev Roundup","permalink":"/february-roundup"}},"content":"import { Button } from \'@acid-info/lsd-react\'\\n\\n<a href=\\"/es/build-dapps-using-waku\\">\\n    <Button>Read in Spanish</Button>\\n</a>\\n\\n<br /><br />\\n\\nDid you know that far beyond being a mere industry buzzword, decentralised communication represents a strategic response to the vulnerabilities inherent in centralised systems? It prioritises privacy, security, and censorship resistance, making it an indispensable component in web developers\' toolkits.\\n\\n\x3c!--truncate--\x3e\\n\\nTraditional centralised communication systems have long struggled with censorship, single points of failure, and privacy concerns. With the rise of Web 3 and blockchain technology, decentralised communication solutions like Waku are emerging as a promising alternative. Waku offers a peer-to-peer messaging system that is resilient to censorship, scalable, and secure, making it an ideal choice for dApp developers looking to build next-generation applications.\\n\\nThis article will guide you on how to build a decentralised application (dApp) using Waku, an uncompromising decentralised communication protocol, and Vue.js, a popular JavaScript framework for building user interfaces. Before diving into the hands-on development aspects of this article, it is recommended that you have a basic understanding of Vue.js, familiarity with Tailwind CSS for UI styling, and a grasp of web3.js for seamless wallet integration.\\n\\nIf these technologies are new to you, no problem \u2013 this guide is meticulously created for all levels of expertise, providing step-by-step guidance at every level.\\n\\n\\n## **Understanding Waku**\\n\\nWaku is a collection of decentralised peer-to-peer messaging protocols that enable secure and censorship-resistant communication over a decentralised network. Its features include end-to-end encryption, persistent/ephemeral messaging, and efficient peer discovery, providing a foundation for secure and reliable communication.\\n\\nWaku operates within a peer-to-peer topology, creating a decentralised network that thwarts censorship and provides surveillance resistance. Its design supports scalability, with the ability to accommodate millions of users. It is designed to be the successor of Whisper, the messaging layer of the Ethereum blockchain peer-to-peer protocol suite, and outperforms it in scalability and resource efficiency.\\n\\nWaku\'s architecture is underpinned by three distinct network interaction domains: gossip, discovery, and request/response. Although Waku is a cohesive whole in terms of capabilities, it encompasses three primary clients designed for different environments and several SDKs, including Rust, React Native, Kotlin, and Swift.\\n\\n\\n\\n1. nwaku: The reference implementation in Nim.\\n2. go-waku: Tailored for native integration with Golang applications.\\n3. js-waku: A JavaScript implementation optimized for browser environments.\\n\\nWaku consists of multiple protocols, each serving a specific function within the network. They include, but are not limited to:\\n\\n\\n\\n* Waku Relay: The backbone of the Waku network, employing a pub/sub approach to peer-to-peer messaging. Emphasizes privacy, censorship resistance, and security, extending the libp2p GossipSub protocol.\\n* Waku Filter: A lightweight version of the relay protocol designed for resource-restricted devices. Allows light nodes to receive specific messages of interest from full nodes.\\n* Waku Store: Facilitates message retrieval for devices unable to participate in the Waku Relay network while offline.\\n* Waku Light Push: A request/response protocol enabling nodes with short connection windows or limited bandwidth to publish messages to the Waku network.\\n\\n![alt_text](/posts/build-dapps-using-waku-and-vue-js/waku-relay-shards.png)\\n\\n\\nUnderstanding Waku\'s architecture and protocols lays the groundwork for proceeding into practical implementations.\\n\\n\\n## **Use cases of Waku**\\n\\nWaku\'s versatile architecture and capabilities find relevance in a myriad of real-world scenarios where secure and decentralised communication is paramount. Whether it\'s facilitating private conversations between users, enabling data exchange between devices, or supporting communication among nodes within a network, Waku emerges as a robust solution.\\n\\n\\n#### **Privacy-focused communication**\\n\\nWaku\'s emphasis on privacy makes it an ideal choice for scenarios where safeguarding user information is of utmost importance. In applications dealing with sensitive data or confidential conversations, Waku\'s end-to-end encryption and decentralised architecture provide a secure environment, mitigating the risks associated with centralised communication platforms.\\n\\n\\n#### **Censorship-resistant messaging**\\n\\nWaku offers a beacon of hope for unrestricted communication in regions where internet censorship is prevalent. Its peer-to-peer topology prevents centralised authorities from controlling or monitoring messaging traffic, ensuring that users can communicate freely without fear of censorship. This makes Waku particularly valuable in promoting freedom of expression and supporting open communication channels.\\n\\n\\n#### **Use in dApps for decentralised communication**\\n\\nDecentralised applications (DApps) form a burgeoning ecosystem where Waku can play a pivotal role. Waku\'s integration into dApps enhances communication functionalities, enabling real-time interactions among users while maintaining the decentralised ethos. This proves particularly valuable in scenarios such as collaborative platforms, social networks, or any application where user engagement and communication are central components.\\n\\nBy exploring the features and capabilities of Waku, it becomes evident that Waku\'s applicability extends beyond theoretical advantages, finding practical application in diverse areas.\\n\\n\\n## **Building a dApp with Waku and Vue.js**\\n\\nPolling systems often face challenges related to centralisation, privacy concerns, and susceptibility to manipulation. By integrating Waku and Vue.js, we can tackle these challenges, creating a decentralised voting poll application that leverages the power of peer-to-peer communication.\\n\\nHere is the entire source code of my voting poll app on GitHub: [https://github.com/wolz-CODElife/waku-vue-poll.git](https://github.com/wolz-CODElife/waku-vue-poll.git) and the [live application](https://waku-vue-poll.vercel.app/) is hosted on Vercel.\\n\\n\\n\\n![alt_text](/posts/build-dapps-using-waku-and-vue-js/image-1.png)\\n\\n\\n\\n\\n![alt_text](/posts/build-dapps-using-waku-and-vue-js/image-2.png)\\n\\n\\n\\n\\n![alt_text](/posts/build-dapps-using-waku-and-vue-js/image-3.png)\\n\\n\\n\\n### **Dev tools I used?**\\n\\n\\n\\n* Vite: To bootstrap the Vue3 application with the Tailwind template.\\n* Vue 3: To build the user interface.\\n* TypeScript: For type safety and potential for catching errors during compiling.\\n* Tailwind CSS: For styling the user interface.\\n* Web3.js: For implementing wallet connect.\\n* Node Polyfill Webpack Plugin: For providing polyfills necessary for emitting Web3.js events in the browser. Since Vue3 uses webpack v5, where polyfill Node core modules were removed.\\n* Crypto Hash: For hashing user address, where wallet is not available.\\n* Protobufjs: For serializing message data sent through Waku.\\n* `@waku/sdk`: For accessing Waku node methods in JavaScript.\\n\\n\\n### **Setting up the development environment**\\n\\nTo set up your development environment, ensure you have Node v18+ then open a new terminal in your working directory and run the following command:\\n\\n\\n```\\nnpm create vite@latest\\n```\\n\\n\\nWhich will begin a dialogue in the terminal, you can choose options that work for you, or use the same options as I used:\\n\\n\\n```\\nNeed to install the following packages:\\n  create-vite@5.1.0\\nOk to proceed? (y) y\\n\u2714 Project name: \u2026 waku-poll-app\\n\u2714 Select a framework: \u203a Vue\\n\u2714 Select a variant: \u203a TypeScript\\n```\\n\\n\\nThis should create a new Vue application in your working directory, navigate to the app, install the default dependencies and start the app using the following command:\\n\\n\\n```\\ncd waku-poll-app\\nnpm install\\nnpm run dev\\n```\\n\\n\\nNext, we want to create a file structure that allows us to componentize the various parts of the app. Your `src` path should have a file structure like this:\\n\\n\\n\\n![alt_text](/posts/build-dapps-using-waku-and-vue-js/image-4.png)\\n\\n\\n\\nAs we proceed we will update files with the necessary code, as for `assets/3dpoll.jpg` feel free to replace it with any image you see fit for your landing page.\\n\\n\\n### **Setting up Tailwind in Vue.js**\\n\\nTo build our UI, we need to first install and configure Tailwind CSS in Vue 3. You can follow the official guide on [Setting up Tailwind CSS](https://v2.tailwindcss.com/docs/guides/vue-3-vite#setting-up-tailwind-css).\\n\\n\\n### **Configuring routes**\\n\\nTo create multiple pages/routes in the app, we have to install Vue Router by running the following command in the terminal:\\n\\n\\n```\\nnpm install --save vue-router@next \\n# Install the latest version\\n```\\n\\n\\nIn this app, we just need two routes: \u201cHome\u201d and \u201cPolls\u201d which we have inside the `src/views` folder. These routes will contain the Layout of each page, and then we can define the routes in the `src/router/index.ts` file by using the following code:\\n\\n\\n```\\nimport { createRouter, createWebHistory, RouteRecordRaw } from \'vue-router\'\\nimport Home from \'@/views/Home.vue\'\\n\\nconst routes: Array<RouteRecordRaw> = [\\n  {\\n    path: \'/\',\\n    name: \'Home\',\\n    component: Home,\\n  },\\n  {\\n    path: \'/polls\',\\n    name: \'Polls\',\\n\\n    component: () => import(\'../views/Polls.vue\'),\\n  }\\n]\\n\\nconst router = createRouter({\\n  history: createWebHistory(),\\n  routes,\\n})\\n\\nexport default router\\n```\\n\\n\\nIn the code snippet above, a Vue.js router configuration is defined. We import the necessary functions and types from \'vue-router\' and the Home component from `@/views/Home.vue`.\\n\\nThe routes array contains route definitions for the Home and Polls components. The router is created using createRouter and createWebHistory functions, and the routes we defined earlier.\\n\\nThe `component: () => import(\'../views/Polls.vue\')` is used to dynamically import the \'Polls.vue\' component. This is a feature provided by Vue.js to asynchronously load the component when it\'s needed, which can help improve initial page load performance by splitting the code into smaller chunks.\\n\\nFinally, the router is exported so we can access it in \u201cmain.ts\u201d.\\n\\nNext, we register `router` to the Vue app by including it in the \u201cmain.ts\u201d file like this:\\n\\n\\n```\\n// main.ts or main.js\\nimport { createApp } from \'vue\';\\nimport App from \'./App.vue\';\\nimport \'./css/index.css\'\\n\\nimport router from \'./router\'\\n\\ncreateApp(App).use(router).mount(\'#app\')\\n```\\n\\n\\nNext, we will create a Layout for our application with the following inside \u201cApp.vue\u201d:\\n\\n\\n```\\n<script lang=\\"ts\\">\\n<\/script>\\n\\n\\n<template>\\n  <div class=\\"flex flex-col h-screen justify-between\\">\\n    <router-view class=\\"container max-w-8xl mx-auto mb-auto px-4\\" />\\n  </div>\\n</template>\\n\\n<style>\\n#app {\\n  font-family: Avenir, Helvetica, Arial, sans-serif;\\n  -webkit-font-smoothing: antialiased;\\n  -moz-osx-font-smoothing: grayscale;\\n  color: #2c3e50;\\n}\\n</style>\\n```\\n\\n\\nIn the code above, we use `router-view` to dynamically load the components of the current route into the DOM.\\n\\n\\n### **Installing Waku and its dependencies**\\n\\nTo get started with Waku in our Vue 3 application, we need to install `@waku/sdk` which is a TypeScript implementation of the Waku protocol designed for web browser environments.\\n\\nTo install `@waku.sdk` run the following command in the terminal:\\n\\n\\n```\\nnpm install @waku/sdk\\n```\\n\\n\\nIt is also recommended to create a message structure for your app, typically Waku developers use [Protocol Buffers](https://protobuf.dev/) for consistency, interoperability, compatibility and payload size. To install `protobufjs`, run the following command in the terminal:\\n\\n\\n```\\nnpm install protobufjs\\n```\\n\\n\\n\\n### **Implementing Waku logic**\\n\\nThe application runs on two fundamental logic, which are the wallet connect and Waku communication integrations. We will create two composables \u201cwaku.ts\u201d and \u201cclient.ts\u201d inside `src/composables`.\\n\\n\u201cwaku.ts\u201d contains all the methods our Vue app needs to interact with the Waku protocol and transmit messages(polls) across users on the app. Inside this file, you should have the following code:\\n\\n\\n```\\nimport { ref } from \'vue\';\\nimport protobuf, { Message } from \'protobufjs\';\\nimport {\\n    createLightNode,\\n    waitForRemotePeer,\\n    createDecoder,\\n    createEncoder,\\n    Protocols,\\n    IFilterSubscription,\\n} from \'@waku/sdk\';\\n\\ninterface PollOption {\\n    value: string;\\n    votes: number;\\n}\\n\\ninterface PollMessage {\\n    question: string;\\n    options: { [key: string]: PollOption };\\n}\\n\\ninterface Poll {\\n    msgid: string;\\n    timestamp: string;\\n    sender: string;\\n    message: PollMessage;\\n    // other properties...\\n}\\n\\n\\nexport const status = ref<string>(\'connecting...\');\\nexport const sender = ref(localStorage.getItem(\'senderWalletAddress\') ?? \'\');\\nexport const polls = ref<Poll[]>(JSON.parse(localStorage.getItem(\'polls\') ?? \'[]\'));\\n\\n\\nexport const wakuNode = await createLightNode({\\n    defaultBootstrap: true,\\n});\\n\\nexport const waitForRemotePeers = async () => {\\n    // Wait for a successful peer connection\\n    await waitForRemotePeer(wakuNode, [\\n        Protocols.LightPush,\\n        Protocols.Filter,\\n    ]);\\n}\\n\\n// Choose a content topic\\nexport const contentTopic = \'/waku-vue-poll/1/polls/proto\';\\n\\n// message encoder and decoder\\nexport const encoder = createEncoder({ contentTopic, ephemeral: true });\\nexport const decoder = createDecoder(contentTopic);\\n\\n// Message structure with Protobuf\\nexport const PollQuestionWakuMessage = new protobuf.Type(\'PollQuestion\')\\n    .add(new protobuf.Field(\'timestamp\', 1, \'string\'))\\n    .add(new protobuf.Field(\'msgid\', 2, \'string\'))\\n    .add(new protobuf.Field(\'sender\', 3, \'string\'))\\n    .add(new protobuf.Field(\'message\', 4, \'string\'));\\n\\nexport const serializeMessage = (protoMessage: Message) => {\\n    return PollQuestionWakuMessage.encode(protoMessage).finish()\\n}\\n\\nexport function useWaku() {\\n\\n    async function start() {\\n        status.value = \'connecting\'        \\n        try {\\n            await wakuNode?.start().then(() => {\\n                if (wakuNode.isStarted()) return waitForRemotePeers()\\n            }).then(() => {\\n                return wakuNode.connectionManager.getPeersByDiscovery()\\n            }).then((data:any) => {\\n                if (\\n                    wakuNode.libp2p.getConnections().length ||\\n                    data.CONNECTED.bootstrap.length ||\\n                    data.CONNECTED[\'peer-exchange\'].length\\n                ) {\\n                    subscribe()\\n                    status.value = \\"connected\\"\\n                }\\n            })\\n        }\\n        catch (error) {\\n            console.error(\'Error initializing Waku Light Node:\', error);\\n            status.value = \'not connected\';\\n        }\\n    }\\n\\n    async function stop() {\\n        unsubscribe();\\n        wakuNode.stop()\\n        status.value = \'not conencted\';\\n    }\\n    let subscription = {} as IFilterSubscription\\n\\n    async function subscribe() {\\n        if (!wakuNode || status.value !== \'connected\') await start();\\n        try {\\n          subscription = await wakuNode?.filter?.createSubscription();\\n          await subscription.subscribe([decoder], (wakuMessage) => {\\n            const messageObj = PollQuestionWakuMessage.decode(wakuMessage.payload).toJSON();\\n            const result: Poll = {\\n                timestamp: messageObj.timestamp,\\n                msgid: messageObj.msgid,\\n                sender: messageObj.sender,\\n                message: JSON.parse(messageObj.message ?? \'{}\')\\n            };\\n            handleSubscriptionResult(result);\\n          });\\n        } catch (error) {\\n          console.error(\'Error subscribing to Content Topic:\', error);\\n        }\\n      }\\n\\n      function handleSubscriptionResult(result:Poll) {\\n        const msgid = result.msgid;\\n        const existingPollIndex = polls.value.findIndex(poll => poll.msgid === msgid);\\n\\n        if (existingPollIndex !== -1) {\\n          // Update the existing poll\\n          polls.value.splice(existingPollIndex, 1, result);\\n        } else {\\n          // Add the new poll to the array\\n          polls.value.unshift(result);\\n        }\\n\\n        if (polls.value.length > 0) {\\n            localStorage.setItem(\'polls\', JSON.stringify(polls.value));\\n        }\\n      }\\n\\n    async function unsubscribe() {\\n        subscription.unsubscribe([contentTopic])\\n    }\\n\\n    async function publish(sender: string, message: string, timestamp: string = new Date().toUTCString(), msgid: string = Date.now() + Math.floor(Math.random() * 90000).toString()) {    \\n        if (!wakuNode || status.value !== \'connected\') await start()\\n\\n        try {\\n            const protoData = PollQuestionWakuMessage.create({\\n                timestamp: timestamp,\\n                msgid: msgid,\\n                sender: sender,\\n                message: message\\n            })\\n\\n            return wakuNode.lightPush.send(encoder, { payload: serializeMessage(protoData) })\\n        }\\n        catch (error) {\\n            console.error(\'Error publishing to Content Topic:\', error);\\n        }\\n    }\\n\\n    return {\\n        wakuNode,\\n        status,\\n        sender,\\n        polls,\\n        start,\\n        stop,\\n        subscribe,\\n        unsubscribe,\\n        publish,\\n    };\\n}\\n```\\n\\n\\nThe above code enables interaction with the Waku network, enabling the creation and participation in polls within a Vue application.\\n\\nFirstly, we import necessary functions and define data structure using TypeScript interfaces to set a standard for PollOption, PollMessage and Poll. These structures represent the questions and options available in a poll and the overall structure of a poll, respectively.\\n\\nReactive variables (status, sender, and polls) are defined to keep track of the connection status, the sender\'s information, and the list of polls. These variables will be necessary for updating the Vue application in response to changes in the Waku network.\\n\\n_Notice that we didn\u2019t make WakuNode or any variable interacting with the Waku network directly reactive. As this will trigger [issue #1746](https://github.com/waku-org/js-waku/issues/1746) due to Waku nodes being too complex for Vue mechanisms to handle, so we have to keep the WakuNode instance outside Vue\u2019s reactive scope._\\n\\n_BTW, this took me almost 3 months to figure out \ud83d\ude2d_\\n\\nThe WakuNode connection is established using the createLightNode function, optimizing resource usage by creating a Waku light node. This node connects to the Waku network and waits for peers to join using the [LightPush](https://rfc.vac.dev/spec/19/) and [Filter](https://rfc.vac.dev/spec/12/) Protocols. We defined a specific [Content Topic](https://docs.waku.org/learn/concepts/content-topics) for this app to categorize messages and should have this format, `/{application-name}/{version}/{content-topic-name}/{encoding}`, make sure to replace `WAKU_CONTENT_TOPIC` with your actual Content Topic. and Protobuf is utilized for encoding and decoding messages efficiently to suit the `PollQuestionWakuMessage` message structure.\\n\\nAfter connecting to the Waku network, interaction follows. We created a function called useWaku() that encapsulates and returns all the variables and methods needed to interact with Waku across the entire application.\\n\\nFirst, we have the `start()` function that initiates the WakuNode connection, waits for peers to connect and subscribes to the chosen content topic, before updating the user\u2019s status to `status.value = \\"connected\\"`.\\n\\nNext, we have `stop()` function that unsubscribes from the Content Topic and stops the WakuNode, before updating the user\u2019s status to `status.value = \'not conencted\'`.\\n\\nNext, we have the `subscribe()` function that creates a subscription to the Content Topic using the Waku Filter, receives incoming poll messages, decodes them and updates the polls list. The handleSubscriptionResult function decodes incoming poll messages, checks for duplicates, and updates the list of polls accordingly.\\n\\nNext, we have the `unsubscribe()` function that disconnects the app from the Content Topic.\\n\\nFinally, the `publish()` function accepts the necessary parameters to create a new poll message and send the encoded poll message to the Waku network using the LightPush protocol.\\n\\n\\n### **Implement Wallet Connect logic**\\n\\nThe `sender` variable in the \u201cwaku.ts\u201d composable stores the wallet address of the connected wallet. For us to implement wallet connect, we need to first install \u201cWeb3.js\u201d by running the following command in the terminal:\\n\\n\\n```\\nnpm install web3\\n```\\n\\n\\nSince Vue 3 uses webpack v5, we need to install Node Polyfill Webpack Plugin to provide the polyfills necessary for emitting Web3.js events in the browser. Run the following command in the terminal to install the Node Polyfill Webpack Plugin:\\n\\n\\n```\\nnpm i node-polyfill-webpack-plugin\\n```\\n\\n\\nThen include it in the \u201cvite.config.ts\u201d so that your \u201cvite.config.ts\u201d looks like this:\\n\\n\\n```\\nimport { defineConfig } from \'vite\';\\nimport vue from \'@vitejs/plugin-vue\';\\nimport path from \'path\';\\n\\n// https://vitejs.dev/config/\\nexport default defineConfig({\\n  plugins: [vue()],\\n  resolve: {\\n    alias: {\\n      \'@/\': `${path.resolve(__dirname, \'src\')}/`,\\n    },\\n  },\\n  optimizeDeps: {\\n    include: [\'node-polyfill-webpack-plugin\'],\\n  },\\n  esbuild: {\\n    supported: {\\n      \'top-level-await\': true\\n    }\\n  }\\n});\\n```\\n\\n\\nYou will notice we are also supporting `top-level-await`, this is because we are instantiating WakuNode at a top-level and the Vite build doesn\u2019t support this.\\n\\nInside the \u201cclient.ts\u201d we will have the following code:\\n\\n\\n```\\nimport Web3 from \'web3\';\\nimport { useWaku } from \'./waku\';\\nimport { sha256 } from \'crypto-hash\';\\n\\ndeclare global {\\n    interface Window {\\n        ethereum: any;\\n        web3: any\\n    }\\n}\\n\\nconst waku = useWaku()\\nexport const generateUniqueID = () => {\\n    const userAgentHash = sha256(navigator.userAgent + Math.floor(Math.random() * 90000));\\n  return userAgentHash;\\n};\\n\\n// Validate Ethereum Address\\nexport const validateEthereumAddress = (address:any) => {\\n    return /^(0x)?[0-9a-fA-F]{40}$/.test(address);\\n}\\n\\nexport function useWalletConnect() {\\n    // Improved connectWallet Function\\n    async function connectWallet() {\\n        if (window.ethereum) {\\n            try {\\n                const accounts = await window.ethereum.request({ method: \'eth_requestAccounts\' });\\n                window.web3 = new Web3(window.ethereum);\\n\\n                if (accounts.length > 0 && validateEthereumAddress(accounts[0])) {\\n                    const walletAddress = accounts[0];\\n                    waku.sender.value = walletAddress;\\n                    localStorage.setItem(\'senderWalletAddress\', walletAddress);\\n                } else {\\n                    console.error(\'Invalid Ethereum address detected. Generating fallback ID.\');\\n                    generateUniqueID().then((hashID) => {\\n                        const newHash = \'abcdef012345\'[Math.floor(Math.random() * 12)] + \\"x\\" + hashID.slice(-20);\\n                        waku.sender.value = newHash;\\n                        localStorage.setItem(\'senderWalletAddress\', newHash);\\n                    });\\n                }\\n\\n                await waku.start();\\n            } catch (error) {\\n                console.error(\'Error connecting wallet:\', error);\\n            }\\n        } else {\\n            console.log(\'No Ethereum wallet detected.\');\\n        }\\n    }\\n\\n\\n    async function disconnectWallet() {\\n        localStorage.removeItem(\'senderWalletAddress\');\\n        localStorage.removeItem(\'polls\');\\n        // stop waku\'s light node\\n        await waku.wakuNode.stop();\\n        waku.stop()\\n        waku.sender.value = \\"\\"\\n        waku.status.value = \\"connecting...\\"\\n        waku.polls.value = []\\n    }\\n    async function signMessage(msgid: string, stringifiedMessage:string) {\\n        const messageToSign = `Message ID: ${msgid}, Content: ${stringifiedMessage}`;\\n        let signature;\\n        try {\\n            signature = await window.ethereum.request({\\n                method: \'personal_sign\',\\n                params: [messageToSign, waku.sender.value],\\n            });\\n            return signature\\n        } catch (signError) {\\n            console.error(\'Error signing the message:\', signError);\\n            return;\\n        }\\n    }\\n\\n    return {\\n        connectWallet,\\n        disconnectWallet,\\n        signMessage\\n    };\\n}\\n```\\n\\n\\nThe above code enables users to connect their crypto wallet to the app as a means of identification. In this scenario, we used the wallet address as the sender of the poll.\\n\\nHowever, some users may not have wallets and we don\u2019t want to limit the application to only users that have crypto wallets. To tackle this, we created the `generateUniqueID()` function to form a random hash from the `navigator.userAgent` address of the user\u2019s browser. Then we store the sender\u2019s address in localStorage as \u201c\'senderWalletAddress\'\u201d.\\n\\nWe also created a `disconnectWallet()` function to remove the wallet address from localStorage and stop the WakuNode running.\\n\\nTo claim ownership of the polls, users have to sign each poll message using their wallet, for this the `signMessage` function is executed.\\n\\nThe `useWalletConnect` composable encapsulates and returns the `connectWallet`, `disconnectWallet` and `signMessage` functions so that they are accessible across the application.\\n\\n\\n### **Building the UI components**\\n\\nNow that we have our logic, we can build the UI to utilize the data and methods in our composables.\\n\\nWe have 3 major components in this app, the `NavBar`, `Home` and `Polls`. Feel free to create your user interface or use mine:\\n\\n\\n\\n* [NavBar](https://github.com/wolz-CODElife/waku-vue-poll/blob/master/src/components/NavBar.vue): `src/components/NavBar.vue`\\n* [Home](https://github.com/wolz-CODElife/waku-vue-poll/blob/master/src/views/Home.vue): `src/views/Home.vue`\\n* [Polls](https://github.com/wolz-CODElife/waku-vue-poll/blob/master/src/views/Polls.vue): `src/views/.vue`\\n\\n\\n### **Creating polls**\\n\\nIf you go through my NavBar component code, you will find that we have a `ref` called poll:\\n\\n\\n```\\nconst poll = ref<Poll>({\\n  question: \\"\\",\\n  options: {\\n    a: { value: \\"\\", votes: 0},\\n    b: { value: \\"\\", votes: 0},\\n    c: { value: \\"\\", votes: 0},\\n    d: { value: \\"\\", votes: 0},\\n    e: { value: \\"\\", votes: 0}\\n  }\\n})\\n```\\n\\n\\nThis `ref` is updated by the modal form, and on submit, we trigger the `sendMessage` function:\\n\\n\\n```\\nconst sendMessage = () => {\\n  const stringifiedMessage = JSON.stringify(poll.value)\\n  const msgid = Date.now() + Math.floor(Math.random() * 90000).toString();\\n  const timestamp = new Date().toUTCString()\\n\\n  // sign message\\n  signMessage(msgid, stringifiedMessage).then((signature) => {\\n    // send a message\\n    waku.publish(signature, stringifiedMessage, timestamp, msgid)\\n\\n    // reset question state\\n    poll.value = {\\n      question: \\"\\",\\n      options: {\\n        a: { value: \\"\\", votes: 0},\\n        b: { value: \\"\\", votes: 0},\\n        c: { value: \\"\\", votes: 0},\\n        d: { value: \\"\\", votes: 0},\\n        e: { value: \\"\\", votes: 0}\\n      }\\n    }\\n    }\\n    onToggle()\\n    // redirect user to where the new poll is populated\\n    if (router.currentRoute.value.path !== \\"/polls\\") {\\n      router.push(\\"/polls\\")\\n    }\\n  }).catch((error) => {\\n    console.error(\\"Error sending message\\", error);\\n  })\\n}\\n```\\n\\n\\nIn the above code, we stringify the poll data which includes the question, and options so that we can publish the poll as a message to Waku. Then we create a `msgid` and `timestamp` for the message, before using the user\'s wallet to sign the message. Once the message is signed, we call the `waku.publish(waku.sender.value, stringifiedMessage)` function to register the update for other users subscribing to the Content Topic.\\n\\n\\n### **Real-time voting and result polling**\\n\\nIn the \u201cPoll.vue\u201d component, we have a `handleVote()` function:\\n\\n\\n```\\nconst handleVote = async (msgid: string, selectedOption: string | number) => {\\n  loading.value = true\\n  try {\\n    // Find the selected poll in the polls array\\n    let selectedPollIndex = waku.polls.value.findIndex((poll) => poll.msgid === msgid);\\n\\n    if (selectedPollIndex !== -1) {\\n      // Update the vote count before publishing\\n      waku.polls.value[selectedPollIndex].message.options[selectedOption].votes += 1;\\n\\n      // Create a reactive copy to trigger reactivity\\n      const reactiveCopy = reactive({ ...waku.polls.value[selectedPollIndex] });\\n\\n      // Publish the updated poll\\n\\n      const stringifiedMessage = JSON.stringify(reactiveCopy.message);\\n\\n      await waku.publish(reactiveCopy.sender , stringifiedMessage, reactiveCopy.timestamp, msgid);\\n\\n      // Store the msgid in local storage\\n      votedPolls.value.push(msgid);\\n      localStorage.setItem(\'votedPolls\', JSON.stringify(votedPolls.value));\\n    }\\n    loading.value = false\\n  } catch (error) {\\n    console.error(\'Error in handleVote:\', error);\\n  }\\n};\\n```\\n\\n\\nThis function is triggered when the radio input of any option is clicked. This function collected the `msgid` and the `selectedOption` as parameters. Then call the `subscribe()` function to fetch the latest version of the polls, before updating the vote counts of an option in the poll that has the `msgid`.\\n\\nWe created a reactive copy of the poll so that the vote count update will be reflected even if the state changes. Then we publish the reactive copy, which will send the updated poll results to all the users that are subscribed to the Content Topic of this app.\\n\\nTo track the polls a user has voted for, we store a \u201cvotePolls\u201d array in the localStorage.\\n\\nFeel free to play around with the functionality and optimize the performance to meet your application requirements.\\n\\n\\n## **Summary of the article**\\n\\nIn this comprehensive guide, we embarked on a journey to integrate Waku, a decentralised communication protocol, into a Vue.js application, creating a real-time voting poll dApp. Let\'s recap the key takeaways from the guide:\\n\\n\\n\\n* Understanding Waku\\n    * Explored Waku as a family of protocols facilitating private, censorship-resistant communications over a decentralised network.\\n    * Examined Waku\'s features, architecture, and its focus on privacy, decentralisation, and adaptability to various platforms.\\n    * Discussed the different components of Waku, such as Waku Relay, Waku Filter, Waku Store, and Waku Light Push.\\n* Use Cases of Waku\\n    * Discussed real-world scenarios where Waku proves invaluable, emphasizing its role in privacy-focused communication, censorship-resistant messaging, and decentralised communication within dApps.\\n* Building a dApp with Waku and Vue.js\\n    * Set up a Vue.js application using Vite and Tailwind CSS.\\n    * Established a connection to the Waku network, implemented wallet authentication using Web3.js, and integrated the `@waku/sdk` for decentralised communication.\\n    * Demonstrated the step-by-step process of building a real-time voting poll, connecting to the Waku network.\\n\\nAs you conclude this guide, consider taking the following actions to further explore and experiment with Waku:\\n\\n\\n\\n1. **Waku Documentation**: Visit the [Waku documentation](https://docs.waku.org/) to delve deeper into the functionalities, protocols, and use cases of Waku.\\n2. **Experiment with Additional Functionalities**: Extend the capabilities of your dApp by experimenting with additional functionalities provided by Waku. Explore features like ephemeral messaging, decentralised storage, and more to enhance your DApps.\\n3. **Join the Waku Community**: Engage with the [Waku community](https://waku.org/community/) on forums, social media, or developer channels. Connect with like-minded developers, share your experiences, and stay updated on the latest developments within the Waku ecosystem.\\n4. **Contribute to Waku**: Consider [contributing](https://waku.org/about/team) to the Waku project on platforms like GitHub. Whether it\'s reporting issues, submitting pull requests, or suggesting improvements, your contributions can play a vital role in the growth of this decentralised communication protocol."},{"id":"february-roundup","metadata":{"permalink":"/february-roundup","source":"@site/posts/2024-03-01-february-EcoDev-Roundup.mdx","title":"February EcoDev Roundup","description":"Updates from the EcoDev team in February 2024, plus highlights from the community call.","date":"2024-03-01T00:00:00.000Z","formattedDate":"March 1, 2024","tags":[],"readingTime":5.615,"hasTruncateMarker":true,"authors":[{"name":"Amelia Trapp","twitter":"@amelia_trapp","github":"Amelia7689","key":"amelia"}],"frontMatter":{"layout":"post","name":"February EcoDev Roundup","title":"February EcoDev Roundup","date":"2024-03-01T00:00:00.000Z","authors":["amelia"],"published":true,"slug":"february-roundup","categories":"waku, progress","image":"/img/black-waku-logo-with-name.png"},"prevItem":{"title":"Build a dApp Using Waku and Vue.js","permalink":"/build-dapps-using-waku"},"nextItem":{"title":"January EcoDev Roundup","permalink":"/january-ecodev"}},"content":"Updates from the EcoDev team in February 2024, plus highlights from the community call.\\n\\n\x3c!--truncate--\x3e\\n\\n---\\n\\nThe EcoDev team at Waku covers community, growth, partnerships, and communications. Each month, we will share the key highlights and team progress. You can [subscribe](https://waku.org/subscribe/) to the monthly newsletter if you prefer to receive an abridged version of these updates in your inbox.\\n\\n\\n## Events \\n\\n**ETHDenver 23rd February - 3rd March **\\n\\nThe Waku team has been participating in a number of initiatives during ETHDenver. If you\'re there, there is still time to [schedule a meeting with the team](https://waku.org/events/eth-denver/) to discuss integrating Waku, or to exchange ideas about the future of web3 and privacy. \\n\\nWaku Developer Relations Engineer Guru spoke at the [Workable Web3 Summit](https://lu.ma/workable) yesterday, discussing the importance of designing dApps and protocols which are user-friendly and offer interoperable features. Guru also participated in [Libp2p day](https://lu.ma/libp2pday-denver), delivering a talk on \'Building Censorship Resistant Infrastructure with Waku and Libp2p\'. \\n\\nWaku Program Manager Aaron Bendersky will also be speaking at Build Cities\' network state side event later today, March 1st. [Check out his panel](https://twitter.com/Waku_org/status/1761007265262325835) \u2018Cultural Economics: How Culture Drives Local & Network Economies\'.\\n\\n**ETHLatam 13th - 14th March**\\n\\nThe first hackathon of the year is quickly approaching. Waku is sponsoring ETHLatam from March 13th to 14th with US$2,500 in bounties up for grabs. Each project submission should be private by design, abiding by the values of privacy upheld by Waku. [Read more](https://twitter.com/Waku_org/status/1757425618575376574) on how to participate. \\n\\nGuru\u2019s workshop \u2018Uncompromising Web3 Communication at Scale with Waku\u2019 will be live-streamed on X March 13th. Ensure you\u2019re [following Waku](https://twitter.com/Waku_org) to catch his workshop-stye deep dive into Waku technology, which includes a live coding session.\\n\\n**ETHTaipei 21st - 24th March**\\n\\nDuring the conference, Waku Protocol Engineer Danish Arora will present on \u201cBridging the Gap in Decentralised Communications with Waku\u201d. Danish will also be at the [Liberty ZK Hacker House](https://twitter.com/LibertyHouse_1) side event on March 25th, presenting \u201cLeveraging ZK proofs for spam mitigation in a p2p multi-client environment | Waku with RLN.\u201d\\n\\n\\n## Press \\n\\nAs the communications layer of the Logos technology stack, Waku has properties that will resonate deeply with web3 developers across Latin America who understand how peer-to-peer protocols stand to strengthen the civil liberties of citizens and work to address online censorship. \\n\\nSee the coverage of Waku\'s upcoming participation at ETHLatam in [Cointelegraph](https://es.cointelegraph.com/press-releases/waku-advances-in-the-protection-of-communications-privacy-in-latin-america-at-ethlatam) and [Criptonoticias](https://www.criptonoticias.com/comunidad/empresa-recompensa-hackers-ethlatam-2-500-dolares/). You can also listen back to [ETHLatam\u2019s X Space](https://twitter.com/i/spaces/1dRKZEqZXwXxB?s=20) where [Marina](https://twitter.com/Crypto_marina) and [Guru](https://twitter.com/hackyguru) shared insights into how hackers can prepare to build with Waku during the hackathon. \\n\\n\\n## Content\\n\\nIf you are new to Waku, [ this short intro video](https://www.youtube.com/watch?v=SK5TF3l3XM4) can help you get up to speed on what Waku is and which use cases it suits. Remember to [subscribe](https://www.youtube.com/@waku-org) to the new YouTube channel to be alerted of new content published. \\n\\nSince the launch of Bitcoin, people have been calling for a blockchain that can protect the privacy of their transactions. Secret Network and Logos both joined Waku for [an X space](https://twitter.com/i/spaces/1dRKZEVewaNxB?s=20) discussing how to realise privacy-preserving messaging on blockchain using protocols such as Waku. \\n\\nThe dev team recorded this Waku message [travelling around the world](https://twitter.com/Waku_org/status/1755972110684705142). Five DigitalOcean machines were connected to simulate five hops between Singapore, Bangalore, San Francisco, New York, and Frankfurt.\\n\\n\\n## Research and Development\\n\\nThere is a new [research zone](https://docs.waku.org/research/) on the Waku documentation site. The zone includes insights, benchmarks, and challenges that the Waku team is exploring. Some of the studies available for you to dive deep into include topics such as network incentivisation, capped bandwidth in Waku, and network propagation times. \\n\\nThe Research and Development team are the minds working to push forward the development of Waku protocols. Here are some of the key highlights from the team last month. \\n\\n\\n\\n* The first version of the RFC on incentivising Waku (light) protocols has been released, with an extra section on the proof-of-concept implementation for Waku Store. [Check out the Github PR](https://github.com/vacp2p/rfc/pull/642) and [Waku Store v3 protocol](https://github.com/waku-org/research/issues/81).\\n* nwaku is the reference implementation of the Waku protocol. To enable developers to use the reference implementation in their native application, nwaku needs to expose c-bindings. [Check out the work we\u2019ve started on ](https://github.com/waku-org/nwaku/issues/1332)Python bindings. \\n* Waku latency simulations have been added to a real environment. [Check out the pull request ](https://github.com/waku-org/research/pull/85)and [read the docs](https://docs.waku.org/research/research-and-studies/message-propagation/) on message propagation times with Waku-RLN.\\n* Waku Relay is responsible for disseminating messages but cannot guarantee delivery. The push-based propagation (PubSub) of Relay can be augmented with a pull-based method, in our case, Sync. [Check out the Waku sync overview first draft](https://github.com/waku-org/research/issues/80).\\n\\n\\n---\\n\\n\\n## **Waku Community Call and AMA**\\n\\nWaku hosts a Community Call on X during the last week of each month. The objective of the call is to update the community on progress and provide a space where questions can be put directly to the team.\\n\\nThe February Community Call took place last week on the 28th of January. You can [listen back to the full Space](https://twitter.com/i/spaces/1lDxLPQrqgoxm/peek), and read the highlights below.\\n\\n[Guru](https://twitter.com/hackyguru), and [Danish](https://twitter.com/danisharora099) from the Waku team led the call.\\n\\n\\n### nwaku node campaign\\n\\nGuru announced several initiatives for Waku node runners. Anyone who is running an nwaku node is invited to post a photo on X, tagging @waku_org and using #ProofOfNode. Waku will share your post and give you a shoutout. He also announced that they were working on early-stage node operator and onboarding programs that will be formally announced in the coming weeks. Currently, the Waku team is collecting feedback from operators on their experience setting up a node; [drop a message on Discord](https://discord.com/invite/gMPAzmcDER) to leave any feedback you may have. \\n\\n\\n### Does js-waku currently support React Native?\\n\\nLibp2p, the modular network stack and protocol suite that Waku is built on top of, recently added support for React native. However, while it is technically enabled, the team has not been able to test it on Waku yet and as so Waku does not officially support it. Testing is on the roadmap for 2024. For now, we provide C bindings which should make it possible for mobile developers to use Waku. Find what you need in the [Guides](https://docs.waku.org/) section of the documentation site. \\n\\n\\n### What encryption methods are currently available in the Waku library? \\n\\nThe team strives to keep Waku as unopinionated as possible, so encryption and decryption of payloads are left for application layer developers to choose from. That said, AES, ECIES and Noise encryption are provided by the Waku protocols and libraries.\\n\\n\\n---\\n\\nThat is it for this month\u2019s EcoDev roundup!\\n\\nIf you have questions about what the team has been doing or want to join a like-minded community focused on bringing peer-to-peer communications to millions of users, join the Waku [Discord](https://discord.com/invite/gMPAzmcDER) or follow us on [X](https://twitter.com/Waku_org).\\n\\n[Subscribe](https://waku.org/subscribe/) to the monthly newsletter for these updates directly in your inbox."},{"id":"january-ecodev","metadata":{"permalink":"/january-ecodev","source":"@site/posts/2024-02-01-january-ecodev.mdx","title":"January EcoDev Roundup","description":"Updates from the EcoDev team in January 2024, plus highlights from the first Waku community call.","date":"2024-02-01T00:00:00.000Z","formattedDate":"February 1, 2024","tags":[],"readingTime":6.22,"hasTruncateMarker":true,"authors":[{"name":"Amelia Trapp","twitter":"@amelia_trapp","github":"Amelia7689","key":"amelia"}],"frontMatter":{"layout":"post","name":"January EcoDev Roundup","title":"January EcoDev Roundup","date":"2024-02-01T00:00:00.000Z","authors":["amelia"],"published":true,"slug":"january-ecodev","categories":"waku, progress","image":"/img/black-waku-logo-with-name.png","hide_table_of_contents":false},"prevItem":{"title":"February EcoDev Roundup","permalink":"/february-roundup"},"nextItem":{"title":"Building a Tic-Tac-Toe Game with Waku","permalink":"/tictactoe-tutorial"}},"content":"Updates from the EcoDev team in January 2024, plus highlights from the first Waku community call. \\n\\n\x3c!--truncate--\x3e\\n\\nThe EcoDev team at Waku covers community, growth, partnerships, and communications. Each month, we will share the key highlights and progress of the team. You can [subscribe](https://waku.org/subscribe/) to the monthly newsletter if you prefer to receive an abridged version of these updates in your inbox. \\n\\n\\n## Events and Hackathons\\n\\nIn 2023, Waku participated in three hackathons and eight events across four continents. We are gearing up for another year full of events; expect to see us all around the globe once again. Waku will be attending two key in-person events in Q1 2024. We will focus on growing the developer community and meeting with projects to support further integrations with Waku.\\n\\n**ETHDenver 23rd February - 3rd March**\\n\\nMeet the Waku team attending ETHDenver: Aaron Bendesrky, Waku Program Manager at Logos, Pedro Lains, Business Development Lead, and Guru T, Developer Relationships Engineer. ETHDenver is a great opportunity to meet the Waku team face to face; attendees can book an appointment with the team [here](https://waku.org/events/eth-denver/).\\n\\n**ETHLatam 13th - 14th March**\\n\\nWaku has $3,500 in bounties on offer during the hackathon. The team on the ground will support the hackers across the two days in building their projects for submission, and we expect to see many more new use cases for Waku.\\n\\nAnybody hosting a side event at ETHDenver or ETHLatam and would like to collaborate with Waku, drop us message on [Discord](https://discord.com/invite/gMPAzmcDER). \\n\\n\\n## Press and Media\\n\\n**Vitalik Buterin Recognises Waku: **This month, Waku received an excellent shout-out from Vitalik Buterin, who recognised Waku as the successor of Whisper, the original peer-to-peer communications protocol for Ethereum. In a [blog post](https://vitalik.eth.limo/general/2023/12/28/cypherpunk.html#ethereum-as-part-of-a-broader-technological-vision), Buterin supported Waku as the realisation of the cypherpunk messaging protocol imagined by Gavin Wood.\\n\\nThe story was also covered in [CoinTelegraph](https://cointelegraph.com/press-releases/vitalik-buterin-recognises-waku-as-the-peer-to-peer-communications-layer-of-gavin-woods-web3-vision), [CryptoDaily](https://cryptodaily.co.uk/2024/01/meet-waku-the-peer-to-peer-communications-protocol-recognized-by-vitalik-buterin), and [The Defiant](https://thedefiant.io/waku-the-p2p-communication-protocol-for-web3-recognized-by-vitalik-buterin). \\n\\n**Waku was voted as a top privacy project of 2023**: Web3 Privacy Now included Waku on their long list of [top privacy-focused projects](https://mirror.xyz/0x0f1F3DAf416B74DB3DE55Eb4D7513a80F4841073/LdOt0mlG_nXqhnmLf7s-X13NDNdpwQw72ESKaJq-0zA) of the year. The finalists were voted on by over 100 privacy enthusiasts, developers, researchers, cryptographers, cypherpunks, and community builders from DarkFi, Nym, Swarm, Logos, Railgun, and many other organisations.\\n\\n\\n## Developer Resources\\n\\n**The Waku React package:** The package provides the components and UI adapters needed to integrate Waku SDK into React applications effortlessly. We developed the package in response to feedback from hackathon participants last year. The documentation, including detailed steps on using the package, [can be found here](https://docs.waku.org/guides/js-waku/use-waku-react/). \\n\\nThere is also a [beginner-friendly tutorial](https://blog.waku.org/tictactoe-tutorial/) for building a simple tic-tac-toe game that can be played by two players who are connected using Waku.\\n\\n**Open Bounties:** We have reviewed and revised the Waku bounties, ensuring that these tasks are beginner-friendly. Our goal is to make it easier for newcomers to Waku to contribute and, in turn, support the growth of the ecosystem. Anyone can work on the bounties at their own pace, as there is no hard cut-off date. When a bounty proposal is approved, it will be marked as \u2018Assigned\u2019. Find the open bountie [here](https://github.com/waku-org/bounties/issues).\\n\\n**Bounty Shipped:** We are excited to announce a recent 1,000 DAI bounty shipped, awarded to Joel Adewole for a [poll app built with Waku and Vue3](https://dev.to/wolzcodelife/build-a-dapp-using-waku-decentralized-communication-and-vuejs-1nnf). The app is a spin-off of the popular platform Kahoot, with short-lived sessions and storage of the poll. Joel\'s documentation is [available on GitHub](https://github.com/wolz-CODElife/waku-vue-poll?tab=readme-ov-file).\\n\\n## Team Updates\\n\\nThe team has expanded this month, with the new EcoDev Team Lead, Marina and a new Business Development Lead, Pedro, joining the team.\\n\\nYou can connect with [Marina](https://twitter.com/Crypto_marina) and [Pedro](https://twitter.com/bigbraincap) on X.\\n\\nIf you are interested in working with Waku, [we are currently hiring a Software Engineer](https://boards.greenhouse.io/waku/jobs/5607301) to work with the Waku Chat SDK. The position is fully remote, and we hire globally. \\n\\n\\n---\\n\\n\\n## Waku Community Call and AMA\\n\\nWaku will host a Community Call on X on the last Friday of each month. The objective of the call is to update the community on our progress and provide a space where questions can be put to the team \\n\\nThe first Community Call took place last week on the 26th of January. You can [listen back to the full Space](https://twitter.com/Waku_org/status/1750927368644919722), and read the highlights below. \\n\\n[Vaclav](https://twitter.com/vpavlin), [Guru](https://twitter.com/hackyguru), and [Aaron](https://twitter.com/vrycmfy) from the Waku team participated in the call. \\n\\n\\n### Waku network updates \\n\\n**Vaclav**: We are very proud to have released the Waku Network Gen 0 in December last year. If you don\'t know what the Waku Network is, it is our attempt to formalise a network of peer-to-peer nodes that would form some network running Waku protocols.  It offers first-of-its-kind privacy-preserving DoS protections for peer-to-peer messaging.\\n\\nIt\'s just the beginning of the Waku Network. We are drafting the [2024 roadmap](https://github.com/waku-org/pm/blob/master/ROADMAP.md ) with the research team, although it\'s still subject to change. There\u2019s also an interesting discussion you can join in the [Vac Forum](https://forum.vac.dev/t/message-validation-marketplace-waku-network-of-networks/262/2).\\n\\nAs part of Generation 0 of Waku Network, we have integrated sharding, ensuring that it\u2019s scalable to thousands of users and that the bandwidth is reasonable for people running on Raspberry Pis or smaller devices with weaker connectivity. Our client targeted at low-resource devices, JSWaku, has been making progress towards fully supporting sharding and, by that, supporting the full Waku Network.\\n\\n\\n### Future incentivisation for running Waku nodes?\\n\\n**Vaclav: **We are often asked about how we incentivise node runners, as well as who is running the nodes and why. There are currently no monetary or token incentives. However, the research team recently [defined the problem](https://github.com/waku-org/research/blob/master/docs/incentivization.md) and is building the first PoC. That\'s very interesting and promising for the future of Waku node operators to get something in return.\\n\\n\\n### Growth of the Waku dev ecosystem\\n\\n**Guru: **We had our first Waku hackathon at ETHRome last year, where 120 hackers participated. We received eight project submissions from EthRome, which was a high number for us as a first-time sponsor. At ETHIstanbul our submissions increased to 20. We closed the year with ETHIndia where we had a huge total of 51 project submissions.\\n\\nThe graph has been trending consistently upwards as more hackers and developers discover Waku. We are exploring ways to offer support to these projects in terms of development, as well as raising funding and grants.\\n\\n\\n### Project integrations with Waku\\n\\n**Guru: **Waku has been integrated into several existing projects already. [Status](https://status.app/), of course, is the original use case for Waku. We\'re in the final stages of collaborating with Status to integrate Waku\'s latest developments.\\n\\n[Railgun](https://www.railgun.org/) has been friends of Waku for a long period of time, and they integrated Waku around a year and a half ago. We also completed an integration with [The Graph](https://thegraph.com/), which uses Waku in its Graphcast SDK to decentralise its indexes.\\n\\n[Silence Laboratories](https://www.silencelaboratories.com/) has also been building a multiparty computation (MPC) on top of Waku.\\n\\n\\n\\n### The meaning behind the name Waku\\n\\n**Vaclav: **The word Waku is Japanese meaning to well up, to gush forth, and to spring out. \\n\\nWaku also has a meaning in Chewa language, a language spoken in Malawi. If we want to use the Chewa language meaning, it\u2019s close to _keep your data local and your communication borderless_, which fits perfectly.\\n\\n\\n---\\n\\nThat is it for this month\u2019s Eco Dev roundup!\\n\\nIf you have questions about what the team has been doing or want to join a like-minded community focused on bringing peer-to-peer communications to millions of users, join the Waku [Discord](https://discord.com/invite/gMPAzmcDER) or follow us on [X](https://twitter.com/Waku_org).\\n\\n[Subscribe](https://waku.org/subscribe/) to the monthly newsletter for these updates directly in your inbox."},{"id":"tictactoe-tutorial","metadata":{"permalink":"/tictactoe-tutorial","source":"@site/posts/2024-01-22-tictactoe-tutorial.mdx","title":"Building a Tic-Tac-Toe Game with Waku","description":"In this beginner-friendly tutorial, we will be building a basic TicTacToe game that can be played by two players who are connected using Waku.","date":"2024-01-22T00:00:00.000Z","formattedDate":"January 22, 2024","tags":[],"readingTime":14.85,"hasTruncateMarker":true,"authors":[{"name":"Guru","twitter":"@hackyguru","github":"hackyguru","key":"guru"}],"frontMatter":{"layout":"post","name":"Building a Tic-Tac-Toe Game with Waku","title":"Building a Tic-Tac-Toe Game with Waku","date":"2024-01-22T00:00:00.000Z","authors":["guru"],"published":true,"slug":"tictactoe-tutorial","categories":"waku, tutorials","image":"/img/tictactoe-tutorial.png","hide_table_of_contents":false},"prevItem":{"title":"January EcoDev Roundup","permalink":"/january-ecodev"},"nextItem":{"title":"Key Learnings from Waku Hackers in 2023","permalink":"/learnings-from-hackers"}},"content":"In this beginner-friendly tutorial, we will be building a basic TicTacToe game that can be played by two players who are connected using Waku.\\n\\n\x3c!--truncate--\x3e\\n\\n![header](/img/tictactoe-tutorial.png)\\n\\n## What is Waku\\n\\nWaku is a family of robust, censorship-resistant, and privacy-preserving communication protocols designed to enable perfomant messaging for web3 apps. When I say \u2018messaging\u2019, this does not restrict Waku\u2019s use cases just to building \u2018text\u2019 messaging apps; Waku can also support other use cases like games, marketplaces, governance tooling, and much more.\\n\\nIf you wish to know more about what Waku offers - check out the [website](https://waku.org) or [developer documentation](https://docs.waku.org).\\n\\n## Why Waku for building a Tic-Tac-Toe game?\\n\\nA Tic-Tac-Toe game is one of the most straightforward project ideas that can be implemented with Waku. This is because it involves just two players and has minimal web3 jargon. Implementing the game is very clear for anyone with prior experience in building with React-based frameworks and some enthusiasm to learn Waku.\\n\\n## Getting started with building\\n\\n### Prerequisites\\n\\n- Some intermediate-level knowledge of React based frameworks (in this tutorial, we use NextJS)\\n- Understanding of Waku\'s architecture\\n- Some coffee to sip along\\n\\n### Wireframing\\n\\nBefore we start, let us visualise the project\'s wireframe for a better understanding: \\n\\n![wireframe](/img/wireframe-ttt.png)\\n\\nThe first screen on the left will be our landing screen with two buttons for starting a new game or joining an existing one. Each of the games in our TicTacToe game will have a `room-id` which two players will be connected to.\\n\\nWaku follows a \'content topic based architecture\', meaning that the messages are routed and stored based on different content topics across the network. In our case, the content topic would be the `room-id` since it maps perfectly. Two players in a game will be connected by publishing on and subscribing to the same content-topic/`room-id`.\\n\\nDo not worry if you need clarification about this - you can figure it out in the next steps as you build the project.\\n\\n### Step 1 : Create a NextJS project\\n\\nKickstarting a new NextJS project is super easy by using the command below:\\n\\n```\\nnpx create-next-app@latest TicTacToe --eslint\\n```\\n\\nMake sure to select `Y` in the command line when you are prompted if you require TailwindCSS. Alternatively, please follow the instructions for installing TailwindCSS in this [link](https://tailwindcss.com/docs/guides/nextjs).\\n\\nOnce you are done, you should be able to run the NextJS app by using the command `npm run dev`\\n\\n### Step 2 : Organising the file structure\\n\\nThe file structure for this project is very easy to setup. Create a folder called `/components` in the root directory of the project. Inside the components folder, create four files: \\n\\n1. `Header.js` : Contains the header component\\n2. `Hero.js` : Screen which appears on the menu asking if you wish to create a new game or join an existing game\\n3. `Loading.js` : Loader component\\n4. `Room.js` : This file will hold all the Waku and game logic\\n\\nApart from the above files, you must create a new folder inside the `/pages` folder with the name `/pages/game`. Inside the game folder, create file called `[id].js` which will be used to navigate a user to a particular game room.\\n\\n\\n### Step 3 : Install the `@waku/react` SDK\\n\\nNow, it is time to install the required libraries for using Waku by using the following command:\\n\\n```\\nnpm install @waku/react @waku/sdk protobufjs\\n```\\n\\nApart from these, we will also need a few more libraries that can be helpful during the next steps : \\n\\n```\\nnpm install short-unique-id copy-to-clipboard\\n```\\n\\n`short-unique-id` will be useful in generating a random unique id for the game room. `copy-to-clipboard` will help us implement a button that can copy the room ID to a user\'s clipboard.\\n\\n### Step 4 : Importing the SDK and initialising the providers\\n\\nInside the `/pages` folder, you can find `_app.js` file, which is the starting point of a NextJS app. We will be initialising our provider here so that the Waku provider will wrap up the entire application.\\n\\nSo, import the following on top of your file :\\n\\n```js\\nimport { LightNodeProvider } from \\"@waku/react\\";\\nimport { Protocols } from \\"@waku/sdk\\";\\n```\\n\\nNow, wrap the components with the `<LightNodeProvider>` as follows : \\n\\n```js\\n    <LightNodeProvider\\n      options={{ defaultBootstrap: true }}\\n      protocols={[Protocols.Store, Protocols.Filter, Protocols.LightPush]}\\n    >\\n      <Component {...pageProps} />\\n    </LightNodeProvider>\\n```\\n\\nThis provider allows the usage of **Store, Filter and LightPush protocols** which will be helpful in implementing all the required functionalities of our game.\\n\\n### Step 5 : Modify the index.js file\\n\\nThe `index.js` file inside the `/pages` folder renders the index route of the application. Let\'s make it display our components Header and Hero respectively,\\n\\n```js \\nimport Head from \'next/head\'\\nimport Hero from \'@/components/Hero\'\\nimport Header from \'@/components/Header\'\\n\\n\\nexport default function Home() {\\n  \\n  return (\\n    <>\\n      <Head>\\n        <title>Tic Tac Toe</title>\\n        <meta name=\\"description\\" content=\\"Tic Tac Toe game created with Waku\\" />\\n        <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1\\" />\\n        <link rel=\\"icon\\" href=\\"/favicon.ico\\" />\\n      </Head>\\n      <main className=\'bg-black h-screen\'>\\n        <Header />\\n        <Hero />\\n      </main>\\n    </>\\n  )\\n}\\n\\n```\\n\\n### Step 6 : Header component and Hero component\\n\\nThe header component will carry a logo on the left and a button with the link to our Github on the right end:\\n\\n**Header.js**\\n\\n```js\\nimport Link from \'next/link\'\\nimport React from \'react\'\\n\\nexport default function Header() {\\n    return (\\n        <div className=\'flex p-5 justify-between items-center\'>\\n            <Link href=\\"/\\">\\n                <div id=\'logo\'>\\n                    Your-Logo\\n                </div>\\n            </Link>\\n            <a href=\'https://github.com/hackyguru/tictactoe\' className=\'text-white flex space-x-3 items-center cursor-pointer\'>\\n                <p>GitHub</p>\\n            </a>\\n        </div>\\n    )\\n}\\n```\\n\\nRemember to replace \'Your-Logo\' with your application\'s logo.\\n\\n**Hero.js**\\n\\nThe Hero component will allow users to create or join a new game. When a user creates a new game, a unique room ID is generated using the`short-unique-id` package. In case users want to join an existing game, they can enter the room ID to join in.\\n\\n```js\\nimport React, { useState, useEffect } from \'react\';\\nimport Loading from \'./Loading\';\\nimport ShortUniqueId from \'short-unique-id\';\\nimport Router from \'next/router\';\\n\\nexport default function Hero() {\\n  const options = { length: 8 };\\n  const uid = new ShortUniqueId(options);\\n\\n  const [room, setRoom] = useState(null);\\n  const [game, setGame] = useState(null);\\n  const [joinLink, setJoinLink] = useState(\'\');\\n\\n  useEffect(() => {\\n    if (room === null) {\\n      setRoom(uid.rnd());\\n    }\\n  }, []);\\n\\n  if (room === null) {\\n    return <Loading />;\\n  }\\n\\n  const handleNewGameClick = () => {\\n    sessionStorage.setItem(\'roomId\', room);\\n    sessionStorage.setItem(\'player\', \'x\');\\n    Router.push(`/game/${room}`);\\n  };\\n\\n  const handleJoinGameClick = () => {\\n    setGame(\'join\');\\n  };\\n\\n  const handleJoinLinkChange = (e) => {\\n    setJoinLink(e.target.value);\\n  };\\n\\n  const handleJoinButtonClick = () => {\\n    Router.push(`/game/${joinLink}`);\\n  };\\n\\n  const handleGoBackClick = () => {\\n    setGame(null);\\n  };\\n\\n  return (\\n    <section id=\'hero\'>\\n      <div className=\\"mx-auto max-w-screen-xl px-4 lg:flex lg:mt-40 lg:items-center mt-40\\">\\n        <div className=\\"mx-auto max-w-xl text-center\\">\\n          <h1 className=\\"text-3xl sm:text-8xl text-white\\">TicTacToe</h1>\\n          <div className=\'mt-8 sm:text-xl/relaxed text-white opacity-60 flex items-center justify-center\'>\\n            <p>Built with</p>\\n            <img src=\'https://waku.org/theme/image/logo.svg\' />\\n            <a href=\'https://waku.org\' className=\'underline\'>\\n              Waku\\n            </a>\\n          </div>\\n\\n          {game === null && (\\n            <div className=\\"mt-20 flex flex-wrap justify-center gap-4\\">\\n              <button\\n                className=\\"block w-full bg-white px-12 py-3 text-sm font-medium hover:text-white hover:bg-black hover:border-2  hover:border-white focus:outline-none focus:ring  text-black\\"\\n                onClick={handleNewGameClick}\\n              >\\n                New game\\n              </button>\\n              <button\\n                onClick={handleJoinGameClick}\\n                className=\\"block w-full bg-white px-12 py-3 text-sm font-medium hover:text-white hover:bg-black hover:border-2  hover:border-white focus:outline-none focus:ring  text-black\\"\\n              >\\n                Join game\\n              </button>\\n            </div>\\n          )}\\n\\n          {game === \'join\' && (\\n            <div className=\\"mt-20 space-y-4\\">\\n              <input\\n                value={joinLink}\\n                onChange={handleJoinLinkChange}\\n                className=\\"px-3 py-3 border-2 border-white w-full\\"\\n                placeholder=\'Enter the game link\'\\n              />\\n              <div className=\'flex space-x-5 items-center\'>\\n                <button\\n                  onClick={handleJoinButtonClick}\\n                  className=\\"block w-full bg-white px-12 py-3 text-sm font-medium hover:text-white hover:bg-black hover:border-2  hover:border-white focus:outline-none focus:ring  text-black\\"\\n                >\\n                  Join game\\n                </button>\\n                <button\\n                  onClick={handleGoBackClick}\\n                  className=\\"block w-full bg-white px-12 py-3 text-sm font-medium hover:text-white hover:bg-black hover:border-2  hover:border-white focus:outline-none focus:ring text-black\\"\\n                >\\n                  Go back\\n                </button>\\n              </div>\\n            </div>\\n          )}\\n        </div>\\n      </div>\\n    </section>\\n  );\\n}\\n```\\n\\nThe above code leverages common React hooks like `useState() and useEffect()` to keep the app state and react to state changes. Summarising the above code, the state variable `game` will decide if the user wants to join an existing game or create a new game. `ShortUniqueId()` function will be used for generating a room ID if the user wants to create a new game.\\n\\nFor the app\'s simplicity, the user creating the game will always be \'player X\', and the user joining the game will be \'player O\'. The session storage will hold the player as X or O and can be retrieved from the `player` item.\\n\\n### Step 7 : Sending and retrieving messages in `Room.js`\\n\\nThe `Room.js` file will have all the code related to sending and subscribing to the messages in the content topic. This file will also include other miscellaneous stuff like the winning conditions, the player to make a move, finding if an opponent has joined the game and finally, finding the winner.\\n\\nFirstly, let us make all the required imports :\\n\\n```js\\nimport React, { useState, useEffect } from \'react\';\\nimport Link from \'next/link\';\\nimport copy from \'copy-to-clipboard\';\\nimport protobuf from \'protobufjs\';\\nimport {\\n  useWaku,\\n  useContentPair,\\n  useLightPush,\\n  useStoreMessages,\\n  useFilterMessages,\\n} from \'@waku/react\';\\nimport { message } from \'@waku/core\';\\nimport Loading from \'./Loading\';\\n```\\n\\nAfter this , we use a `Protobuff` object to define the structure of the messages like below :\\n\\n```js\\nconst ChatMessage = new protobuf.Type(\'ChatMessage\')\\n  .add(new protobuf.Field(\'timestamp\', 1, \'uint64\'))\\n  .add(new protobuf.Field(\'sender\', 2, \'string\'))\\n  .add(new protobuf.Field(\'message\', 3, \'string\'));\\n```\\n\\nNext, let us set up encoder and decoder:\\n\\n```js\\n  const { decoder, encoder } = useContentPair();\\n```\\n\\nInitializing LightPush, Filter and Store can be done in a very few lines of code :\\n\\n```js\\n  const { messages: storeMessages } = useStoreMessages({\\n    node,\\n    decoder,\\n  });\\n\\n  const { messages: filterMessages } = useFilterMessages({ node, decoder });\\n\\n  const { push } = useLightPush({ node, encoder });\\n```\\n\\n\\nWith all these set up, sending a message into a content topic is completed. Here\'s how your `sendMessage()` function should look like :\\n\\n```js\\n  async function sendMessage(sender, message) {\\n    const protoMessage = ChatMessage.create({\\n      timestamp: Date.now(),\\n      sender,\\n      message,\\n    });\\n\\n    const serialisedMessage = ChatMessage.encode(protoMessage).finish();\\n\\n    const timestamp = new Date();\\n    await push({\\n      payload: serialisedMessage,\\n      timestamp,\\n    });\\n\\n    console.log(\'MESSAGE PUSHED\');\\n  }\\n```\\n\\nTo setup the `decodeMessage()` function, you will have to pass the `wakuMessage` option into the function and use the `ChatMessage.decode()` function with the required parameters. Here\'s the code :\\n\\n```js\\n  function decodeMessage(wakuMessage) {\\n    if (!wakuMessage.payload) return;\\n\\n    const { timestamp, sender, message } = ChatMessage.decode(wakuMessage.payload);\\n\\n    if (!timestamp || !sender || !message) return;\\n\\n    const time = new Date();\\n    time.setTime(Number(timestamp));\\n\\n    return {\\n      message,\\n      timestamp: time,\\n      sender,\\n      timestampInt: wakuMessage.timestamp,\\n    };\\n  }\\n```\\n\\n### Step 8 : Winning conditions and finding the winner with `UseEffect()`\\n\\nWe will use the `useEffect()` hook to retrieve and map the messages from the contentTopic. After this, we also use the winning combinations to find the winner between the two players :\\n\\n```js\\n// Finding if the players have joined the room\\n  useEffect(() => {\\n    if (node !== undefined) {\\n      if (player === false) {\\n        const p =\\n          sessionStorage.getItem(\'roomId\') == props.room && sessionStorage.getItem(\'player\') == \'x\'\\n            ? \'x\'\\n            : \'o\';\\n\\n        setPlayer(p);\\n        if (p === \'o\') {\\n          sendMessage(\'o\', \'joined\');\\n        }\\n      }\\n      setNodeStart(true);\\n    }\\n  }, [node]);\\n\\n// Defining the winning condition and \\n  useEffect(() => {\\n    let messages = storeMessages.concat(filterMessages);\\n\\n    let b = {};\\n    let o = false;\\n\\n    messages = messages.map((message) => decodeMessage(message));\\n\\n    messages.forEach((message) => {\\n      if (message.message === \'joined\') {\\n        o = true;\\n        return;\\n      }\\n      if (message.message === \'winner\') {\\n        return;\\n      }\\n\\n      b = { ...b, [message.message]: message.sender };\\n    });\\n\\n    const winningCombinations = [\\n      [\'1\', \'2\', \'3\'],\\n      [\'4\', \'5\', \'6\'],\\n      [\'7\', \'8\', \'9\'],\\n      [\'1\', \'4\', \'7\'],\\n      [\'2\', \'5\', \'8\'],\\n      [\'3\', \'6\', \'9\'],\\n      [\'1\', \'5\', \'9\'],\\n      [\'3\', \'5\', \'7\'],\\n    ];\\n\\n    let winner = null;\\n    let temp = null;\\n    let winningPattern = null;\\n\\n    winningCombinations.forEach((combination) => {\\n      if (winner !== null) {\\n        return;\\n      }\\n      for (let [i, c] of combination.entries()) {\\n        if (b[c] === undefined) {\\n          temp = null;\\n          break;\\n        } else {\\n          if (temp === null) {\\n            temp = b[c];\\n            continue;\\n          } else {\\n            if (temp === b[c]) {\\n              if (i === 2) {\\n                winner = temp;\\n                winningPattern = combination;\\n              }\\n              continue;\\n            }\\n          }\\n        }\\n      }\\n    });\\n\\n    setWinner(winner);\\n    setWinningPattern(winningPattern);\\n    setOpponentJoined(o);\\n    setBoxes(b);\\n  }, [storeMessages, filterMessages]);\\n```\\n\\nThe game will automatically end if a winning condition is met by one of the users.\\n\\n### Step 9 : Loading component and rendering the boxes\\n\\nThe loading component will be visible if the node is not started or if an opponent player has not joined the room yet.\\n\\n```js\\n  if (!nodeStart || !player || opponentJoined === null) {\\n    return <Loading />;\\n  }\\n```\\n\\nHere\'s the code for `Loading.js` component :\\n\\n```js\\nimport React from \'react\'\\n\\nexport default function Loading() {\\n    return (\\n        <div className=\'h-screen bg-black flex items-center w-full justify-center\'>\\n            <svg width=\\"60\\" height=\\"60\\" viewBox=\\"0 0 24 24\\" xmlns=\\"http://www.w3.org/2000/svg\\">\\n                <g fill=\\"none\\" stroke=\\"#ffffff\\" stroke-linecap=\\"round\\" stroke-width=\\"2\\">\\n                    <path stroke-dasharray=\\"60\\" stroke-dashoffset=\\"60\\" stroke-opacity=\\".3\\" d=\\"M12 3C16.9706 3 21 7.02944 21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3Z\\">\\n                        <animate fill=\\"freeze\\" attributeName=\\"stroke-dashoffset\\" dur=\\"1.3s\\" values=\\"60;0\\" />\\n                    </path>\\n                    <path stroke-dasharray=\\"15\\" stroke-dashoffset=\\"15\\" d=\\"M12 3C16.9706 3 21 7.02944 21 12\\">\\n                        <animate fill=\\"freeze\\" attributeName=\\"stroke-dashoffset\\" dur=\\"0.3s\\" values=\\"15;0\\" />\\n                        <animateTransform attributeName=\\"transform\\" dur=\\"1.5s\\" repeatCount=\\"indefinite\\" type=\\"rotate\\" values=\\"0 12 12;360 12 12\\" />\\n                    </path>\\n                </g>\\n            </svg>\\n            \\n        </div>\\n    )\\n}\\n\\n```\\n\\nAfter you are done setting up the loading component, it\'s time to write a function that will handle rendering the boxes. This function will be used as an `onClick` handler that will send either `x` or `o` based on the player who clicks the box. It will also render the boxes with `x` or `o` based on the player who has clicked the box previously. Here\'s the function :\\n\\n```js\\n  function renderBoxes() {\\n    let boxElements = [];\\n    for (let i = 1; i < 10; i += 1) {\\n      if (boxes[i] === undefined) {\\n        boxElements.push(\\n          <div\\n            onClick={() => handlePlay(i.toString())}\\n            className=\'w-20 h-20 border-2 border-white flex items-center justify-center text-2xl text-white\'\\n          ></div>\\n        );\\n      } else {\\n        if (boxes[i] === \'x\') {\\n          boxElements.push(\\n            <div className=\'w-20 h-20 border-2 border-white flex items-center justify-center text-2xl text-white\'>\\n              X\\n            </div>\\n          );\\n        } else {\\n          boxElements.push(\\n            <div className=\'w-20 h-20 border-2 border-white flex items-center justify-center text-2xl text-white\'>\\n              O\\n            </div>\\n          );\\n        }\\n      }\\n    }\\n    return <div id=\'tiles\' className=\'grid grid-cols-3 grid-rows-3 gap-3 mt-10\'>{boxElements}</div>;\\n  }\\n```\\n\\nThe above `renderBoxes()` function will render only the box grid. We also need some prompts to mention which user should be playing their move (X or Y) and also announce the winner. For this, here\'s a simple UI that you can return in the Room function :\\n\\n```js\\n    <section id=\'room\'>\\n      <div className=\'flex justify-end mr-5 text-white space-x-5 items-center\'>\\n        <p>Waku status : active</p>\\n\\n        <svg width=\'20\' height=\'20\' viewBox=\'0 0 48 48\' xmlns=\'http://www.w3.org/2000/svg\'>\\n          <g fill=\'none\' stroke=\'currentColor\' strokeWidth=\'4\'>\\n            <path d=\'M13.5 39.37A16.927 16.927 0 0 0 24 43c3.963 0 7.61-1.356 10.5-3.63M19 9.747C12.051 11.882 7 18.351 7 26c0 1.925.32 3.775.91 5.5M29 9.747C35.949 11.882 41 18.351 41 26c0 1.925-.32 3.775-.91 5.5\' />\\n            <path strokeLinecap=\'round\' strokeLinejoin=\'round\' d=\'M43 36c0 1.342-.528 2.56-1.388 3.458A5 5 0 1 1 43 36Zm-28 0c0 1.342-.528 2.56-1.388 3.458A5 5 0 1 1 15 36ZM29 9c0 1.342-.528 2.56-1.388 3.458A5 5 0 1 1 29 9Z\' />\\n          </g>\\n        </svg>\\n        <p>Peers : {node?.libp2p?.getPeers()?.length ?? \'-\'}</p>\\n      </div>\\n\\n      <div className=\'mx-auto max-w-screen-xl px-4 mt-20 lg:flex lg:h-mt-40 lg:items-center\'>\\n        <div className=\'mx-auto max-w-xl\'>\\n          <div className=\'flex space-x-2 text-white opacity-60 mb-5 items-center\'>\\n            <Link href=\'/\'>\\n              <svg width=\'20\' height=\'20\' viewBox=\'0 0 1024 1024\' xmlns=\'http://www.w3.org/2000/svg\'>\\n                <path fill=\'currentColor\' d=\'M224 480h640a32 32 0 1 1 0 64H224a32 32 0 0 1 0-64z\' />\\n                <path\\n                  fill=\'currentColor\'\\n                  d=\'m237.248 512l265.408 265.344a32 32 0 0 1-45.312 45.312l-288-288a32 32 0 0 1 0-45.312l288-288a32 32 0 1 1 45.312 45.312L237.248 512z\'\\n                />\\n              </svg>\\n            </Link>\\n            <p>Game URL</p>\\n          </div>\\n          <div className=\'px-3 py-3 text-center flex border-2 border-white text-white underline items-center justify-between\'>\\n            <p>https://waku-xo.vercel.app/game/{props.room}</p>\\n            <button onClick={() => copy(`https://waku-xo.vercel.app/game/${props.room}`)}>\\n              <svg width=\'20\' height=\'20\' viewBox=\'0 0 256 256\' xmlns=\'http://www.w3.org/2000/svg\'>\\n                <path\\n                  fill=\'currentColor\'\\n                  d=\'M216 32H88a8 8 0 0 0-8 8v40H40a8 8 0 0 0-8 8v128a8 8 0 0 0 8 8h128a8 8 0 0 0 8-8v-40h40a8 8 0 0 0 8-8V40a8 8 0 0 0-8-8Zm-56 176H48V96h112Zm48-48h-32V88a8 8 0 0 0-8-8H96V48h112Z\'\\n                />\\n              </svg>\\n            </button>\\n          </div>\\n\\n          <h1 className=\'text-3xl sm:text-4xl text-white mt-20\'>\\n            {!opponentJoined && \'Waiting for opponent to join\'}\\n            {winner == null &&\\n              opponentJoined &&\\n              (Object.keys(boxes).length % 2 === 0\\n                ? player === \'x\'\\n                  ? \'Your turn\'\\n                  : \\"Opponent\'s turn\\"\\n                : player === \'o\'\\n                ? \'Your turn\'\\n                : \\"Opponent\'s turn\\")}\\n            {winner != null && (winner === \'x\' ? \'X is winner\' : \'O is winner\')}\\n          </h1>\\n{\\n!winner &&\\n          <div className=\'flex justify-center\'>{renderBoxes()}</div>\\n}\\n        </div>\\n      </div>\\n    </section>\\n```\\n\\n### Step 10 : Rendering the room\\n\\n`Room.js` is quite a big chunk of code, right? But don\'t worry - it is easy to follow up and the final code can be found [here](https://github.com/hackyguru/tictactoe/blob/main/components/Room.js).\\n\\nThere is one final step before our TicTacToe is complete. It is to create the `game/[id].js` page component. This component will render the room based on the `room id` provided on the URL. We use the     `useRouter()` hook to query the room id from the URL and then render the Room component :\\n\\n```js\\n\\nimport Header from \'@/components/Header\'\\nimport Room from \'@/components/Room\'\\nimport React, { useState, useEffect } from \'react\'\\nimport Loading from \'@/components/Loading\';\\nimport { useRouter } from \'next/router\'\\n\\n\\n// Waku imports\\nimport { ContentPairProvider, useWaku } from \\"@waku/react\\";\\n\\n// Misc imports\\nimport ShortUniqueId from \'short-unique-id\';\\n\\nexport default function Game() {\\n\\n    const router = useRouter();\\n    const room = router.query.id;\\n\\n    return (\\n        <>\\n            <ContentPairProvider\\n                contentTopic={\\"/tictactoe/\\" + room}\\n            >\\n                <div className=\'bg-black h-screen\'>\\n                    <Header />\\n                    <Room room={room} />\\n                </div>\\n            </ContentPairProvider>\\n        </>\\n    )\\n}\\n```\\n\\n### What\'s next?\\n\\nI hope that your TicTacToe application with Waku will be up and running now. If you are still stuck at part of the above 10 steps, please refer to our [example repository](https://github.com/hackyguru/tictactoe) now. You can also try out the TicTacToe game in [this link](https://waku-xo.vercel.app).\\n\\nPlease note that this is a very basic demonstration of using Waku\'s react hooks to build a TicTacToe game. The game still needs a lot of improvements in terms of handling the connection, establishing the winning , etc.\\n\\nHere are some ideas for you to include in the future: \\n\\n- adding P2E (Play to Earn) mechanisms where users can connect their wallet, stake some crypto and then the winner gets the stake.\\n\\n- adding names for players\\n\\n- minting an NFT for the winner once a game is over\\n\\nWith Waku, the possibilities are limitless. Go ahead and start building! If you have any questions, feel free to drop us a messafe in our support channel on the [Waku discord community](https://discord.waku.org)."},{"id":"learnings-from-hackers","metadata":{"permalink":"/learnings-from-hackers","source":"@site/posts/key-learnings-from-waku-hackers-in-2023.mdx","title":"Key Learnings from Waku Hackers in 2023","description":"A review of the key learnings from Waku hackathon participants this year and what we are doing to improve developers\' experience.","date":"2023-12-20T00:00:00.000Z","formattedDate":"December 20, 2023","tags":[],"readingTime":6.995,"hasTruncateMarker":true,"authors":[{"name":"Amelia Trapp","twitter":"@amelia_trapp","github":"Amelia7689","key":"amelia"}],"frontMatter":{"layout":"post","name":"Key Learnings from Waku Hackers in 2023","title":"Key Learnings from Waku Hackers in 2023","date":"2023-12-20T00:00:00.000Z","authors":"amelia","published":null,"slug":"learnings-from-hackers","image":"/img/black-waku-logo-with-name.png"},"prevItem":{"title":"Building a Tic-Tac-Toe Game with Waku","permalink":"/tictactoe-tutorial"},"nextItem":{"title":"The Waku Roadmap","permalink":"/waku-roadmap"}},"content":"A review of the key learnings from Waku hackathon participants this year and what we are doing to improve developers\' experience. \\n\\n\x3c!--truncate--\x3e\\n\\n---\\n\\n2023 has been an incredible year for Waku. We attended eight events across four continents, participated in three ETHGlobal hackathons, and hosted the first Waku Hacker House. It has been amazing to see the growth of the developer community on Waku, and we want to make sure that next year it will be even easier to onboard new hackers and developers.\\n\\nWe recently held an X Space where we invited the winning projects from the ETHRome hackathon to tell us what they like about Waku, what worked well while using Waku, and where they saw areas for improvement. Below, you will find some of the key insights from the hackers and learn how their feedback is informing improvements around Waku documentation and the greater developer experience. \\n\\n[V\xe1clav](https://twitter.com/vpavlin), [Aaron](https://twitter.com/vrycmfy), and [Guru](https://twitter.com/hackyguru) represented the Waku team on the Space. We were also joined by participants from the winning ETHRome teams [Feka](https://twitter.com/Feka_7heaven), [mrnmrc.eth](https://twitter.com/mrnmrceth), [Martin](https://twitter.com/martinlecl), [R\xe9gis](https://twitter.com/Rgis295478), [Florian](https://twitter.com/floriantruchot), and [Mattia](https://twitter.com/Mattia).  \\n\\n<blockquote class=\\"twitter-tweet\\"><p lang=\\"zxx\\" dir=\\"ltr\\"><a href=\\"https://t.co/3hJv115Sg2\\">https://t.co/3hJv115Sg2</a></p>&mdash; Waku (@Waku_org) <a href=\\"https://twitter.com/Waku_org/status/1722659158816612463?ref_src=twsrc%5Etfw\\">November 9, 2023</a></blockquote> <script async src=\\"https://platform.twitter.com/widgets.js\\" charset=\\"utf-8\\"><\/script>\\n\\n\\n## \u201cBlockchain seems like the default way to do decentralised things, but in the end, it\'s not the only one\u201d - Mattia\\n\\nBy not executing transactions on a blockchain, Waku protocols benefit from decentralisation and speed without requiring gas fee payments. \\n\\nMattia praised the seamless interoperability enabled by Waku\u2019s platform-agnostic nature, allowing his team and all the hackers at the event to use the protocols on any platform or blockchain without restrictions. He noted that this helps to eliminate silos between chains, which is a key issue in web3. We believe this platform-agnostic characteristic will help Waku become the standard for communication in web3. \\n\\n\\n## Top tip for hackers: What we mean when we say \u201cno more chat apps\u201d\\n\\nAs you may have noticed, during Waku\u2019s recent hackathon, we requested that participants not submit \u2018standard chat apps\u2019. If you are wondering why, many of these are already in the ecosystem and we want to encourage hackers to find new use cases that can add value to users. Building a chat protocol with the proper security parameters to protect its users during a hackathon is also highly challenging. Chat apps refer to person-to-person messaging apps, such as Telegram. But much of the functionality within Waku revolves around chat-like interactions. As Guru and V\xe1clav noted, in essence, Waku activities are akin to a chat interface, albeit one that transcends traditional UI constraints. Even sophisticated applications, such as that submitted by Mattia\'s team, are interactions between Waku nodes, where the data could range from simple text to more complex data like GPS locations.\\n\\nWhether it is interactions between humans or machines, the core principle remains a form of chat. Within the Waku ecosystem, users essentially engage in a dialogue, either issuing commands to nodes for execution or communicating with AI services, which then carry out tasks based on predefined transactions. Hackers require creativity to transform these interactions into something truly exciting. \\n\\n\\n## Issues with Waku documentation and what we are doing about it\\n\\nMatija shared that his team had difficulties when it came to implementing encryption, and they had to resort to using asymmetric encryption. They created a public-private key pair and exchanged it between the users. This is not always convenient, especially if there is a group of people involved. It presents a challenge to Waku\u2019s bandwidth constraints to ensure everyone has all of the relevant public keys and then to re-encrypt them. \\n\\nA protocol in Waku called Noise solves this by negotiating a symmetric key pair between users. Multiple teams shared feedback that it was either not easy to locate the correct resources or that it was not easy to use. While we currently have [developer specification](https://rfc.vac.dev/spec/35/) documents for Noise on the Vac research site, based on the hackers\' feedback, we have created more accessible guides around encryption, which will be live very soon on the [Waku Docs](https://docs.waku.org/) site. We will be following this with better Noise protocol guides soon. \\n\\nFederico noted that he and his team found it overwhelming to use Waku for the first time due to its extensive components that did not align with their project requirements. However, they commended the well-written nature of the documentation that provided a solid foundation for their work. In particular, he attested to the quality of the \u2018[getting started](https://docs.waku.org/)\u2019 example. However, he suggested that for hackathon projects, a more streamlined and beginner-friendly example would be beneficial. Additionally, Frederico recommended incorporating examples with popular frameworks like React, as it aligns with the prevalent usage of frameworks in building applications.\\n\\nV\xe1clav acknowledged the limited nature of the current documentation and examples; it is a symptom of Waku\u2019s relative youth and constant evolution. V\xe1clav encouraged community participation by highlighting the existence of the [bounties repository](https://github.com/waku-org/bounties/), where contributors can propose and work on examples aligned with specific frameworks or use cases. This collaborative approach aims to address gaps in documentation and make Waku more accessible to a broader audience.\\n\\nWe are happy to share that since the X Space happened, we have released a [Waku React package](https://docs.waku.org/guides/js-waku/use-waku-react/) based on Federico\'s feedback that provides components and UI adapters to integrate @waku/sdk into React applications effortlessly.\\n\\n\\n## We are improving connection issues by better node incentivisation\\n\\nMartin and Florian shared that their team experienced network connection issues several times during the hackathon, noting that the network was likely overloaded due to the significant number of hackathon participants. Aaron shared his appreciation for the feedback: \u201cWe must be brutally honest if we are going to fix the things that aren\'t easy to work with.\u201d \\n\\nRunning nodes that fully participate in the Waku Relay Network should be encouraged, and [we have been doing so in this Q](https://blog.waku.org/waku-roadmap) by optimising the software and making participation permissionless. With such innovations, the community can benefit from more neutral contributions to the network, hence the backbone of a secure, scalable network, and a more extensive set of nodes to get sender and recipient k-anonymity.\\n\\n\\n## You called for storage\u2026 and it is coming!\\n\\nThe hackers mentioned that using Waku alone without any additional decentralised storage solution limits what they can build during a hackathon\'s time-constrained period. As V\xe1clav noted: \u201cWaku is in general ephemeral, and it should not be used, and it cannot be used for long-term storage.\u201d\\n\\nUntil now, hackers have relied on alternatives such as IPFS and Arweave when they need a decentralised storage element for their projects. However, both options rely on some form of centralised gateways to access external data.\\n\\nThe good news is [Codex](https://codex.storage/) is currently in development and will be able to step in and fill the gap. As the storage layer of the [Logos](logos.co) technology stack, Codex is durable and decentralised. Codex implements protocol constructs that incentivise wide participation of data storage providers, both small and large, thus ensuring a robust network resistant to censorship and external attack. An end-to-end solution with good integration between Waku and Codex will give developers precisely what they need from communications and storage.\\n\\n\\n## \u201cWe\'re on the precipice of something that we\'ve all been waiting for\u201d Aaron\\n\\nAaron took a moment in the Space to remind the community how close Waku is to realising one of the original promises of the Ethereum ecosystem - a decentralised peer-to-peer communications protocol. \\n\\n\u201cWith Waku, we\'re on the precipice of something we\'ve all been waiting for. We cannot lose sight of the tech that props up this entire ecosystem\u2026 In the Ethereum whitepaper, Whisper was outlined as the peer-to-peer communication protocol for the network. Due to one reason or another, Whisper\'s development did not progress in the same way other areas did. Waku boldly is picking up that torch and going forward. And with so many different world events happening, both positive and otherwise, Waku aims to be a tool for all people and machines to be leveraged.\u201d\\n\\nPlease ensure you follow [Waku on X](https://twitter.com/Waku_org) to get updates on the upcoming X Space, scheduled for February. The teams behind the best projects from ETHIstanbul and ETHIndia will join us. \\n\\nWe will be participating in more major hackathons next year, which we hope to see you at, but in the meantime, why not check out our [open bounties](https://github.com/waku-org/bounties/issues)? You are welcome and encouraged to share your feedback with us anytime on [Discord](https://discord.com/invite/gMPAzmcDER)."},{"id":"waku-roadmap","metadata":{"permalink":"/waku-roadmap","source":"@site/posts/2023-11-17-the-waku.roadmap.mdx","title":"The Waku Roadmap","description":"A comprehensive review of the Waku roadmap for H2 2023","date":"2023-11-17T00:00:00.000Z","formattedDate":"November 17, 2023","tags":[],"readingTime":10.07,"hasTruncateMarker":true,"authors":[{"name":"Amelia Trapp","twitter":"@amelia_trapp","github":"Amelia7689","key":"amelia"},{"name":"mf","twitter":"@0x_m_f","github":"DeBelg","key":"mf"}],"frontMatter":{"layout":"post","name":"The Waku Roadmap","title":"The Waku Roadmap","date":"2023-11-17T00:00:00.000Z","authors":["amelia","mf"],"published":true,"slug":"waku-roadmap","categories":"roadmap, waku, progress, milestones","image":"/img/black-waku-logo-with-name.png","hide_table_of_contents":false},"prevItem":{"title":"Key Learnings from Waku Hackers in 2023","permalink":"/learnings-from-hackers"},"nextItem":{"title":"Scaling Waku: A Progress Update","permalink":"/scaling-waku-progress-update"}},"content":"A comprehensive review of the Waku roadmap for H2 2023\\n\\n\x3c!--truncate--\x3e\\n\\n## Background on Waku\\n\\nTo understand why Waku exists, you need only to consider the centralised internet. Technology giants can dictate what we see and with whom we can communicate. The centralised platforms we regularly use to communicate have privileged access to outlandish realms of personal data that powerful commercial and political institutions can leverage. In contrast, [Waku](https://waku.org/) empowers internet users to circumvent these actions, offering a decentralised, open-source suite of privacy-preserving, peer-to-peer messaging protocols. The protocols are designed to flourish in resource-restricted environments to be accessible to people across the globe and can run on phones, servers, or browsers. Waku can be used for general messaging with humans, machines, or a hybrid situation.\\n\\nWe apply [Waku Relay](https://hackmd.io/@vac/main/%2FYYlZYBCURFyO_ZG1EiteWg#11WAKU2-RELAY-gossipsub) on top of the gossip protocol [GossipSub](https://docs.libp2p.io/concepts/pubsub/overview/) from libp2p to route messages and information with a subset of connected peers, increasing security and privacy. A gossip protocol is a peer-to-peer protocol in which nodes periodically exchange information about themselves and other associated nodes. Currently, it is possible to use the Waku Network and join a public gossipsub network in a permissionless manner. Some projects using Waku that opt to do this include [Status Desktop and Mobile](https://status.app/), [Railgun](https://docs.railgun.org/wiki/learn/privacy-system/community-relayers), and [TheGraph](https://docs.graphops.xyz/graphcast/design-principles).\\n\\n\\n## Achievements in H1 2023\\n\\nOne of the critical limitations of Waku is its reliance on a single GossipSub network for all users, which necessitates that each user relay traffic for all applications. As the adoption of Waku continues to grow, the bandwidth consumption skyrockets. Users with limited bandwidth capabilities are marginalised and unable to participate fully in the Waku Relay network. The key focus of the Waku development team in the first half of this year was to resolve some of these limitations around scaling to support the Status app\u2019s goal of serving one million users.\\n\\nWe met our milestone of providing a Waku network that can scale to approximately ten thousand active users within a [Status Community](https://status.app/), primarily thanks to implementing static sharding. Instead of having one relay network, we split the Waku Network into several relay (gossipsub) networks so that the end user is not required to relay the traffic of all applications, but rather just the traffic on the same shard. [We have also developed opt-in message signing](https://blog.waku.org/scaling-waku-progress-update/) as another stopgap solution to match the Status app timeline and needs. The Community signs the messages with a single key belonging to the entire Community, presenting a more private solution than having individual signatures. This solution set, in addition to protocol and software improvements, should enable the Status team to launch the Status apps with reasonable bandwidth usage.\\n\\nThe manual coordination of shard assignment with static sharding requires the actions of a central entity. While it is still permissionless, and anyone could run a node on any shard, the lack of coordination would deteriorate the user experience. Being able to scale Waku to support one million users on the Status app is dependent on our ability to improve on our H1 deliveries, which we will be stress testing and running through simulations.\\n\\nThe Waku team also deployed basic protections. The Denial of Service (DoS) protections are very light and do not give any guarantees regarding bandwidth usage. Users running a node, such as Status Desktop, will not want it to hog their bandwidth. What was delivered in H1 has caveats in terms of permissionless and relative DOS protection. It is possible to build an application with either properties, but not both. You will find our approach to resolving this in the H2 roadmap below.\\n\\nYou can read more about all of the deliveries in H1 [here.](https://blog.waku.org/scaling-waku-progress-update/)\\n\\n\\n## Roadmap milestones in H2 2023\\n\\nWaku\u2019s core milestone for H2 is launching and bootstrapping Waku Network Gen 0. There are an additional two milestones for 2024 that we have begun working on; those are:\\n\\n\\n\\n* [Add support for multiple platforms](https://github.com/waku-org/pm/milestone/2)<span style={{ textDecoration: \\"underline\\"}}>:</span>\\n\\nWe will be researching and experimenting with nim in 2023 to lay the groundwork for supporting multiple platforms.\\n\\n* [Instate quality assurance processes](https://github.com/waku-org/pm/milestone/3)<span style={{ textDecoration: \\"underline\\"}}>;</span>\\n\\nThis workstream has been initiated this year.\\n\\n\\n\\n#### Waku Network Gen 0\\n\\nThe [Waku Network Gen 0](https://hackmd.io/6Q_bHochRMOvTRXN0vCr5A?both#Waku-Network-Gen-0) builds on H1 2023\u2019s network sharding innovations and uses rate limiting from work done in 2021 and 2022. The goal is to create one permissionless, auto-scalable, DoS protected public network. The auto-sharding protocol automatically allocates messages for an application and does not require a centralised, manual allocator.\\n\\nThrough rate limiting, we will be working to ensure that users (or attackers) cannot flood the network beyond the maximum expected bandwidth usage. We will protect abuse through our RLN DoS protection, capping publishers to 1 message per second. We are also working on a dimensioning mechanism that would give publishers a maximum allocation of messages per day, limiting the maximum size of these messages within the overall network. Individuals can join a group on-chain and prove their membership in each message in a zero-knowledge manner \u2013 that is, without revealing which member they are. The number of members in the group is likely to be capped initially to guarantee maximum bandwidth usage by the network, although we will be able to review those when launching subsequent versions.\\n\\nRunning nodes that fully participate in the Waku Relay Network should be encouraged. We aim to do so by optimising the software and making participation permissionless. With such innovations, the community can benefit from more neutral contributions to the network, hence the backbone of a secure, scalable network, and a more extensive set of nodes to get sender and recipient [k-anonymity](https://vac.dev/rlog/wakuv2-relay-anon?).\\n\\nIt\u2019s important to note that all current and future issues need to be solved while preserving our principles:\\n\\n\\n\\n* Private\\n* Modular\\n* Scalable\\n* Censorship resistant\\n* Portable: works on mobile and browser\\n\\n\\n### Development Roadmap tracks\\n\\nWe have organised our research and development work into three tracks:\\n\\nGeneral Track;\\n\\nService Protocols;\\n\\nDoS protection.\\n\\nWe will review each track in more detail below.\\n\\n\\n#### General Track\\n\\nThe foundational work focuses on creating a scalable and auto-sharded Waku Network. Here, we determine specifications, design, and implement strategies based on our research and development that aid in scaling the Waku Network.\\n\\nYou can view the latest progress from the General Track [here](https://github.com/orgs/waku-org/projects/2/views/2?filterQuery=E%3A+1.+). Below are the key milestones and associated tasks from this track.\\n\\n\\n\\n* **[1.1: Network requirements and design](https://github.com/waku-org/research/issues/6)**\\n  * Goal: 22 Sep 2023\\n  * Key Activities:\\n    * Determine network specifications and design.\\n* **[1.2: Auto-sharding for autoscaling](https://github.com/waku-org/pm/issues/65)**\\n  * Goal: 30 Sep 2023\\n  * Key Activities:\\n    * Design and implement auto-sharding strategy.\\n    * Launch a limited number of shards.\\n* **[1.3: Node bandwidth management mechanism](https://github.com/waku-org/pm/issues/66)**\\n  * Goal: 31 Oct 2023\\n  * Key Activities:\\n    * Implement bandwidth management to choose shards based on availability for relay nodes dynamically\\n    * Design predictable bandwidth limits per shard\\n* **[1.4: Peer management and discovery](https://github.com/waku-org/pm/issues/67)**\\n  * Goal: 30 Nov 2023\\n  * Key Activities:\\n    * Design transparent interaction between applications and shards\\n    * Peer management system to track and discover public shared peers\\n* **[1.5: Launch and dogfood integrated public Waku Network MVP](https://github.com/waku-org/research/issues/1)**\\n  * Goal: 31 Jan 2024\\n  * Key Activities:\\n    * Launch Waku Network MVP\\n    * Gather feedback and improve\\n\\n\\n#### **Service Protocols**\\n\\nOur focus within [Service Protocols](https://docs.waku.org/overview/concepts/protocols) is required to upkeep and expand protocols such as filter, lightpush, peer exchange and store within the public network in a decentralised manner. Work within this track also involves ongoing efforts to incentivise our network.\\n\\nYou can view the latest progress from the Service Protocols Track [here](https://github.com/orgs/waku-org/projects/2/views/2?filterQuery=E%3A+2.+). Below are the key milestones and associated tasks from this track.\\n\\n\\n\\n* **[2.1: Production testing of existing protocols](https://github.com/waku-org/pm/issues/49)**\\n  * Goal: 30 Nov 2023\\n  * Key Activities:\\n    * Test and improve current service protocols: [filter](https://rfc.vac.dev/spec/12/), [lightpush](https://rfc.vac.dev/spec/19/), and [peer-exchange](https://rfc.vac.dev/spec/34/).\\n* **[2.2: Sharded capability discovery for light protocols](https://github.com/waku-org/pm/issues/63)**\\n  * Goal: 30 Sep 2023\\n  * Key Activities:\\n    * Peer selection mechanism that translates content topics to their underlying shard\\n* **[2.3: Basic distributed store services](https://github.com/waku-org/pm/issues/64)**\\n  * Goal: 30 Nov 2023 (integrate in 2024)\\n  * Key Activities:\\n    * Discover Store nodes for specific content topics and time ranges.\\n    * Service nodes to advertise their store services\\n* **[2.4: Basic design for service incentivisation](https://github.com/waku-org/pm/issues/80)**\\n  * Goal: 31 Dec 2023\\n  * Key Activities:\\n    * Incentivize service provision of the Waku Network\\n    * Tokenomics implementation\\n\\n\\n#### **DoS Protection**\\n\\nDenial of Service (DoS) mitigation is a challenge within any network. Bandwidth is a scarce resource for the Waku network; DoS protection is about stopping an attacker from flooding the network or for a Waku node to hog all of a user\u2019s bandwidth. This track covers consensus mechanisms such as our rate-limiting designs.\\n\\nWe balance free traffic with a fairly incentivised structure that doesn\u2019t exhaust the overall bandwidth. We must implement measures to ensure the bandwidth usage is feasible for additional protocol-wide DOS protection. We need to assist node operators in maximising the use of their resources and allocate shard support depending on current traffic so that we can assure ongoing service guarantees.\\n\\nYou can view the latest progress from the DoS Protection Track [here](https://github.com/orgs/waku-org/projects/2/views/2?filterQuery=E%3A+3.+). Below are the key milestones and associated tasks from this track.\\n\\n\\n\\n* **[3.1: DoS requirements and design](https://github.com/waku-org/pm/issues/69)**\\n  * Goal: 22 Sep 2023\\n  * Key Activities:\\n    * Define DoS/spam protection specifications\\n    * Design initial membership mechanisms\\n    * [Free and or paid traffic design](https://hackmd.io/@alrevuelta/rkqbPKaoo)\\n* **[3.2: Basic DoS protection in production](https://github.com/waku-org/pm/issues/70)**\\n  * Goal: 31 Oct 2023\\n  * Key Activities:\\n    * Implement and launch the RLN mechanism\\n    * Implement rate limiting\\n* **[3.3: Membership for Status Communities](https://github.com/waku-org/pm/issues/71)**\\n  * Goal: 30 Nov 2023\\n  * Key Activities:\\n    * Design membership assignments for community members\\n* **[3.4: Further memberships](https://github.com/waku-org/pm/issues/72)**\\n  * Goal: 31 Dec 2023\\n  * Key Activities:\\n    * Expanding memberships to third parties\\n\\n\\n### Anticipated risks to delivering our H2 milestones\\n\\nWe have identified several challenges that may impact our ability to deliver on our roadmap milestones.\\n\\n**1. Ongoing structural design changes due to practical implications:**\\n\\nOur network dimensioning on modelling and assumptions may need to be modified when applied in real-world use cases. For example, we have designed the network not to allow more than one message published per second by each publisher. We have set message sizes to a maximum of 150 KB, implemented a 20-second grace period, and divided all traffic among 8 defined network shards. The risk is that, despite our modelling and research, the structural changes might not be helpful for all applications.\\n\\nWe are committed to building in the open and accept that our [project management process](https://github.com/waku-org/pm/blob/master/README.md) could be better. This principle of openness is why we are dedicating effort to producing easily digestible content, such as our documentation at [docs.waku.org](https://docs.waku.org/).\\n\\n**2. Interactions between applications and nodes:**\\n\\nWaku Relay is the foundation for building decentralised communications. There is uncertainty on how applications will interact with the underlying nodes to ensure that all app traffic gets routed seamlessly and transparently, all while having a balanced data load throughout eight different routing shards.\\n\\n**3. Navigating Bandwidth Management**\\n\\nBandwidth in peer-to-peer networks is a luxury that needs to be acutely observed and managed. To maintain a large group of peers hosting nodes, we must be capable of securely managing bandwidth allocation to their nodes.\\n\\n\\n### Become a part of the Waku ecosystem\\n\\nIf you have questions about Waku\u2019s development roadmap or want to join a like-minded community focused on bringing peer-to-peer communications to millions of users, join the Waku [Discord](https://discord.waku.org/) or follow us on [X](https://twitter.com/Waku_org).\\n\\nIf the technology speaks to you, [check out our open job positions](https://https://status.app/jobs/) or crack some of our [bounties](https://github.org/waku-org/bounties).\\n\\nYou can also help to ensure that we stay decentralised by [running your own Waku Node!](https://docs.waku.org/guides/nwaku/run-node)\\n\\nTo integrate Waku into your application, check the table below for the necessary links. You can always get further support from us on Discord.\\n\\n\\n\\n\\n<table>\\n  <tr>\\n    <td>\\n    </td>\\n    <td><strong>Integrate Waku into your application</strong>\\n    </td>\\n  </tr>\\n  <tr>\\n    <td>docs\\n    </td>\\n    <td><a href=\\"https://docs.waku.org/\\">https://docs.waku.org</a>\\n    </td>\\n  </tr>\\n  <tr>\\n    <td>nwaku\\n    </td>\\n    <td><a href=\\"https://github.com/waku-org/nwaku\\">https://github.com/waku-org/nwaku</a>\\n    </td>\\n  </tr>\\n  <tr>\\n    <td>browser (JS/TS)\\n    </td>\\n    <td><a href=\\"https://github.com/waku-org/js-waku\\">https://github.com/waku-org/js-waku</a>\\n    </td>\\n  </tr>\\n  <tr>\\n    <td>Go\\n    </td>\\n    <td><a href=\\"https://github.com/waku-org/go-waku\\">https://github.com/waku-org/go-waku</a>\\n    </td>\\n  </tr>\\n  <tr>\\n    <td>Rust\\n    </td>\\n    <td><a href=\\"https://github.com/waku-org/waku-rust-bindings\\">https://github.com/waku-org/waku-rust-bindings</a>\\n    </td>\\n  </tr>\\n</table>\\n\\n\\nWe look forward to connecting and hearing your feedback on our roadmap."},{"id":"scaling-waku-progress-update","metadata":{"permalink":"/scaling-waku-progress-update","source":"@site/posts/2023-09-21-scaling-waku-a-progress-update.mdx","title":"Scaling Waku: A Progress Update","description":"A glance into how Waku has progressed its scaling capabilities throughout 2023","date":"2023-09-25T00:00:00.000Z","formattedDate":"September 25, 2023","tags":[],"readingTime":7.61,"hasTruncateMarker":true,"authors":[{"name":"mf","twitter":"@0x_m_f","github":"DeBelg","key":"mf"}],"frontMatter":{"layout":"post","name":"Scaling Waku: A Progress Update","title":"Scaling Waku: A Progress Update","date":"2023-09-25T00:00:00.000Z","authors":"mf","published":true,"slug":"scaling-waku-progress-update","categories":"scaling, waku, progress, milestones","image":"/img/black-waku-logo-with-name.png","hide_table_of_contents":false},"prevItem":{"title":"The Waku Roadmap","permalink":"/waku-roadmap"},"nextItem":{"title":"Device Pairing in Js-waku and Go-waku","permalink":"/device-pairing-in-js-waku-and-go-waku"}},"content":"A glance into how Waku has progressed its scaling capabilities throughout 2023\\n\\n\x3c!--truncate--\x3e\\n\\nAs we move forward into the last months 2023, our primary goal has been to solidify the scalability of Waku protocols, focusing on Status Communities.\\n\\n\\n\\n\\nWe have [set and reached](https://github.com/waku-org/pm/issues/12) our milestone of providing a Waku network that can scale to approximately 10K _active_ users in Status Communities. While continuing to provide [Status](https://status.im) the required network services to make such a community viable, we believe that the research, protocols, tools, and solutions we are working on will allow the overall Waku network to scale to over a million nodes.\\n\\n\\nTo meet Status\'s timeline for the Communities feature, the Waku team made some tough decisions that required tradeoffs in terms of decentralization and other design goals. However, this approach has allowed us to demonstrate the core stability and scalability of Waku\'s protocols, while continuously working towards long-term solutions that provide better anonymity, robustness, and decentralization features.\\n\\n\\nThis article will continue diving deeper into what we did and where you can learn more about these topics. If you\'re already keen to get your hands dirty, we have recently published our upgraded [Waku documentation](https://docs.waku.org), allowing us to build faster, [together](https://docs.waku.org/community/).\\n\\n\\n## Overview\\n\\n- [ **Theoretical: Laying the groundwork**](#laying-the-theoretical-groundwork)\\n    - Theoretical Analysis of Scaling Gossipsub.\\n    - Static Sharding\\n\\n- [**Bridging theory to practice**](#bridging-theory-to-practice)\\n    - Simulations\\n    - Status Telemetry Analysis\\n\\n- [**Hands-on achievements**](#hands-on-achievements)\\n    - Status MVP Delivery (Scaled Waku Communities to 10k)\\n    - Protocol Service Improvements\\n        - PostgreSQL transition\\n        - Waku Peer Exchange\\n        - Filter Protocol Redesign\\n    - Status DoS mitigation mechanism\\n    - Building for builders\\n        - Waku Docs upgrade\\n        - C API\\n-   [**Contribute to the decentralisation of communication**](#contribute-to-the-decentralisation-of-communication)\\n\\n---\\n\\n\\n## Laying the theoretical groundwork\\n\\n\\n\\n### Theoretical Analysis of Scaling gossipsub\\nWe started in Q1 by doing a [theoretical analysis (mathematical modelling)](https://hackmd.io/IYmyyUIdSEuRZ7WbYd6dng?view) of GossipSub scaling under certain conditions.\\n\\nThe numbers for our message rates and sizes chosen for the model come from the telemetric analysis of typical traffic on significantly sizable Discord servers and existing Status Communities. From this, we conclude that the Waku Relay network can scale to 10,000 nodes per shard.\\n\\nSuppose we further assume that each Status Community operates on a separate shard. In that case, each community can scale to 10,000 _active_ relay-only users while bandwidth usage remains within a reasonable range for each user.\\n\\nRealistically most community nodes are not active simultaneously, so this approach could scale to ~100,000 nodes per community if roughly 1/10th of users are active at any time.\\n\\n### Static sharding\\n\\nBased on the analyses above, we published [an RFC](https://rfc.vac.dev/spec/57/), bringing together an integrated strategy to scale Status Communities based on static sharding. This requires manually selecting and configuring static shard(s) per community, with no sharing of shards between communities. Static sharding provides a simple way to achieve scalability with reasonable Denial of Service (DoS) protection (more on that below) but also requires some trade-offs in decentralisation and anonymity. Therefore, our longer-term strategy is to provide a way to auto-scale the Waku network with \\"autosharding\\" - this allows multiple applications and communities to share the same set of shards without intervening manually in the underlying message routing strategies.\\n\\n[This Github issue](https://github.com/waku-org/research/issues/3) provides more information on our network strategy as we advance. In the near future you can expect an elaborated post on our strategy & roadmap.\\n\\n---\\n## Bridging theory to practice\\n---\\n\\n### Simulations\\nTo test our theoretical conclusions, the Distributed Systems Testing (DST) team ran extensive simulations using a Waku simulation tool built on the Kurtosis framework, [Wakurtosis](https://github.com/vacp2p/wakurtosis).\\n\\nThe DST team has recently published a [summary report](https://docs.google.com/document/d/1U3bzlbk_Z3ZxN9tPAnORfYdPRWyskMuShXbdxCj4xOM/edit) detailing these conclusions about scalability, matching our theoretical expectations while showing that the nwaku client can deal with the resource overhead in a growing network.\\n\\nWhile achieving full-scale simulations of 10,000 nodes posed challenges, initial simulations of up to 1000 nodes aligned with our mathematical models. This gave us confidence in the viability of our approach.\\n\\n\\n### Status telemetry analysis\\n\\nHaving drawn theoretical conclusions under which a Waku Relay network would scale, we then experimented to verify our conclusions. Afterwards we performed a [telemetric analysis](https://github.com/vacp2p/vac-book/blob/main/scratch/status-scaling/status-telemetry-analysis.md) of current Status Community traffic.\\n\\nThis allowed us to discover potential bottlenecks when sending large messages over Waku, determine major bandwith usage, and propose strategies to help Status Communities reasonably use Waku without compromising its scalability.\\n\\n\\n\\n\\n---\\n##  Hands-on achievements\\n---\\n\\n### Protocol service improvements\\n\\nTo cater to the needs of a growing network of users on diverse platforms, the team improved (and in some cases wholly redesigned) our existing protocols based on the lessons we have learned from dogfooding the Waku network. Of these, the changes to the store and filter protocols were the most significant.\\n\\n#### - PostgreSQL transition\\n To be able to retrieve an increasing amount of large history queries & messages from our store protocol, we have [transitioned](https://github.com/waku-org/pm/issues/4 ) from a simple SQLite backend to a more robust PostgreSQL archive. This allows store nodes to serve multiple queries in parallel while improving message reliability through redundancy.\\n\\n#### - Filter protocol redesign\\nThe filter protocol allows resource-restricted devices to receive only a subset of messages routed in the network. We have redesigned [the entire filter protocol](https://rfc.vac.dev/spec/12/) to be more robust and provide features requested by Waku-based applications, such as refreshing existing subscriptions.\\n\\nThis new filter protocol version is currently being dogfooded within both mobile and desktop production environment, and the initial feedback is prominently positive.\\n\\n\\n#### - **Waku peer exchange**\\n We have designed and then created a discovery mechanism suitable for resource-restricted nodes called [Waku peer exchange](https://rfc.vac.dev/spec/34/). Work on all these protocols empowers nodes, including resource-restricted devices, to participate seamlessly, ensuring that the network remains accessible to all.\\n\\n\\n\\n### Connectivity: discovering and managing peers\\n\\nA Waku network can only function well if we make it efficient for nodes to connect and interact.\\n\\nDuring the first half of 2023, we spent significant effort improving how a node discovers peers and manages its connectivity to those peers. We have boosted a node\'s ability to differentiate between \\"good\\" and \\"bad\\" connections, including integrating [gossipsub peer scoring](https://github.com/libp2p/specs/blob/master/pubsub/gossipsub/gossipsub-v1.1.md#peer-scoring).\\n\\n\\nThanks to the introduction of [libp2p rendezvous discovery](https://rfc.vac.dev/spec/57/#libp2p-rendezvous-and-circuit-relay), nodes behind restrictive NATs can now make themselves discoverable and connect to other nodes by coordinating a NAT hole punch via a [circuit-relay connection](https://rfc.vac.dev/spec/57/#libp2p-rendezvous-and-circuit-relay).\\n\\nWe have also modified [discovery](https://rfc.vac.dev/spec/51/#discovery) methods such as [discv5](https://github.com/ethereum/devp2p/blob/master/discv5/discv5.md), to consider static sharding when filtering discovered nodes.\\n\\n### DoS protection\\n\\nOne of the most important considerations of any Waku network deployment is protecting the network against spam and DOS attacks. While we are still working on productising a [privacy-preserving spam protection mechanism based on rate-limiting nullifiers](https://rfc.vac.dev/spec/17/), we focused in H1 on developing a simple DoS mitigation mechanism for Status Communities.\\n\\nThis requires all messages belonging to a community to be signed with a key distributed to all community members. Since static sharding ensures messages are only routed within a community, each relayer in the Waku network can validate that each routed message truly originated from within the community and discard those that did not.\\n\\n\\n\\n\\n\\n### Building for builders\\n\\n#### - Docs\\nWe are continuing to make building on Waku more accessible than ever. We have redesigned and improved our [docs website](https://docs.waku.org/), making it easier for you to get acquainted with our work.\\n\\n#### - C API\\nThe nwaku client has recently seen the introduction of [a C API](https://github.com/waku-org/nwaku/tree/b9d5d28af5afcc2589357a132c9b5beb57202828/examples/cbindings) that can be seamlessly wrapped in multiple programming languages (see the [Python wrapper](https://github.com/waku-org/nwaku/tree/b9d5d28af5afcc2589357a132c9b5beb57202828/examples/python) as an example), an efficient [addition](https://docs.waku.org/guides/nodes-and-sdks/) to our existing languages and frameworks support. By simplifying the process of integrating nwaku as a service node into other applications, we are fostering an environment where more projects can actively build on Waku and contribute to the Waku network.\\n\\n## Setting the stage for growth\\n\\nThis post provides a glimpse into the Waku Team\'s progress in the first half of 2023.\\n\\n\\nOur sights are currently set on taking what we have learned and building a [viable public Waku Network](https://github.com/waku-org/research/issues/1) that can scale to even larger numbers while maintaining our core [principles](https://status.im/about/#our-principles) of open-access, privacy-preservation, decentralisation, and transparency about trade-offs.\\n\\n\\nConquering those research & development challenges will not only scale Waku, but will play a significant role in growing and scaling Status Communities. Where we now have made certain trade-offs, our end-goal and principles are aligned in our end-goals, you\'ll soon read more about our goals and milestones in our upcoming Roadmap.\\n\\n\\n\\nAs a team, we remain dedicated to this mandate while acknowledging the vast involvement of community members and collaborators who contribute to our journey.\\n\\n\\n\\n## **Contribute to the decentralisation of communication.**\\n\\nHelp us ensure that we are staying decentralised by [running your own Waku Node!](https://docs.waku.org/guides/run-nwaku-node)\\n\\n|  | Integrate Waku in your application |\\n| --- | --- |\\n| nwaku | https://github.com/waku-org/nwaku |\\n| Browser (JS/TS) | https://github.com/waku-org/js-waku |\\n| Go | https://github.com/waku-org/go-waku |\\n| Rust | https://github.com/waku-org/waku-rust-bindings |\\n| More\u2026 | https://docs.waku.org/guides/nodes-and-sdks |\\n\\n\\nSoon we will also release our upcoming roadmap.\\n\\nStay tuned, and follow our [Twitter](https://twitter.com/Waku_org) to keep yourself updated on new launches. Say hello to us on [Discord](https://discord.gg/GdJJh38sZR), [join our team](https://jobs.status.im/), or crack some of our [bounties](https://github.org/waku-org/bounties)  --- No need to remain shy!\\n\\n\\n\\n\\n\\n------------\\n*`Written by Mf & Hanno 09/2023`*"},{"id":"device-pairing-in-js-waku-and-go-waku","metadata":{"permalink":"/device-pairing-in-js-waku-and-go-waku","source":"@site/posts/2023-04-24-device-pairing-in-js-waku-and-go-waku.mdx","title":"Device Pairing in Js-waku and Go-waku","description":"Device pairing and secure message exchange using Waku and noise protocol.","date":"2023-04-24T12:00:00.000Z","formattedDate":"April 24, 2023","tags":[],"readingTime":4.09,"hasTruncateMarker":true,"authors":[{"name":"Richard","twitter":"richardramos_me","github":"richard-ramos","website":"https://richard-ramos.github.io/","key":"rramos"}],"frontMatter":{"layout":"post","name":"Device Pairing in Js-waku and Go-waku","title":"Device Pairing in Js-waku and Go-waku","date":"2023-04-24T12:00:00.000Z","authors":"rramos","published":true,"slug":"device-pairing-in-js-waku-and-go-waku","categories":"platform"},"prevItem":{"title":"Scaling Waku: A Progress Update","permalink":"/scaling-waku-progress-update"},"nextItem":{"title":"The Future of Waku Network: Scaling, Incentivization, and Heterogeneity","permalink":"/future-of-waku-network"}},"content":"Device pairing and secure message exchange using Waku and noise protocol.\\n\\n\x3c!--truncate--\x3e\\n\\nAs the world becomes increasingly connected through the internet, the need for secure and reliable communication becomes paramount. In [this article](https://vac.dev/wakuv2-noise) it is described how the Noise protocol can be used as a key-exchange mechanism for Waku.\\n\\nRecently, this feature was introduced in [js-waku](https://github.com/waku-org/js-noise) and [go-waku](https://github.com/waku-org/go-waku), providing a simple API for developers to implement secure communication protocols using the Noise Protocol framework. These open-source libraries provide a solid foundation for building secure and decentralized applications that prioritize data privacy and security.\\n\\nThis functionality is designed to be simple and easy to use, even for developers who are not experts in cryptography. The library offers a clear and concise API that abstracts away the complexity of the Noise Protocol framework and provides an straightforward interface for developers to use. Using this, developers can effortlessly implement secure communication protocols on top of their JavaScript and Go applications, without having to worry about the low-level details of cryptography.\\n\\nOne of the key benefits of using Noise is that it provides end-to-end encryption, which means that the communication between two parties is encrypted from start to finish. This is essential for ensuring the security and privacy of sensitive information\\n\\n### Device Pairing\\n\\nIn today\'s digital world, device pairing has become an integral part of our lives. Whether it\'s connecting our smartphones with other computers or web applications, the need for secure device pairing has become more crucial than ever. With the increasing threat of cyber-attacks and data breaches, it\'s essential to implement secure protocols for device pairing to ensure data privacy and prevent unauthorized access.\\n\\nTo demonstrate how device pairing can be achieved using Waku and Noise, we have examples available at https://examples.waku.org/noise-js/. You can try pairing different devices, such as mobile and desktop, via a web application. This can be done by scanning a QR code or opening a URL that contains the necessary data for a secure handshake.\\n\\nThe process works as follows:\\n\\nActors:\\n\\n- Alice the initiator\\n- Bob the responder\\n\\n1. The first step in achieving secure device pairing using Noise and Waku is for Bob generate the pairing information which could be transmitted out-of-band. For this, Bob opens https://examples.waku.org/noise-js/ and a QR code is generated, containing the data required to do the handshake. This pairing QR code is timeboxed, meaning that after 2 minutes, it will become invalid and a new QR code must be generated\\n2. Alice scans the QR code using a mobile phone. This will open the app with the QR code parameters initiating the handshake process which is described in [43/WAKU2-DEVICE-PAIRING](https://rfc.vac.dev/spec/43/#protocol-flow). These messages are exchanged between two devices over Waku to establish a secure connection. The handshake messages consist of three main parts: the initiator\'s message, the responder\'s message, and the final message, which are exchanged to establish a secure connection. While using js-noise, the developer is abstracted of this process, since the messaging happens automatically depending on the actions performed by the actors in the pairing process.\\n3. Both Alice and Bob will be asked to verify each other\'s identity. This is done by confirming if an 8-digits authorization code match in both devices. If both actors confirm that the authorization code is valid, the handshake concludes succesfully\\n4. Alice and Bob receive a set of shared keys that can be used to start exchanging encrypted messages. The shared secret keys generated during the handshake process are used to encrypt and decrypt messages sent between the devices. This ensures that the messages exchanged between the devices are secure and cannot be intercepted or modified by an attacker.\\n\\nThe above example demonstrates device pairing using js-waku. Additionally, You can also try building and experimenting with other noise implementations like nwaku, or go-waku, with an example available at https://github.com/waku-org/go-waku/tree/master/examples/noise in which the same flow described before is done with Bob (the receiver) using go-waku instead of js-waku.\\n\\n### Conclusion\\n\\nWith its easy to use API built on top of the Noise Protocol framework and the LibP2P networking stack, if you are a developer looking to implement secure messaging in their applications that are both decentralized and censorship resistant, Waku is definitely an excellent choice worth checking out!\\n\\nWaku is also Open source with a MIT and APACHEv2 licenses, which means that developers are encouraged to contribute code, report bugs, and suggest improvements to make it even better.\\n\\nDon\'t hesitate to try the live example at https://examples.waku.org/noise-js and build your own webapp using https://github.com/waku-org/js-noise, https://github.com/waku-org/js-waku and https://github.com/waku-org/go-waku. This will give you a hands-on experience of implementing secure communication protocols using the Noise Protocol framework in a practical setting. Happy coding!\\n\\n### References\\n\\n- [Noise handshakes as key-exchange mechanism for Waku](https://vac.dev/wakuv2-noise)\\n- [Noise Protocols for Waku Payload Encryption](https://rfc.vac.dev/spec/35/)\\n- [Session Management for Waku Noise](https://rfc.vac.dev/spec/37/)\\n- [Device pairing and secure transfers with Noise](https://rfc.vac.dev/spec/43/)\\n- [go-waku Noise\'s example](https://github.com/waku-org/go-waku/tree/master/examples/noise)\\n- [js-waku Noise\'s example](https://github.com/waku-org/js-waku-examples/tree/master/examples/noise-js)\\n- [js-noise](https://github.com/waku-org/js-noise/)\\n- [go-noise](https://github.com/waku-org/js-noise/)"},{"id":"future-of-waku-network","metadata":{"permalink":"/future-of-waku-network","source":"@site/posts/2023-04-03-waku-as-a-network.mdx","title":"The Future of Waku Network: Scaling, Incentivization, and Heterogeneity","description":"Learn how the Waku Network is evolving through scaling, incentivization, and diverse ecosystem development and what the future might look like.","date":"2023-04-03T00:00:00.000Z","formattedDate":"April 3, 2023","tags":[],"readingTime":5.745,"hasTruncateMarker":true,"authors":[{"name":"Franck","twitter":"fryorcraken","github":"fryorcraken","key":"franck"}],"frontMatter":{"layout":"post","name":"The Future of Waku Network: Scaling, Incentivization, and Heterogeneity","title":"The Future of Waku Network: Scaling, Incentivization, and Heterogeneity","date":"2023-04-03T00:00:00.000Z","authors":"franck","published":true,"slug":"future-of-waku-network","categories":"platform, operator, network","image":"/img/black-waku-logo-with-name.png","discuss":"https://forum.vac.dev/t/discussion-the-future-of-waku-network-scaling-incentivization-and-heterogeneity/173","hide_table_of_contents":false},"prevItem":{"title":"Device Pairing in Js-waku and Go-waku","permalink":"/device-pairing-in-js-waku-and-go-waku"}},"content":"Learn how the Waku Network is evolving through scaling, incentivization, and diverse ecosystem development and what the future might look like.\\n\\n\x3c!--truncate--\x3e\\n\\nWaku is preparing for production with a focus on the Status Communities use case. In this blog post, we will provide an\\noverview of recent discussions and research outputs, aiming to give you a better understanding of how the Waku network\\nmay look like in terms of scaling and incentivization.\\n\\n## DOS Mitigation for Status Communities\\n\\nWaku is actively exploring DOS mitigation mechanisms suitable for Status Communities. While RLN\\n(Rate Limiting Nullifiers) remains the go-to DOS protection solution due to its privacy-preserving and\\ncensorship-resistant properties, there is still more work to be done. We are excited to collaborate with PSE\\n(Privacy & Scaling Explorations) in this endeavor. Learn more about their latest progress in this [tweet](https://twitter.com/CPerezz19/status/1640373940634939394?s=20).\\n\\n## A Heterogeneous Waku Network\\n\\nAs we noted in a previous [forum post](https://forum.vac.dev/t/waku-payment-models/166/3), Waku\'s protocol\\nincentivization model needs to be flexible to accommodate various business models. Flexibility ensures that projects\\ncan choose how they want to use Waku based on their specific needs.\\n\\n### Reversing the Incentivization Question\\n\\nTraditionally, the question of incentivization revolves around how to incentivize operators to run nodes. We\'d like to\\nreframe the question and instead ask, \\"How do we pay for the infrastructure?\\"\\n\\nWaku does not intend to offer a free lunch.\\nEthereum\'s infrastructure is supported by transaction fees and inflation, with validators receiving rewards from both sources.\\nHowever, this model does not suit a communication network like Waku.\\nUsers and platforms would not want to pay for every single message they send. Additionally, Waku aims to support instant\\nephemeral messages that do not require consensus or long-term storage.\\n\\nProjects that use Waku to enable user interactions, whether for chat messages, gaming, private DeFi, notifications, or\\ninter-wallet communication, may have different value extraction models. Some users might provide services for the\\nproject and expect to receive value by running nodes, while others may pay for the product or run infrastructure to\\ncontribute back. Waku aims to support each of these use cases, which means there will be various ways to \\"pay for the\\ninfrastructure.\\"\\n\\nIn [his talk](https://vac.dev/building-privacy-protecting-infrastructure), Oskar addressed two strategies: RLN and service credentials.\\n\\n### RLN and Service Credentials\\n\\nRLN enables DOS protection across the network in a privacy-preserving and permission-less manner: stake in a contract,\\nand you can send messages.\\n\\nService credentials establish a customer-provider relationship. Users might pay to have messages they are interested in\\nstored and served by a provider. Alternatively, a community owner could pay a service provider to host their community.\\n\\nProviders could offer trial or limited free services to Waku users, similar to Slack or Discord. Once a trial is expired or outgrown,\\na community owner could pay for more storage or bandwidth, similar to Slack\'s model.\\nAlternatively, individual users could contribute financially, akin to Discord\'s Server Boost, or by sharing their own\\nresources with their community.\\n\\nWe anticipate witnessing various scenarios across the spectrum: from users sharing resources to users paying for access to the network and everything in between.\\n\\n## Waku Network: Ethereum or Cosmos?\\n\\nAnother perspective is to consider whether the Waku network will resemble Ethereum or Cosmos.\\n\\nFor those not familiar with the difference between both, in a very concise manner:\\n\\n- Ethereum is a set of protocols and software that are designed to operate on one common network and infrastructure\\n- Cosmos is a set of protocols and software (SDKs) designed to be deployed in separate yet interoperable networks and infrastructures by third parties\\n\\nWe want Waku to be decentralized to provide censorship resistance and privacy-preserving communication.\\nIf each application has to deploy its own network, we will not achieve this goal.\\nTherefore, we aim Waku to be not only an open source set of protocols, but also a shared infrastructure that anyone can leverage to build applications on top, with some guarantees in terms of decentralization and anonymity.\\nThis approach is closer in spirit to Ethereum than Cosmos.\\nDo note that, similarly to Ethereum, anyone is free to take Waku software and protocols and deploy their own network.\\n\\nYet, because of the difference in the fee model, the Waku Network is unlikely to be as unified as Ethereum\'s.\\nWe currently assume that there will be separate gossipsub networks with different funding models.\\nSince there is no consensus on Waku, each individual operator can decide which network to support, enabling Waku to maintain its permission-less property.\\n\\nMost likely, the Waku network will be heterogeneous, and node operators will choose the incentivization model they prefer.\\n\\n## Scalability and Discovery Protocols\\n\\nTo enable scalability, the flow of messages in the Waku network will be divided in shards,\\nso that not every node has to forward every message of the whole network.\\nDiscovery protocols will facilitate users connecting to the right nodes to receive the messages they are interested in.\\n\\nDifferent shards could be subject to a variety of rate limiting techniques (globally, targeted to that shard or something in-between).\\n\\nMarketplace protocols may also be developed to help operators understand how they can best support the network and where\\ntheir resources are most needed. However, we are still far from establishing or even assert that such a marketplace will be needed.\\n\\n## Open Problems\\n\\nSplitting traffic between shards reduces bandwidth consumption for every Waku Relay node.\\nThis improvement increases the likelihood that users with home connections can participate and contribute to the gossipsub network without encountering issues.\\n\\nHowever, it does not cap traffic.\\nThere are still open problems regarding how to guarantee that someone can use Waku with lower Internet bandwidth or run critical services, such as a validation node, on the same connection.\\n\\nWe have several ongoing initiatives:\\n\\n- Analyzing the Status Community protocol to confirm efficient usage of Waku [[4]](https://github.com/vacp2p/research/issues/177)\\n- Simulating the Waku Network to measure actual bandwidth usage [[5]](https://github.com/waku-org/pm/issues/2)\\n- Segregating chat messages from control and media messages [[6]](https://rfc.vac.dev/spec/57/#control-message-shards)\\n\\nThe final solution will likely be a combination of protocols that reduce bandwidth usage or mitigate the risk of DOS attacks, providing flexibility for users and platforms to enable the best experience.\\n\\n## The Evolving Waku Network\\n\\nThe definition of the \\"Waku Network\\" will likely change over time. In the near future, it will transition from a single\\ngossipsub network to a sharded set of networks unified by a common discovery layer. This change will promote scalability\\nand allow various payment models to coexist within the Waku ecosystem.\\n\\nIn conclusion, the future of Waku Network entails growth, incentivization, and heterogeneity while steadfastly\\nmaintaining its core principles. As Waku continues to evolve, we expect it to accommodate a diverse range of use cases\\nand business models, all while preserving privacy, resisting censorship, avoiding surveillance, and remaining accessible\\nto devices with limited resources.\\n\\n## References\\n\\n1. [51/WAKU2-RELAY-SHARDING](https://rfc.vac.dev/spec/51/)\\n2. [57/STATUS-Simple-Scaling](https://rfc.vac.dev/spec/57/)\\n3. [58/RLN-V2](https://rfc.vac.dev/spec/58/)\\n4. [Scaling Status Communities: Potential Problems](https://github.com/vacp2p/research/issues/177)\\n5. [Waku Network Testing](https://github.com/waku-org/pm/issues/2)\\n6. [51/WAKU2-RELAY-SHARDING: Control Message Shards](https://rfc.vac.dev/spec/57/#control-message-shards)"}]}')}}]);