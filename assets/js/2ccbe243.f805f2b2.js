"use strict";(self.webpackChunkblog_waku_org=self.webpackChunkblog_waku_org||[]).push([[716],{66200:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"build-dapps-using-waku","metadata":{"permalink":"/es/build-dapps-using-waku","source":"@site/i18n/es/build-dapps-using-waku.mdx","title":"Cree una dApp con Waku","description":"Read in English","date":"2024-03-04T00:00:00.000Z","formattedDate":"March 4, 2024","tags":[],"readingTime":15.44,"hasTruncateMarker":true,"authors":[{"name":"Joel Adewole","twitter":"@wolz_codelife","github":"wolz-CODElife","key":"joel"}],"frontMatter":{"layout":"post","name":"Cree una dApp con Waku","title":"Cree una dApp con Waku","date":"2024-03-04T00:00:00.000Z","authors":"joel","published":null,"slug":"build-dapps-using-waku","image":"/img/black-waku-logo-with-name.png","sidebar_class_name":"hidden"}},"content":"import { Button } from \'@acid-info/lsd-react\'\\n\\n<a href=\\"/build-dapps-using-waku\\">\\n    <Button>Read in English</Button>\\n</a>\\n\\n<br /><br />\\n\\n**TL;DR**\\n\\n\xbfSab\xedas que, m\xe1s all\xe1 de ser una mera palabra de moda en el sector, la comunicaci\xf3n descentralizada representa una respuesta estrat\xe9gica a las vulnerabilidades inherentes de los sistemas centralizados? Da prioridad a la privacidad, la seguridad y la resistencia a la censura, lo que la convierte en un componente indispensable en el conjunto de herramientas de los desarrolladores web.\\n\\n\x3c!--truncate--\x3e\\n\\nLos sistemas de comunicaci\xf3n centralizados tradicionales han luchado durante mucho tiempo contra la censura, los puntos \xfanicos de fallo y los problemas de privacidad. Con el auge de la Web 3 y la tecnolog\xeda blockchain, las soluciones de comunicaci\xf3n descentralizadas como Waku se perfilan como una alternativa prometedora. Waku ofrece un sistema de mensajer\xeda peer-to-peer (P2P) que es resistente a la censura, escalable y seguro, por lo que es una opci\xf3n ideal para los desarrolladores de dApps que buscan construir aplicaciones de pr\xf3xima generaci\xf3n.\\n\\nEste art\xedculo te guiar\xe1 sobre c\xf3mo construir una aplicaci\xf3n descentralizada (dApp) utilizando Waku, un protocolo de comunicaci\xf3n descentralizado sin compromisos, y Vue.js, un popular marco de JavaScript para la construcci\xf3n de interfaces de usuario. Antes de sumergirse en los aspectos pr\xe1cticos de desarrollo de este art\xedculo, se recomienda que tenga una comprensi\xf3n b\xe1sica de Vue.js, familiaridad con Tailwind CSS para el estilo de interfaz de usuario, y una comprensi\xf3n de web3.js para la integraci\xf3n de la cartera sin problemas.\\n\\n**\xbfQu\xe9 es Waku?**\\n\\nWaku es un conjunto de protocolos de mensajer\xeda peer-to-peer descentralizados que permiten una comunicaci\xf3n segura y resistente a la censura a trav\xe9s de una red descentralizada. Sus caracter\xedsticas incluyen el cifrado de extremo a extremo, la mensajer\xeda persistente/ef\xedmera y el descubrimiento eficiente de pares, proporcionando una base para la comunicaci\xf3n segura y fiable.\\n\\nWaku funciona dentro de una topolog\xeda entre pares, creando una red descentralizada que frustra la censura y proporciona resistencia a la vigilancia. Su dise\xf1o permite la escalabilidad, con capacidad para millones de usuarios. Est\xe1 dise\xf1ado para ser el sucesor de Whisper, la capa de mensajer\xeda del conjunto de protocolos P2P de la cadena de bloques Ethereum, y lo supera en escalabilidad y eficiencia de recursos.\\n\\nLa arquitectura de Waku se basa en tres dominios de interacci\xf3n de red distintos: cotilleo, descubrimiento y solicitud/respuesta. Aunque Waku es un todo cohesivo en t\xe9rminos de capacidades, abarca tres clientes principales dise\xf1ados para diferentes entornos y varios SDK, incluidos Rust, React Native, Kotlin y Swift.\\n\\n\\n\\n* nwaku: La implementaci\xf3n de referencia en Nim.\\n* go-waku: Adaptado para la integraci\xf3n nativa con aplicaciones Golang.\\n* js-waku: Una implementaci\xf3n de JavaScript optimizada para entornos de navegador.\\n\\nWaku consta de m\xfaltiples protocolos, cada uno de los cuales cumple una funci\xf3n espec\xedfica dentro de la red. Incluyen, entre otros\\n\\n\\n\\n* Waku Relay: La columna vertebral de la red Waku, que emplea un enfoque pub/sub a la mensajer\xeda peer-to-peer. Hace hincapi\xe9 en la privacidad, la resistencia a la censura y la seguridad, ampliando el protocolo libp2p GossipSub.\\n* Waku Filter: Versi\xf3n ligera del protocolo de retransmisi\xf3n dise\xf1ada para dispositivos con recursos limitados. Permite a los nodos ligeros recibir mensajes espec\xedficos de inter\xe9s de los nodos completos.\\n* Waku Store: Facilita la recuperaci\xf3n de mensajes para los dispositivos que no pueden participar en la red Waku Relay mientras est\xe1n desconectados.\\n* Waku Light Push: Un protocolo de solicitud/respuesta que permite a los nodos con ventanas de conexi\xf3n cortas o ancho de banda limitado publicar mensajes en la red Waku.\\n\\n\\nComprender la arquitectura y los protocolos de Waku sienta las bases para proceder a implementaciones pr\xe1cticas.\\n\\n**Casos de uso de Waku**\\n\\nLa vers\xe1til arquitectura y capacidades de Waku son relevantes en una gran variedad de escenarios del mundo real en los que la comunicaci\xf3n segura y descentralizada es primordial. Ya se trate de facilitar conversaciones privadas entre usuarios, permitir el intercambio de datos entre dispositivos o soportar la comunicaci\xf3n entre nodos dentro de una red, Waku emerge como una soluci\xf3n robusta.\\n\\n\\n\\n* Comunicaci\xf3n centrada en la privacidad\\n\\nEl \xe9nfasis de Waku en la privacidad lo convierte en una opci\xf3n ideal para escenarios en los que salvaguardar la informaci\xf3n del usuario es de suma importancia. En aplicaciones que tratan con datos sensibles o conversaciones confidenciales, el cifrado de extremo a extremo de Waku y su arquitectura descentralizada proporcionan un entorno seguro, mitigando los riesgos asociados a las plataformas de comunicaci\xf3n centralizadas.\\n\\n\\n\\n* Mensajer\xeda resistente a la censura\\n\\nWaku ofrece una luz de esperanza para la comunicaci\xf3n sin restricciones en regiones donde prevalece la censura en Internet. Su topolog\xeda peer-to-peer impide que las autoridades centralizadas controlen o supervisen el tr\xe1fico de mensajer\xeda, garantizando que los usuarios puedan comunicarse libremente sin temor a la censura. Esto hace que Waku sea especialmente valioso para promover la libertad de expresi\xf3n y apoyar canales de comunicaci\xf3n abiertos.\\n\\n\\n\\n* Uso en dApps para comunicaci\xf3n descentralizada\\n\\nLas aplicaciones descentralizadas (dApps) forman un ecosistema floreciente en el que Waku puede desempe\xf1ar un papel fundamental. La integraci\xf3n de Waku en las dApps mejora las funcionalidades de comunicaci\xf3n, permitiendo interacciones en tiempo real entre los usuarios mientras se mantiene el esp\xedritu descentralizado. Esto resulta especialmente valioso en escenarios como las plataformas colaborativas, las redes sociales o cualquier aplicaci\xf3n en la que la participaci\xf3n y comunicaci\xf3n de los usuarios sean componentes centrales.\\n\\nAl explorar las caracter\xedsticas y capacidades de Waku, se hace evidente que la aplicabilidad de Waku va m\xe1s all\xe1 de las ventajas te\xf3ricas, encontrando aplicaci\xf3n pr\xe1ctica en diversas \xe1reas.\\n\\n**Creaci\xf3n de una dApp con Waku y Vue.js**\\n\\nLos sistemas de sondeo a menudo se enfrentan a retos relacionados con la centralizaci\xf3n, las preocupaciones por la privacidad y la susceptibilidad a la manipulaci\xf3n. Mediante la integraci\xf3n de Waku y Vue.js, podemos hacer frente a estos desaf\xedos, creando una aplicaci\xf3n de votaci\xf3n descentralizada que aprovecha el poder de la comunicaci\xf3n peer-to-peer.\\n\\nAqu\xed est\xe1 el c\xf3digo fuente completo de aplicaci\xf3n de votaci\xf3n en GitHub: [https://github.com/wolz-CODElife/waku-vue-poll](https://github.com/wolz-CODElife/waku-vue-poll) y [la aplicaci\xf3n en vivo](https://waku-vue-poll.vercel.app/) est\xe1 alojada en Vercel.\\n\\n\\nHerramientas de desarrollo utilizadas: \\n\\n\\n\\n* **Vite:** Para arrancar la aplicaci\xf3n Vue3 con la plantilla Tailwind.\\n* **Vue 3:** Para construir la interfaz de usuario.\\n* **TypeScript:** Para la seguridad de tipos y la posibilidad de detectar errores durante la compilaci\xf3n.\\n* **Tailwind CSS:** Para dar estilo a la interfaz de usuario.\\n* **Web3.js:** Para implementar wallet connect.\\n* **Plugin Node Polyfill Webpack**: Para proporcionar polyfills necesarios para emitir eventos Web3.js en el navegador. Dado que Vue3 usa webpack v5, donde los m\xf3dulos polyfill del n\xfacleo de Node fueron eliminados.\\n* **Crypto Hash: **Para generar la direcci\xf3n del usuario, cuando no hay una cartera de crypto disponible.\\n* **Protobufjs:** Para serializar datos de mensajes enviados a trav\xe9s de Waku.\\n* **@waku/sdk: **Para acceder a los m\xe9todos del nodo Waku en JavaScript.\\n\\n**Configuraci\xf3n del entorno de desarrollo**\\n\\nPara configurar tu entorno de desarrollo, aseg\xfarate de que tienes Node v18+, abre una nueva terminal en tu directorio de trabajo y ejecuta el siguiente comando:\\n\\nLo que iniciar\xe1 un di\xe1logo en la terminal, puedes elegir las opciones que te sirvan, o utilizar las mismas opciones que yo utilic\xe9:\\n\\nEsto deber\xeda crear una nueva aplicaci\xf3n Vue en tu directorio de trabajo. Navega a la aplicaci\xf3n, instala las dependencias por defecto e inicia la aplicaci\xf3n usando el siguiente comando:\\n\\nA continuaci\xf3n, queremos crear una estructura de archivos que nos permita separar en componentes las distintas partes de la aplicaci\xf3n. Tu ruta src deber\xeda tener una estructura de archivos como esta:\\n\\n\\n\\nA medida que avancemos iremos actualizando los archivos con el c\xf3digo necesario. En cuanto a assets/3dpoll.jpg si\xe9ntete libre de sustituirlo por cualquier imagen que veas adecuada para tu landing page.\\n\\n**Configuraci\xf3n de Tailwind en Vue.js**\\n\\nPara construir nuestra interfaz de usuario, primero tenemos que instalar y configurar el CSS de Tailwind en Vue 3. Puedes seguir la gu\xeda oficial sobre [Configuraci\xf3n de Tailwind CSS.](https://v2.tailwindcss.com/docs/guides/vue-3-vite#setting-up-tailwind-css)\\n\\n**Configuraci\xf3n de rutas**\\n\\nPara crear m\xfaltiples p\xe1ginas/rutas en la aplicaci\xf3n, tenemos que instalar Vue Router ejecutando el siguiente comando en el terminal:\\n\\nEn esta aplicaci\xf3n, s\xf3lo necesitamos dos rutas: \\"Home\\" y \\"Polls\\", las cuales tenemos dentro de la carpeta src/views. Estas rutas contendr\xe1n el Layout de cada p\xe1gina, y luego podremos definir las rutas en el archivo src/router/index.ts usando el siguiente c\xf3digo:\\n\\nEn el fragmento de c\xf3digo anterior, se define una configuraci\xf3n de enrutador Vue.js. Importamos las funciones y tipos necesarios de \'vue-router\' y el componente Home de @/views/Home.vue.\\n\\nEl array routes contiene definiciones de rutas para los componentes Home y Polls. El enrutador se crea usando las funciones createRouter y createWebHistory, y las rutas que definimos anteriormente.\\n\\nEl componente: () => import(\'../views/Polls.vue\') se utiliza para importar din\xe1micamente el componente \'Polls.vue\'. Se trata de una funcionalidad de Vue.js que permite cargar el componente de forma as\xedncrona cuando es necesario, lo que puede ayudar a mejorar el rendimiento inicial de carga de la p\xe1gina al dividir el c\xf3digo en trozos m\xe1s peque\xf1os.\\n\\nFinalmente, el router se exporta para que podamos acceder a \xe9l en \\"main.ts\\".\\n\\nA continuaci\xf3n, registramos el enrutador en la aplicaci\xf3n Vue incluy\xe9ndolo en el archivo \\"main.ts\\" de la siguiente manera:\\n\\nA continuaci\xf3n, crearemos un Layout para nuestra aplicaci\xf3n con lo siguiente dentro de \\"App.vue\\":\\n\\nEn el c\xf3digo anterior, utilizamos router-view para cargar din\xe1micamente los componentes de la ruta actual en el DOM.\\n\\nInstalaci\xf3n de Waku y sus dependencias\\n\\nPara empezar a utilizar Waku en nuestra aplicaci\xf3n Vue 3, necesitamos instalar @waku/sdk que es una implementaci\xf3n en TypeScript del protocolo Waku dise\xf1ada para entornos de navegador web.\\n\\nPara instalar @waku.sdk ejecuta el siguiente comando en el terminal:\\n\\nTambi\xe9n se recomienda crear una estructura de mensajes para tu aplicaci\xf3n, normalmente los desarrolladores de Waku utilizan [Protocol Buffers](https://protobuf.dev/) por coherencia, interoperabilidad, compatibilidad y tama\xf1o de la carga \xfatil. Para instalar protobufjs, ejecuta el siguiente comando en el terminal:\\n\\n**Implementaci\xf3n de la l\xf3gica Waku**\\n\\nLa aplicaci\xf3n se ejecuta sobre dos l\xf3gicas fundamentales, que son las integraciones de wallet connect y Waku communication. Crearemos dos composables \\"waku.ts\\" y \\"client.ts\\" dentro de src/composables.\\n\\n\\"waku.ts\\" contiene todos los m\xe9todos que nuestra aplicaci\xf3n Vue necesita para interactuar con el protocolo Waku y transmitir mensajes (encuestas) entre los usuarios de la aplicaci\xf3n. Dentro de este archivo, deber\xedas tener el siguiente c\xf3digo:\\n\\nEl c\xf3digo anterior permite la interacci\xf3n con la red Waku, posibilitando la creaci\xf3n y participaci\xf3n en encuestas dentro de una aplicaci\xf3n Vue.\\n\\nEn primer lugar, importamos las funciones necesarias y definimos la estructura de datos utilizando interfaces de TypeScript para establecer un est\xe1ndar para PollOption, PollMessage y Poll. Estas estructuras representan las preguntas y opciones disponibles en una encuesta y la estructura general de una encuesta, respectivamente.\\n\\nSe definen variables reactivas (estado, remitente y sondeos) para realizar un seguimiento del estado de la conexi\xf3n, la informaci\xf3n del remitente y la lista de sondeos. Estas variables ser\xe1n necesarias para actualizar la aplicaci\xf3n Vue en respuesta a los cambios en la red Waku.\\n\\n_F\xedjate en que no hemos hecho que WakuNode o cualquier variable que interact\xfae con la red Waku sea directamente reactiva. Como esto desencadenar\xeda el[ problema #1746 ](https://github.com/waku-org/js-waku/issues/1746)debido a que los nodos Waku son demasiado complejos para que los mecanismos de Vue los manejen, tenemos que mantener la instancia WakuNode fuera del \xe1mbito reactivo de Vue._\\n\\nLa conexi\xf3n WakuNode se establece utilizando la funci\xf3n createLightNode, optimizando el uso de recursos mediante la creaci\xf3n de un nodo ligero de Waku. Este nodo se conecta a la red Waku y espera a que los peers se unan utilizando los protocolos[ LightPush](https://rfc.vac.dev/spec/19/) y [Filter](https://rfc.vac.dev/spec/12/). Hemos definido un[ Content Topic](https://docs.waku.org/learn/concepts/content-topics/)espec\xedfico para esta aplicaci\xf3n para categorizar los mensajes, el cual debe tener el siguiente formato:/{application-name}/{version}/{content-topic-name}/{encoding}. Aseg\xfarate de reemplazar WAKU_CONTENT_TOPIC con tu propio Content Topic. Por otro lado, Protobuf se utiliza para codificar y decodificar mensajes de manera eficiente para adaptarse a la estructura de mensajes PollQuestionWakuMessage.\\n\\nDespu\xe9s de conectarse a la red Waku, el siguiente paso es interactuar. Hemos creado una funci\xf3n llamada useWaku() que encapsula y devuelve todas las variables y m\xe9todos necesarios para interactuar con Waku en toda la aplicaci\xf3n.\\n\\nEn primer lugar, tenemos la funci\xf3n start() que inicia la conexi\xf3n de WakuNode, espera a que los peers se conecten y se suscribe al Content Topic elegido, antes de actualizar el estado del usuario a status.value = \\"connected\\".\\n\\nA continuaci\xf3n, tenemos la funci\xf3n stop() que cancela la suscripci\xf3n al Content Topicy detiene el WakuNode, antes de actualizar el estado del usuario a status.value = \\"not connected\\".\\n\\nA continuaci\xf3n, tenemos la funci\xf3n subscribe() que crea una suscripci\xf3n al Content Topic utilizando Waku Filter, recibe los mensajes de sondeo entrantes, los decodifica y actualiza la lista de sondeos. La funci\xf3n handleSubscriptionResult decodifica los mensajes de sondeo entrantes, comprueba si hay duplicados y actualiza la lista de sondeos de forma apropiada.\\n\\nA continuaci\xf3n, tenemos la funci\xf3n unsubscribe() que desconecta la aplicaci\xf3n del Content Topic.\\n\\nPor \xfaltimo, la funci\xf3n publish() acepta los par\xe1metros necesarios para crear un nuevo mensaje de sondeo y enviarlo codificado a la red Waku mediante el protocolo LightPush.\\n\\n**Implementaci\xf3n de la l\xf3gica wallet connect**\\n\\nLa variable sender en el composable \u201cwaku.ts\u201d guarda la direcci\xf3n de la cartera conectada. Para poder implementar wallet connect, necesitamos primero instalar \u201cWeb3.js\u201d ejecutando el siguiente comando en la terminal:\\n\\nDado que Vue 3 utiliza webpack v5, necesitamos instalar Node Polyfill Webpack Plugin para proporcionar los polyfills necesarios para emitir eventos Web3.js en el navegador. Ejecuta el siguiente comando en la terminal para instalar el plugin Node Polyfill Webpack:\\n\\nLuego incl\xfayelo en \\"vite.config.ts\\" para que tu \\"vite.config.ts\\" se vea as\xed:\\n\\nNotar\xe1s que tambi\xe9n estamos soportando top-level-await, esto es porque estamos instanciando WakuNode en un nivel superior y la compilaci\xf3n de Vite no soporta esto.\\n\\nDentro del \\"client.ts\\" tendremos el siguiente c\xf3digo:\\n\\nEl c\xf3digo anterior permite a los usuarios conectar su cartera de crypto a la aplicaci\xf3n como medio de identificaci\xf3n. En este escenario, utilizamos la direcci\xf3n de la cartera como remitente del sondeo.\\n\\nSin embargo, algunos usuarios pueden no tener carteras y no queremos limitar la aplicaci\xf3n s\xf3lo a los usuarios que tienen carteras de crypto. Para solucionar esto, creamos la funci\xf3n generateUniqueID() para formar un hash aleatorio a partir de la direcci\xf3n navigator.userAgent del navegador del usuario. Luego almacenamos la direcci\xf3n del remitente en localStorage como \\"\'senderWalletAddress\'\\".\\n\\nTambi\xe9n creamos una funci\xf3n disconnectWallet() para eliminar la direcci\xf3n de la cartera del localStorage y detener la ejecuci\xf3n del WakuNode.\\n\\nPara demostrar la propiedad de los sondeos, los usuarios tienen que firmar cada mensaje de sondeo utilizando su cartera, para ello se ejecuta la funci\xf3n signMessage.\\n\\nEl composable useWalletConnect encapsula y devuelve las funciones connectWallet, disconnectWallet y signMessage para que sean accesibles a trav\xe9s de la aplicaci\xf3n.\\n\\n**Construir los componentes de la interfaz de usuario**\\n\\nAhora que tenemos nuestra l\xf3gica, podemos construir la interfaz de usuario para utilizar los datos y m\xe9todos en nuestros composables.\\n\\nTenemos 3 componentes principales en esta aplicaci\xf3n, la NavBar, Home y Polls. Si\xe9ntete libre de crear tu propia interfaz de usuario o utilizar la m\xeda:\\n\\n\\n\\n* [NavBar](https://github.com/wolz-CODElife/waku-vue-poll/blob/master/src/components/NavBar.vue): src/components/NavBar.vue\\n* [Inicio:](https://github.com/wolz-CODElife/waku-vue-poll/blob/master/src/views/Home.vue) src/views/Home.vue\\n* [Encuestas](https://github.com/wolz-CODElife/waku-vue-poll/blob/master/src/views/Polls.vue): src/views/.vue\\n\\n**Creaci\xf3n de encuestas**\\n\\nSi revisas el c\xf3digo de mi componente NavBar, encontrar\xe1s que tenemos una ref llamada poll:\\n\\nEsta referencia es actualizada por el formulario modal, y al enviarlo, activamos la funci\xf3n sendMessage:\\n\\nEn el c\xf3digo anterior, convertimos a string los datos de la encuesta que incluye la pregunta, y las opciones para que podamos publicar la encuesta como un mensaje a Waku. A continuaci\xf3n, creamos un msgid y una marca de tiempo para el mensaje, antes de utilizar la cartera del usuario para firmar el mensaje. Una vez firmado el mensaje, llamamos a la funci\xf3n waku.publish(waku.sender.value, stringifiedMessage) para mandar la actualizaci\xf3n a los usuarios suscritos al Content Topic.\\n\\nVotaci\xf3n en tiempo real y sondeo de resultados\\n\\nEn el componente \\"Poll.vue\\", tenemos una funci\xf3n handleVote():\\n\\nEsta funci\xf3n se activa cuando se pulsa  el bot\xf3n de radio de cualquier opci\xf3n. Esta funci\xf3n recoge el msgid y el selectedOption como par\xe1metros. A continuaci\xf3n, llama a la funci\xf3n subscribe() para obtener la \xfaltima versi\xf3n de las encuestas, antes de actualizar el recuento de votos de una opci\xf3n en la encuesta que tiene el msgid.\\n\\nCreamos una copia reactiva del sondeo para que la actualizaci\xf3n del recuento de votos se refleje aunque cambie el estado. Luego publicamos la copia reactiva, que enviar\xe1 los resultados actualizados de la encuesta a todos los usuarios que est\xe9n suscritos al Content Topic de esta aplicaci\xf3n.\\n\\nPara realizar un seguimiento de las encuestas que un usuario ha votado, almacenamos una matriz \\"votePolls\\" en el localStorage.\\n\\nSi\xe9ntete libre de jugar con la funcionalidad y optimizar el rendimiento para satisfacer las necesidades de tu aplicaci\xf3n.\\n\\n**Resumen del art\xedculo**\\n\\nEn estagu\xeda exhaustiva, nos embarcamos en un viaje para integrar Waku, un protocolo de comunicaci\xf3n descentralizado, en una aplicaci\xf3n Vue.js, creando una dApp de votaci\xf3n en tiempo real. Recapitulemos los puntos claves de la gu\xeda:\\n\\n**Entendiendo Waku**\\n\\n\\n\\n* Exploramos Waku como una familia de protocolos que facilitan las comunicaciones privadas y resistentes a la censura a trav\xe9s de una red descentralizada.\\n* Examinamos las caracter\xedsticas de Waku, su arquitectura y su enfoque en la privacidad, la descentralizaci\xf3n y la adaptabilidad a diversas plataformas.\\n* Analizamos los diferentes componentes de Waku, como Waku Relay, Waku Filter, Waku Store y Waku Light Push.\\n\\n**Casos de uso de Waku**\\n\\n\\n\\n* Analizamos escenarios del mundo real en los que Waku resulta muy valioso, haciendo hincapi\xe9 en su papel en la comunicaci\xf3n centrada en la privacidad, la mensajer\xeda resistente a la censura y la comunicaci\xf3n descentralizada dentro de las dApps.\\n\\n**Creaci\xf3n de una dApp con Waku y Vue.js**\\n\\n\\n\\n* Configuramos una aplicaci\xf3n Vue.js utilizando Vite y Tailwind CSS.\\n* Establecimos una conexi\xf3n a la red Waku, implementamos la autenticaci\xf3n de monedero usando Web3.js, e integramos el @waku/sdk para la comunicaci\xf3n descentralizada.\\n* Demostramos el proceso paso a paso de construir una encuesta de votaci\xf3n en tiempo real, conect\xe1ndonos a la red Waku.\\n\\nAl concluir esta gu\xeda, considera realizar las siguientes acciones para seguir explorando y experimentando con Waku:\\n\\n\\n\\n* **Documentaci\xf3n de Waku:** Visita la[ documentaci\xf3n de Waku ](https://docs.waku.org/)para profundizar en las funcionalidades, protocolos y casos de uso de Waku.\\n* **Experimenta con funcionalidades adicionales:** Ampl\xeda las capacidades de tu dApp experimentando con funcionalidades adicionales proporcionadas por Waku. Explora caracter\xedsticas como mensajer\xeda ef\xedmera, almacenamiento descentralizado y m\xe1s para mejorar sus aplicaciones descentralizadas.\\n* **\xdanete a la Comunidad Waku:** Participa con la comunidad[ Waku](https://waku.org/community/) en foros, redes sociales o canales de desarrolladores. Con\xe9ctate con desarrolladores afines, comparte tus experiencias y manti\xe9nete actualizado sobre los \xfaltimos desarrollos dentro del ecosistema Waku.\\n* **Contribuye a Waku:** Considera la[ posibilidad de contribuir al proyecto Waku](https://waku.org/about/team/) en plataformas como GitHub. Ya sea informando de problemas, enviando pull requests o sugiriendo mejoras, tus contribuciones pueden desempe\xf1ar un papel vital en el crecimiento de este protocolo de comunicaci\xf3n descentralizado"}]}')}}]);