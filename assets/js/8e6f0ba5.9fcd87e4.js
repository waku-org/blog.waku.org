"use strict";(self.webpackChunkblog_waku_org=self.webpackChunkblog_waku_org||[]).push([[5177],{97320:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>r,toc:()=>u});var a=s(87462),n=(s(67294),s(3905));const o={layout:"post",name:"Permissionless Community Creation",title:"Permissionless Community Creation",date:new Date("2024-05-20T00:00:00.000Z"),authors:["amelia","franck"],published:!0,slug:"permissionless-community-creation",categories:"waku",image:"/img/black-waku-logo-with-name.png"},i=void 0,r={permalink:"/permissionless-community-creation",source:"@site/posts/2024-05-20-permissionless-community-creation.mdx",title:"Permissionless Community Creation",description:"An overview of the foundational requirements of permissionless communities and Waku's research on autosharding to enhance decentralisation, privacy, and scalability.",date:"2024-05-20T00:00:00.000Z",formattedDate:"May 20, 2024",tags:[],readingTime:7.67,hasTruncateMarker:!0,authors:[{name:"Amelia Trapp",twitter:"@amelia_trapp",github:"Amelia7689",key:"amelia"},{name:"Franck",twitter:"fryorcraken",github:"fryorcraken",key:"franck"}],frontMatter:{layout:"post",name:"Permissionless Community Creation",title:"Permissionless Community Creation",date:"2024-05-20T00:00:00.000Z",authors:["amelia","franck"],published:!0,slug:"permissionless-community-creation",categories:"waku",image:"/img/black-waku-logo-with-name.png"},nextItem:{title:"Deep Dive Into The Graph: Powered by Waku",permalink:"/thegraph-waku-case-study"}},l={authorsImageUrls:[void 0,void 0]},u=[{value:"Fundamentals of peer-to-peer systems",id:"fundamentals-of-peer-to-peer-systems",level:2},{value:"The federated approach",id:"the-federated-approach",level:2},{value:"Waku&#39;s message routing layer",id:"wakus-message-routing-layer",level:2},{value:"Using static sharding to scale Waku",id:"using-static-sharding-to-scale-waku",level:2},{value:"Future improvements: Autosharding and RLN",id:"future-improvements-autosharding-and-rln",level:2},{value:"Become a part of the Waku ecosystem",id:"become-a-part-of-the-waku-ecosystem",level:2}],c={toc:u};function d(e){let{components:t,...s}=e;return(0,n.kt)("wrapper",(0,a.Z)({},c,s,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"An overview of the foundational requirements of permissionless communities and Waku's research on autosharding to enhance decentralisation, privacy, and scalability."),(0,n.kt)("p",null,"There is no one-size-fits-all approach to building permissionless communities. Indeed, Waku and other projects are still researching the best ways to enable such communities while retaining decentralisation, privacy protection, and censorship resistance. The following blog post will discuss the fundamental requirements of peer-to-peer systems, analysing the strengths and weaknesses of federated models before delving into Waku's cutting-edge research on autosharding and its potential to enable permissionless communities to scale exponentially. "),(0,n.kt)("h2",{id:"fundamentals-of-peer-to-peer-systems"},"Fundamentals of peer-to-peer systems"),(0,n.kt)("p",null,"Peer-to-peer decentralised systems have several core components required to function:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Bootstrapping: a way for a new node to enter the network. ")),(0,n.kt)("p",null,"This process typically involves obtaining a list of node addresses, enabling the new node to connect with existing ones. Various approaches to bootstrapping exist, such as hardcoding the list of addresses into the system's code, utilising a dynamic method, or posting the list on a DNS record. Regardless of the method chosen, bootstrapping is essential for enabling new nodes to join the network."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Peer discovery: a way for nodes in the network to discover other nodes.")),(0,n.kt)("p",null,"Peer discovery mechanisms allow nodes to find and establish connections with peers dynamically. This ensures that the network remains robust and resilient, avoiding bottlenecks that could arise from relying solely on a fixed set of bootstrap nodes. Peer discovery mechanisms vary depending on the specific requirements of the decentralised system but are essential for maintaining the network's integrity and scalability."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Peer-to-peer transport: a way for two nodes to communicate with each other to execute the demands of the network. ")),(0,n.kt)("p",null,"This communication can take various forms, depending on the nature of the decentralised system. For example, in a file-sharing network like BitTorrent, nodes exchange file chunks directly, allowing for efficient transmission of large files. In blockchain networks, nodes communicate by exchanging transactions and blocks, facilitating consensus and maintaining the integrity of the distributed ledger. Peer-to-peer transport could also happen through a broadcast system based on peers congregating around publish-subscribe topics, i.e. a message is published to a topic and broadcast to all peers subscribed to the same topic."),(0,n.kt)("p",null,"These are the building blocks for any decentralised peer-to-peer network. Decentralisation is not an objective in itself but a way to ensure a system is resilient, permissionless, censorship-resistant, and private. The properties discussed are requirements for such a system's foundation, but additional requirements exist."),(0,n.kt)("p",null,"Hence, for a chat protocol to be resilient, permissionless, censorship-resistant and private, the three pillars must be implemented: decentralised bootstrapping, decentralised peer discovery, and unmediated peer-to-peer transport. One example of such a system that does this would be the federated system, Matrix."),(0,n.kt)("h2",{id:"the-federated-approach"},"The federated approach"),(0,n.kt)("p",null,"Federated chat solutions such as Matrix provide the software infrastructure, primarily through clients like Element, enabling any community owner to run or request an operator to run server software. This approach decentralises the hosting of communication servers, allowing for greater autonomy and flexibility within communities. Users connect to specific hosting server instances in the ecosystem to engage with their respective communities. The domain name of the hosting server, such as matrix.org, is included in each user's name, facilitating cross-community and one-to-one chats seamlessly."),(0,n.kt)("p",null,"With a federated approach, there is a lack of participation and sender anonymity due to the localised centralisation around communication servers. The servers can log users' IP addresses, and observant parties can track user connections to such servers. Since users connect directly to their community servers to send messages, these servers may link IP addresses with message metadata."),(0,n.kt)("p",null,"Such a topology is also vulnerable to censorship; if a user's home server instance goes offline, they will experience service interruption. Moreover, if authorities seize the domain name, the entire community hosted on that server will be affected."),(0,n.kt)("p",null,"While federated systems usually have a permissionless approach, anyone is able to run and host server software and each separate instance is a centralised system in itself. This comes with a number of drawbacks in terms of privacy and de-platforming risk both for end users and server administrators."),(0,n.kt)("p",null,"A strategy can be implemented to enable users to back up their data on an alternative instance, but this usually does not help with privacy and only postpones the issue of censorship resistance. In other words, there is no easy path to solving those problems without changing the entire message routing layer."),(0,n.kt)("h2",{id:"wakus-message-routing-layer"},"Waku's message routing layer"),(0,n.kt)("p",null,"To solve privacy and censorship-resistance issues, Waku uses GossipSub as a message routing protocol."),(0,n.kt)("p",null,"Nodes in the network connect to each other and forward messages they receive from peers. Contrary to FloodSub, used by Whisper, GossipSub only forwards messages to a small set of nodes (the recommended number of nodes for Waku is four), meaning that while there is some amplification, it is limited to save bandwidth."),(0,n.kt)("p",null,"As long as the metadata on each message is limited, it becomes difficult for an observer to find the sender of a particular message in this model. Moreover, as all nodes in the GossipSub network receive all messages, the recipient can also benefit from anonymity."),(0,n.kt)("h2",{id:"using-static-sharding-to-scale-waku"},"Using static sharding to scale Waku"),(0,n.kt)("p",null,"A common message routing layer does not scale as the nodes receive every message. This could function for up to thousands of users, but beyond this, the bandwidth demand for each node would likely exceed the average household bandwidth. Excluding nodes with lower bandwidth from the network would then impact the decentralisation of the routing network."),(0,n.kt)("p",null,"Instead of having one relay network, Waku sharding splits the message routing network into several GossipSub topics so that the end user is not required to relay all of the applications' traffic but rather just the subset of traffic on the same shard. "),(0,n.kt)("p",null,"With static sharding, the logic for dispatching messages on the correct shard is naive: a community or application is assigned a shard, and each shard is used by only one application or community. To provide some basic DoS protection, the application or community owner distributes a private key to all members or users, which they use to sign messages."),(0,n.kt)("p",null,"This enables nodes in the shard to only relay messages from legitimate publishers (i.e. members of the community) while preserving some anonymity properties. Senders cannot be identified by their signatures, as all senders use the same private key."),(0,n.kt)("p",null,"However, the current implementation of static sharding faces several challenges regarding privacy, censorship resistance and permissionless participation."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Bootstrapping ")),(0,n.kt)("p",null,"While passing multiple bootstrap node lists with several FQDNs to a Waku node is possible, further research is needed to enable truly decentralised bootstrapping. "),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Peer discovery dynamics")),(0,n.kt)("p",null,"Waku leverages discv5 for peer discovery, a decentralised solution that enables privacy and censorship-resistance. However, decentralised discovery of capability, such as finding nodes with specific protocols like store and filter, is an area that needs improvement."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Peer-to-peer transport considerations")),(0,n.kt)("p",null,"The current approach for providing predictable scalability per Status Community is to statically assign an individual shard to each community; no shard would be assigned to multiple communities. This implies a shard assignment process, which poses a hurdle. Overall, Waku's implementation has validated our assumptions that static sharding provides a useful stepping stone to an architecture where communities share shards. The approach includes features such as autosharding, enabling multiple communities to use the same set of shards without needing to consider shard assignments. Additionally, RLN will be implemented to provide DoS protection on the shared shards. It also validates our assumptions about discv5 in the context of shards and capabilities."),(0,n.kt)("h2",{id:"future-improvements-autosharding-and-rln"},"Future improvements: Autosharding and RLN"),(0,n.kt)("p",null,"Static sharding on Waku is being rolled out to around 100 communities, with predictable scalability per community. The team is researching several sharding strategies to scale the rollout to more communities by enabling the sharing of shards, including autosharding and ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/vacp2p/rfc-index"},"rate limit nullifiers")," (RLN). "),(0,n.kt)("p",null,"Autosharding will help abstract routing and sharding decisions away from communities and applications while providing an easy way for communities to share a bounded number of shards. This will allow the network to maintain a manageable number of shards, ideally under 100. Our research indicates the network can accommodate unlimited communities as long as the total user count remains below 1 million. New research will be necessary to extend discv5 or explore alternative systems for scalability beyond this threshold."),(0,n.kt)("p",null,"It is important to note that as a new technology, Waku's reliance on RLN introduces some risk. However, the Waku team is committed to hardening RLN and fostering its adoption by other projects and users, thus mitigating this concern over time."),(0,n.kt)("h2",{id:"become-a-part-of-the-waku-ecosystem"},"Become a part of the Waku ecosystem"),(0,n.kt)("p",null,"The Waku research team made significant discoveries during their dogfooding of the Wau network. RLN provides DoS protections that do not compromise privacy or censorship resistance and can enable permissionless communities to scale to millions of users. "),(0,n.kt)("p",null,"To integrate Waku into your application, check the table below for the necessary links. You can always get further support from us on ",(0,n.kt)("a",{parentName:"p",href:"discord.waku.org"},"Discord"),"."),(0,n.kt)("table",null,(0,n.kt)("tr",null,(0,n.kt)("td",null),(0,n.kt)("td",null,(0,n.kt)("strong",null,"Integrate Waku into your application"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"docs"),(0,n.kt)("td",null,(0,n.kt)("a",{href:"https://docs.waku.org/"},"https://docs.waku.org"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"nwaku"),(0,n.kt)("td",null,(0,n.kt)("a",{href:"https://github.com/waku-org/nwaku"},"https://github.com/waku-org/nwaku"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"browser (JS/TS)"),(0,n.kt)("td",null,(0,n.kt)("a",{href:"https://github.com/waku-org/js-waku"},"https://github.com/waku-org/js-waku"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"Go"),(0,n.kt)("td",null,(0,n.kt)("a",{href:"https://github.com/waku-org/go-waku"},"https://github.com/waku-org/go-waku"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"Rust"),(0,n.kt)("td",null,(0,n.kt)("a",{href:"https://github.com/waku-org/waku-rust-bindings"},"https://github.com/waku-org/waku-rust-bindings")))))}d.isMDXComponent=!0},3905:(e,t,s)=>{s.d(t,{Zo:()=>c,kt:()=>p});var a=s(67294);function n(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}function o(e,t){var s=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),s.push.apply(s,a)}return s}function i(e){for(var t=1;t<arguments.length;t++){var s=null!=arguments[t]?arguments[t]:{};t%2?o(Object(s),!0).forEach((function(t){n(e,t,s[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(s)):o(Object(s)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(s,t))}))}return e}function r(e,t){if(null==e)return{};var s,a,n=function(e,t){if(null==e)return{};var s,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)s=o[a],t.indexOf(s)>=0||(n[s]=e[s]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)s=o[a],t.indexOf(s)>=0||Object.prototype.propertyIsEnumerable.call(e,s)&&(n[s]=e[s])}return n}var l=a.createContext({}),u=function(e){var t=a.useContext(l),s=t;return e&&(s="function"==typeof e?e(t):i(i({},t),e)),s},c=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var s=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),h=u(s),p=n,m=h["".concat(l,".").concat(p)]||h[p]||d[p]||o;return s?a.createElement(m,i(i({ref:t},c),{},{components:s})):a.createElement(m,i({ref:t},c))}));function p(e,t){var s=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=s.length,i=new Array(o);i[0]=h;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r.mdxType="string"==typeof e?e:n,i[1]=r;for(var u=2;u<o;u++)i[u]=s[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,s)}h.displayName="MDXCreateElement"}}]);