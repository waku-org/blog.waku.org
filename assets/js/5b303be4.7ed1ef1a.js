"use strict";(self.webpackChunkblog_waku_org=self.webpackChunkblog_waku_org||[]).push([[822],{10711:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"january-ecodev","metadata":{"permalink":"/january-ecodev","source":"@site/posts/2024-02-01-january-ecodev.mdx","title":"January EcoDev Roundup","description":"Updates from the EcoDev team in January 2024, plus highlights from the first Waku community call.","date":"2024-02-01T00:00:00.000Z","formattedDate":"February 1, 2024","tags":[],"readingTime":6.22,"hasTruncateMarker":true,"authors":[{"name":"Amelia Trapp","twitter":"@amelia_trapp","github":"Amelia7689","key":"amelia"}],"frontMatter":{"layout":"post","name":"January EcoDev Roundup","title":"January EcoDev Roundup","date":"2024-02-01T00:00:00.000Z","authors":["amelia"],"published":true,"slug":"january-ecodev","categories":"waku, progress","image":"/img/black-waku-logo-with-name.png","hide_table_of_contents":false},"nextItem":{"title":"Building a Tic-Tac-Toe Game with Waku","permalink":"/tictactoe-tutorial"}},"content":"Updates from the EcoDev team in January 2024, plus highlights from the first Waku community call. \\n\\n\x3c!--truncate--\x3e\\n\\nThe EcoDev team at Waku covers community, growth, partnerships, and communications. Each month, we will share the key highlights and progress of the team. You can [subscribe](https://waku.org/subscribe/) to the monthly newsletter if you prefer to receive an abridged version of these updates in your inbox. \\n\\n\\n## Events and Hackathons\\n\\nIn 2023, Waku participated in three hackathons and eight events across four continents. We are gearing up for another year full of events; expect to see us all around the globe once again. Waku will be attending two key in-person events in Q1 2024. We will focus on growing the developer community and meeting with projects to support further integrations with Waku.\\n\\n**ETHDenver 23rd February - 3rd March**\\n\\nMeet the Waku team attending ETHDenver: Aaron Bendesrky, Waku Program Manager at Logos, Pedro Lains, Business Development Lead, and Guru T, Developer Relationships Engineer. ETHDenver is a great opportunity to meet the Waku team face to face; attendees can book an appointment with the team [here](https://waku.org/events/eth-denver/).\\n\\n**ETHLatam 13th - 14th March**\\n\\nWaku has $3,500 in bounties on offer during the hackathon. The team on the ground will support the hackers across the two days in building their projects for submission, and we expect to see many more new use cases for Waku.\\n\\nAnybody hosting a side event at ETHDenver or ETHLatam and would like to collaborate with Waku, drop us message on [Discord](https://discord.com/invite/gMPAzmcDER). \\n\\n\\n## Press and Media\\n\\n**Vitalik Buterin Recognises Waku: **This month, Waku received an excellent shout-out from Vitalik Buterin, who recognised Waku as the successor of Whisper, the original peer-to-peer communications protocol for Ethereum. In a [blog post](https://vitalik.eth.limo/general/2023/12/28/cypherpunk.html#ethereum-as-part-of-a-broader-technological-vision), Buterin supported Waku as the realisation of the cypherpunk messaging protocol imagined by Gavin Wood.\\n\\nThe story was also covered in [CoinTelegraph](https://cointelegraph.com/press-releases/vitalik-buterin-recognises-waku-as-the-peer-to-peer-communications-layer-of-gavin-woods-web3-vision), [CryptoDaily](https://cryptodaily.co.uk/2024/01/meet-waku-the-peer-to-peer-communications-protocol-recognized-by-vitalik-buterin), and [The Defiant](https://thedefiant.io/waku-the-p2p-communication-protocol-for-web3-recognized-by-vitalik-buterin). \\n\\n**Waku was voted as a top privacy project of 2023**: Web3 Privacy Now included Waku on their long list of [top privacy-focused projects](https://mirror.xyz/0x0f1F3DAf416B74DB3DE55Eb4D7513a80F4841073/LdOt0mlG_nXqhnmLf7s-X13NDNdpwQw72ESKaJq-0zA) of the year. The finalists were voted on by over 100 privacy enthusiasts, developers, researchers, cryptographers, cypherpunks, and community builders from DarkFi, Nym, Swarm, Logos, Railgun, and many other organisations.\\n\\n\\n## Developer Resources\\n\\n**The Waku React package:** The package provides the components and UI adapters needed to integrate Waku SDK into React applications effortlessly. We developed the package in response to feedback from hackathon participants last year. The documentation, including detailed steps on using the package, [can be found here](https://docs.waku.org/guides/js-waku/use-waku-react/). \\n\\nThere is also a [beginner-friendly tutorial](https://blog.waku.org/tictactoe-tutorial/) for building a simple tic-tac-toe game that can be played by two players who are connected using Waku.\\n\\n**Open Bounties:** We have reviewed and revised the Waku bounties, ensuring that these tasks are beginner-friendly. Our goal is to make it easier for newcomers to Waku to contribute and, in turn, support the growth of the ecosystem. Anyone can work on the bounties at their own pace, as there is no hard cut-off date. When a bounty proposal is approved, it will be marked as \u2018Assigned\u2019. Find the open bountie [here](https://github.com/waku-org/bounties/issues).\\n\\n**Bounty Shipped:** We are excited to announce a recent 1,000 DAI bounty shipped, awarded to Joel Adewole for a [poll app built with Waku and Vue3](https://dev.to/wolzcodelife/build-a-dapp-using-waku-decentralized-communication-and-vuejs-1nnf). The app is a spin-off of the popular platform Kahoot, with short-lived sessions and storage of the poll. Joel\'s documentation is [available on GitHub](https://github.com/wolz-CODElife/waku-vue-poll?tab=readme-ov-file).\\n\\n## Team Updates\\n\\nThe team has expanded this month, with the new EcoDev Team Lead, Marina and a new Business Development Lead, Pedro, joining the team.\\n\\nYou can connect with [Marina](https://twitter.com/Crypto_marina) and [Pedro](https://twitter.com/bigbraincap) on X.\\n\\nIf you are interested in working with Waku, [we are currently hiring a Software Engineer](https://boards.greenhouse.io/waku/jobs/5607301) to work with the Waku Chat SDK. The position is fully remote, and we hire globally. \\n\\n\\n---\\n\\n\\n## Waku Community Call and AMA\\n\\nWaku will host a Community Call on X on the last Friday of each month. The objective of the call is to update the community on our progress and provide a space where questions can be put to the team \\n\\nThe first Community Call took place last week on the 26th of January. You can [listen back to the full Space](https://twitter.com/Waku_org/status/1750927368644919722), and read the highlights below. \\n\\n[Vaclav](https://twitter.com/vpavlin), [Guru](https://twitter.com/hackyguru), and [Aaron](https://twitter.com/vrycmfy) from the Waku team participated in the call. \\n\\n\\n### Waku network updates \\n\\n**Vaclav**: We are very proud to have released the Waku Network Gen 0 in December last year. If you don\'t know what the Waku Network is, it is our attempt to formalise a network of peer-to-peer nodes that would form some network running Waku protocols.  It offers first-of-its-kind privacy-preserving DoS protections for peer-to-peer messaging.\\n\\nIt\'s just the beginning of the Waku Network. We are drafting the [2024 roadmap](https://github.com/waku-org/pm/blob/master/ROADMAP.md ) with the research team, although it\'s still subject to change. There\u2019s also an interesting discussion you can join in the [Vac Forum](https://forum.vac.dev/t/message-validation-marketplace-waku-network-of-networks/262/2).\\n\\nAs part of Generation 0 of Waku Network, we have integrated sharding, ensuring that it\u2019s scalable to thousands of users and that the bandwidth is reasonable for people running on Raspberry Pis or smaller devices with weaker connectivity. Our client targeted at low-resource devices, JSWaku, has been making progress towards fully supporting sharding and, by that, supporting the full Waku Network.\\n\\n\\n### Future incentivisation for running Waku nodes?\\n\\n**Vaclav: **We are often asked about how we incentivise node runners, as well as who is running the nodes and why. There are currently no monetary or token incentives. However, the research team recently [defined the problem](https://github.com/waku-org/research/blob/master/docs/incentivization.md) and is building the first PoC. That\'s very interesting and promising for the future of Waku node operators to get something in return.\\n\\n\\n### Growth of the Waku dev ecosystem\\n\\n**Guru: **We had our first Waku hackathon at ETHRome last year, where 120 hackers participated. We received eight project submissions from EthRome, which was a high number for us as a first-time sponsor. At ETHIstanbul our submissions increased to 20. We closed the year with ETHIndia where we had a huge total of 51 project submissions.\\n\\nThe graph has been trending consistently upwards as more hackers and developers discover Waku. We are exploring ways to offer support to these projects in terms of development, as well as raising funding and grants.\\n\\n\\n### Project integrations with Waku\\n\\n**Guru: **Waku has been integrated into several existing projects already. [Status](https://status.app/), of course, is the original use case for Waku. We\'re in the final stages of collaborating with Status to integrate Waku\'s latest developments.\\n\\n[Railgun](https://www.railgun.org/) has been friends of Waku for a long period of time, and they integrated Waku around a year and a half ago. We also completed an integration with [The Graph](https://thegraph.com/), which uses Waku in its Graphcast SDK to decentralise its indexes.\\n\\n[Silence Laboratories](https://www.silencelaboratories.com/) has also been building a multiparty computation (MPC) on top of Waku.\\n\\n\\n\\n### The meaning behind the name Waku\\n\\n**Vaclav: **The word Waku is Japanese meaning to well up, to gush forth, and to spring out. \\n\\nWaku also has a meaning in Chewa language, a language spoken in Malawi. If we want to use the Chewa language meaning, it\u2019s close to _keep your data local and your communication borderless_, which fits perfectly.\\n\\n\\n---\\n\\nThat is it for this month\u2019s Eco Dev roundup!\\n\\nIf you have questions about what the team has been doing or want to join a like-minded community focused on bringing peer-to-peer communications to millions of users, join the Waku [Discord](https://discord.com/invite/gMPAzmcDER) or follow us on [X](https://twitter.com/Waku_org).\\n\\n[Subscribe](https://waku.org/subscribe/) to the monthly newsletter for these updates directly in your inbox."},{"id":"tictactoe-tutorial","metadata":{"permalink":"/tictactoe-tutorial","source":"@site/posts/2024-01-22-tictactoe-tutorial.mdx","title":"Building a Tic-Tac-Toe Game with Waku","description":"In this beginner-friendly tutorial, we will be building a basic TicTacToe game that can be played by two players who are connected using Waku.","date":"2024-01-22T00:00:00.000Z","formattedDate":"January 22, 2024","tags":[],"readingTime":14.85,"hasTruncateMarker":true,"authors":[{"name":"Guru","twitter":"@hackyguru","github":"hackyguru","key":"guru"}],"frontMatter":{"layout":"post","name":"Building a Tic-Tac-Toe Game with Waku","title":"Building a Tic-Tac-Toe Game with Waku","date":"2024-01-22T00:00:00.000Z","authors":["guru"],"published":true,"slug":"tictactoe-tutorial","categories":"waku, tutorials","image":"/img/tictactoe-tutorial.png","hide_table_of_contents":false},"prevItem":{"title":"January EcoDev Roundup","permalink":"/january-ecodev"},"nextItem":{"title":"Key Learnings from Waku Hackers in 2023","permalink":"/learnings-from-hackers"}},"content":"In this beginner-friendly tutorial, we will be building a basic TicTacToe game that can be played by two players who are connected using Waku.\\n\\n\x3c!--truncate--\x3e\\n\\n![header](/img/tictactoe-tutorial.png)\\n\\n## What is Waku\\n\\nWaku is a family of robust, censorship-resistant, and privacy-preserving communication protocols designed to enable perfomant messaging for web3 apps. When I say \u2018messaging\u2019, this does not restrict Waku\u2019s use cases just to building \u2018text\u2019 messaging apps; Waku can also support other use cases like games, marketplaces, governance tooling, and much more.\\n\\nIf you wish to know more about what Waku offers - check out the [website](https://waku.org) or [developer documentation](https://docs.waku.org).\\n\\n## Why Waku for building a Tic-Tac-Toe game?\\n\\nA Tic-Tac-Toe game is one of the most straightforward project ideas that can be implemented with Waku. This is because it involves just two players and has minimal web3 jargon. Implementing the game is very clear for anyone with prior experience in building with React-based frameworks and some enthusiasm to learn Waku.\\n\\n## Getting started with building\\n\\n### Prerequisites\\n\\n- Some intermediate-level knowledge of React based frameworks (in this tutorial, we use NextJS)\\n- Understanding of Waku\'s architecture\\n- Some coffee to sip along\\n\\n### Wireframing\\n\\nBefore we start, let us visualise the project\'s wireframe for a better understanding: \\n\\n![wireframe](/img/wireframe-ttt.png)\\n\\nThe first screen on the left will be our landing screen with two buttons for starting a new game or joining an existing one. Each of the games in our TicTacToe game will have a `room-id` which two players will be connected to.\\n\\nWaku follows a \'content topic based architecture\', meaning that the messages are routed and stored based on different content topics across the network. In our case, the content topic would be the `room-id` since it maps perfectly. Two players in a game will be connected by publishing on and subscribing to the same content-topic/`room-id`.\\n\\nDo not worry if you need clarification about this - you can figure it out in the next steps as you build the project.\\n\\n### Step 1 : Create a NextJS project\\n\\nKickstarting a new NextJS project is super easy by using the command below:\\n\\n```\\nnpx create-next-app@latest TicTacToe --eslint\\n```\\n\\nMake sure to select `Y` in the command line when you are prompted if you require TailwindCSS. Alternatively, please follow the instructions for installing TailwindCSS in this [link](https://tailwindcss.com/docs/guides/nextjs).\\n\\nOnce you are done, you should be able to run the NextJS app by using the command `npm run dev`\\n\\n### Step 2 : Organising the file structure\\n\\nThe file structure for this project is very easy to setup. Create a folder called `/components` in the root directory of the project. Inside the components folder, create four files: \\n\\n1. `Header.js` : Contains the header component\\n2. `Hero.js` : Screen which appears on the menu asking if you wish to create a new game or join an existing game\\n3. `Loading.js` : Loader component\\n4. `Room.js` : This file will hold all the Waku and game logic\\n\\nApart from the above files, you must create a new folder inside the `/pages` folder with the name `/pages/game`. Inside the game folder, create file called `[id].js` which will be used to navigate a user to a particular game room.\\n\\n\\n### Step 3 : Install the `@waku/react` SDK\\n\\nNow, it is time to install the required libraries for using Waku by using the following command:\\n\\n```\\nnpm install @waku/react @waku/sdk protobufjs\\n```\\n\\nApart from these, we will also need a few more libraries that can be helpful during the next steps : \\n\\n```\\nnpm install short-unique-id copy-to-clipboard\\n```\\n\\n`short-unique-id` will be useful in generating a random unique id for the game room. `copy-to-clipboard` will help us implement a button that can copy the room ID to a user\'s clipboard.\\n\\n### Step 4 : Importing the SDK and initialising the providers\\n\\nInside the `/pages` folder, you can find `_app.js` file, which is the starting point of a NextJS app. We will be initialising our provider here so that the Waku provider will wrap up the entire application.\\n\\nSo, import the following on top of your file :\\n\\n```js\\nimport { LightNodeProvider } from \\"@waku/react\\";\\nimport { Protocols } from \\"@waku/sdk\\";\\n```\\n\\nNow, wrap the components with the `<LightNodeProvider>` as follows : \\n\\n```js\\n    <LightNodeProvider\\n      options={{ defaultBootstrap: true }}\\n      protocols={[Protocols.Store, Protocols.Filter, Protocols.LightPush]}\\n    >\\n      <Component {...pageProps} />\\n    </LightNodeProvider>\\n```\\n\\nThis provider allows the usage of **Store, Filter and LightPush protocols** which will be helpful in implementing all the required functionalities of our game.\\n\\n### Step 5 : Modify the index.js file\\n\\nThe `index.js` file inside the `/pages` folder renders the index route of the application. Let\'s make it display our components Header and Hero respectively,\\n\\n```js \\nimport Head from \'next/head\'\\nimport Hero from \'@/components/Hero\'\\nimport Header from \'@/components/Header\'\\n\\n\\nexport default function Home() {\\n  \\n  return (\\n    <>\\n      <Head>\\n        <title>Tic Tac Toe</title>\\n        <meta name=\\"description\\" content=\\"Tic Tac Toe game created with Waku\\" />\\n        <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1\\" />\\n        <link rel=\\"icon\\" href=\\"/favicon.ico\\" />\\n      </Head>\\n      <main className=\'bg-black h-screen\'>\\n        <Header />\\n        <Hero />\\n      </main>\\n    </>\\n  )\\n}\\n\\n```\\n\\n### Step 6 : Header component and Hero component\\n\\nThe header component will carry a logo on the left and a button with the link to our Github on the right end:\\n\\n**Header.js**\\n\\n```js\\nimport Link from \'next/link\'\\nimport React from \'react\'\\n\\nexport default function Header() {\\n    return (\\n        <div className=\'flex p-5 justify-between items-center\'>\\n            <Link href=\\"/\\">\\n                <div id=\'logo\'>\\n                    Your-Logo\\n                </div>\\n            </Link>\\n            <a href=\'https://github.com/hackyguru/tictactoe\' className=\'text-white flex space-x-3 items-center cursor-pointer\'>\\n                <p>GitHub</p>\\n            </a>\\n        </div>\\n    )\\n}\\n```\\n\\nRemember to replace \'Your-Logo\' with your application\'s logo.\\n\\n**Hero.js**\\n\\nThe Hero component will allow users to create or join a new game. When a user creates a new game, a unique room ID is generated using the`short-unique-id` package. In case users want to join an existing game, they can enter the room ID to join in.\\n\\n```js\\nimport React, { useState, useEffect } from \'react\';\\nimport Loading from \'./Loading\';\\nimport ShortUniqueId from \'short-unique-id\';\\nimport Router from \'next/router\';\\n\\nexport default function Hero() {\\n  const options = { length: 8 };\\n  const uid = new ShortUniqueId(options);\\n\\n  const [room, setRoom] = useState(null);\\n  const [game, setGame] = useState(null);\\n  const [joinLink, setJoinLink] = useState(\'\');\\n\\n  useEffect(() => {\\n    if (room === null) {\\n      setRoom(uid.rnd());\\n    }\\n  }, []);\\n\\n  if (room === null) {\\n    return <Loading />;\\n  }\\n\\n  const handleNewGameClick = () => {\\n    sessionStorage.setItem(\'roomId\', room);\\n    sessionStorage.setItem(\'player\', \'x\');\\n    Router.push(`/game/${room}`);\\n  };\\n\\n  const handleJoinGameClick = () => {\\n    setGame(\'join\');\\n  };\\n\\n  const handleJoinLinkChange = (e) => {\\n    setJoinLink(e.target.value);\\n  };\\n\\n  const handleJoinButtonClick = () => {\\n    Router.push(`/game/${joinLink}`);\\n  };\\n\\n  const handleGoBackClick = () => {\\n    setGame(null);\\n  };\\n\\n  return (\\n    <section id=\'hero\'>\\n      <div className=\\"mx-auto max-w-screen-xl px-4 lg:flex lg:mt-40 lg:items-center mt-40\\">\\n        <div className=\\"mx-auto max-w-xl text-center\\">\\n          <h1 className=\\"text-3xl sm:text-8xl text-white\\">TicTacToe</h1>\\n          <div className=\'mt-8 sm:text-xl/relaxed text-white opacity-60 flex items-center justify-center\'>\\n            <p>Built with</p>\\n            <img src=\'https://waku.org/theme/image/logo.svg\' />\\n            <a href=\'https://waku.org\' className=\'underline\'>\\n              Waku\\n            </a>\\n          </div>\\n\\n          {game === null && (\\n            <div className=\\"mt-20 flex flex-wrap justify-center gap-4\\">\\n              <button\\n                className=\\"block w-full bg-white px-12 py-3 text-sm font-medium hover:text-white hover:bg-black hover:border-2  hover:border-white focus:outline-none focus:ring  text-black\\"\\n                onClick={handleNewGameClick}\\n              >\\n                New game\\n              </button>\\n              <button\\n                onClick={handleJoinGameClick}\\n                className=\\"block w-full bg-white px-12 py-3 text-sm font-medium hover:text-white hover:bg-black hover:border-2  hover:border-white focus:outline-none focus:ring  text-black\\"\\n              >\\n                Join game\\n              </button>\\n            </div>\\n          )}\\n\\n          {game === \'join\' && (\\n            <div className=\\"mt-20 space-y-4\\">\\n              <input\\n                value={joinLink}\\n                onChange={handleJoinLinkChange}\\n                className=\\"px-3 py-3 border-2 border-white w-full\\"\\n                placeholder=\'Enter the game link\'\\n              />\\n              <div className=\'flex space-x-5 items-center\'>\\n                <button\\n                  onClick={handleJoinButtonClick}\\n                  className=\\"block w-full bg-white px-12 py-3 text-sm font-medium hover:text-white hover:bg-black hover:border-2  hover:border-white focus:outline-none focus:ring  text-black\\"\\n                >\\n                  Join game\\n                </button>\\n                <button\\n                  onClick={handleGoBackClick}\\n                  className=\\"block w-full bg-white px-12 py-3 text-sm font-medium hover:text-white hover:bg-black hover:border-2  hover:border-white focus:outline-none focus:ring text-black\\"\\n                >\\n                  Go back\\n                </button>\\n              </div>\\n            </div>\\n          )}\\n        </div>\\n      </div>\\n    </section>\\n  );\\n}\\n```\\n\\nThe above code leverages common React hooks like `useState() and useEffect()` to keep the app state and react to state changes. Summarising the above code, the state variable `game` will decide if the user wants to join an existing game or create a new game. `ShortUniqueId()` function will be used for generating a room ID if the user wants to create a new game.\\n\\nFor the app\'s simplicity, the user creating the game will always be \'player X\', and the user joining the game will be \'player O\'. The session storage will hold the player as X or O and can be retrieved from the `player` item.\\n\\n### Step 7 : Sending and retrieving messages in `Room.js`\\n\\nThe `Room.js` file will have all the code related to sending and subscribing to the messages in the content topic. This file will also include other miscellaneous stuff like the winning conditions, the player to make a move, finding if an opponent has joined the game and finally, finding the winner.\\n\\nFirstly, let us make all the required imports :\\n\\n```js\\nimport React, { useState, useEffect } from \'react\';\\nimport Link from \'next/link\';\\nimport copy from \'copy-to-clipboard\';\\nimport protobuf from \'protobufjs\';\\nimport {\\n  useWaku,\\n  useContentPair,\\n  useLightPush,\\n  useStoreMessages,\\n  useFilterMessages,\\n} from \'@waku/react\';\\nimport { message } from \'@waku/core\';\\nimport Loading from \'./Loading\';\\n```\\n\\nAfter this , we use a `Protobuff` object to define the structure of the messages like below :\\n\\n```js\\nconst ChatMessage = new protobuf.Type(\'ChatMessage\')\\n  .add(new protobuf.Field(\'timestamp\', 1, \'uint64\'))\\n  .add(new protobuf.Field(\'sender\', 2, \'string\'))\\n  .add(new protobuf.Field(\'message\', 3, \'string\'));\\n```\\n\\nNext, let us set up encoder and decoder:\\n\\n```js\\n  const { decoder, encoder } = useContentPair();\\n```\\n\\nInitializing LightPush, Filter and Store can be done in a very few lines of code :\\n\\n```js\\n  const { messages: storeMessages } = useStoreMessages({\\n    node,\\n    decoder,\\n  });\\n\\n  const { messages: filterMessages } = useFilterMessages({ node, decoder });\\n\\n  const { push } = useLightPush({ node, encoder });\\n```\\n\\n\\nWith all these set up, sending a message into a content topic is completed. Here\'s how your `sendMessage()` function should look like :\\n\\n```js\\n  async function sendMessage(sender, message) {\\n    const protoMessage = ChatMessage.create({\\n      timestamp: Date.now(),\\n      sender,\\n      message,\\n    });\\n\\n    const serialisedMessage = ChatMessage.encode(protoMessage).finish();\\n\\n    const timestamp = new Date();\\n    await push({\\n      payload: serialisedMessage,\\n      timestamp,\\n    });\\n\\n    console.log(\'MESSAGE PUSHED\');\\n  }\\n```\\n\\nTo setup the `decodeMessage()` function, you will have to pass the `wakuMessage` option into the function and use the `ChatMessage.decode()` function with the required parameters. Here\'s the code :\\n\\n```js\\n  function decodeMessage(wakuMessage) {\\n    if (!wakuMessage.payload) return;\\n\\n    const { timestamp, sender, message } = ChatMessage.decode(wakuMessage.payload);\\n\\n    if (!timestamp || !sender || !message) return;\\n\\n    const time = new Date();\\n    time.setTime(Number(timestamp));\\n\\n    return {\\n      message,\\n      timestamp: time,\\n      sender,\\n      timestampInt: wakuMessage.timestamp,\\n    };\\n  }\\n```\\n\\n### Step 8 : Winning conditions and finding the winner with `UseEffect()`\\n\\nWe will use the `useEffect()` hook to retrieve and map the messages from the contentTopic. After this, we also use the winning combinations to find the winner between the two players :\\n\\n```js\\n// Finding if the players have joined the room\\n  useEffect(() => {\\n    if (node !== undefined) {\\n      if (player === false) {\\n        const p =\\n          sessionStorage.getItem(\'roomId\') == props.room && sessionStorage.getItem(\'player\') == \'x\'\\n            ? \'x\'\\n            : \'o\';\\n\\n        setPlayer(p);\\n        if (p === \'o\') {\\n          sendMessage(\'o\', \'joined\');\\n        }\\n      }\\n      setNodeStart(true);\\n    }\\n  }, [node]);\\n\\n// Defining the winning condition and \\n  useEffect(() => {\\n    let messages = storeMessages.concat(filterMessages);\\n\\n    let b = {};\\n    let o = false;\\n\\n    messages = messages.map((message) => decodeMessage(message));\\n\\n    messages.forEach((message) => {\\n      if (message.message === \'joined\') {\\n        o = true;\\n        return;\\n      }\\n      if (message.message === \'winner\') {\\n        return;\\n      }\\n\\n      b = { ...b, [message.message]: message.sender };\\n    });\\n\\n    const winningCombinations = [\\n      [\'1\', \'2\', \'3\'],\\n      [\'4\', \'5\', \'6\'],\\n      [\'7\', \'8\', \'9\'],\\n      [\'1\', \'4\', \'7\'],\\n      [\'2\', \'5\', \'8\'],\\n      [\'3\', \'6\', \'9\'],\\n      [\'1\', \'5\', \'9\'],\\n      [\'3\', \'5\', \'7\'],\\n    ];\\n\\n    let winner = null;\\n    let temp = null;\\n    let winningPattern = null;\\n\\n    winningCombinations.forEach((combination) => {\\n      if (winner !== null) {\\n        return;\\n      }\\n      for (let [i, c] of combination.entries()) {\\n        if (b[c] === undefined) {\\n          temp = null;\\n          break;\\n        } else {\\n          if (temp === null) {\\n            temp = b[c];\\n            continue;\\n          } else {\\n            if (temp === b[c]) {\\n              if (i === 2) {\\n                winner = temp;\\n                winningPattern = combination;\\n              }\\n              continue;\\n            }\\n          }\\n        }\\n      }\\n    });\\n\\n    setWinner(winner);\\n    setWinningPattern(winningPattern);\\n    setOpponentJoined(o);\\n    setBoxes(b);\\n  }, [storeMessages, filterMessages]);\\n```\\n\\nThe game will automatically end if a winning condition is met by one of the users.\\n\\n### Step 9 : Loading component and rendering the boxes\\n\\nThe loading component will be visible if the node is not started or if an opponent player has not joined the room yet.\\n\\n```js\\n  if (!nodeStart || !player || opponentJoined === null) {\\n    return <Loading />;\\n  }\\n```\\n\\nHere\'s the code for `Loading.js` component :\\n\\n```js\\nimport React from \'react\'\\n\\nexport default function Loading() {\\n    return (\\n        <div className=\'h-screen bg-black flex items-center w-full justify-center\'>\\n            <svg width=\\"60\\" height=\\"60\\" viewBox=\\"0 0 24 24\\" xmlns=\\"http://www.w3.org/2000/svg\\">\\n                <g fill=\\"none\\" stroke=\\"#ffffff\\" stroke-linecap=\\"round\\" stroke-width=\\"2\\">\\n                    <path stroke-dasharray=\\"60\\" stroke-dashoffset=\\"60\\" stroke-opacity=\\".3\\" d=\\"M12 3C16.9706 3 21 7.02944 21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3Z\\">\\n                        <animate fill=\\"freeze\\" attributeName=\\"stroke-dashoffset\\" dur=\\"1.3s\\" values=\\"60;0\\" />\\n                    </path>\\n                    <path stroke-dasharray=\\"15\\" stroke-dashoffset=\\"15\\" d=\\"M12 3C16.9706 3 21 7.02944 21 12\\">\\n                        <animate fill=\\"freeze\\" attributeName=\\"stroke-dashoffset\\" dur=\\"0.3s\\" values=\\"15;0\\" />\\n                        <animateTransform attributeName=\\"transform\\" dur=\\"1.5s\\" repeatCount=\\"indefinite\\" type=\\"rotate\\" values=\\"0 12 12;360 12 12\\" />\\n                    </path>\\n                </g>\\n            </svg>\\n            \\n        </div>\\n    )\\n}\\n\\n```\\n\\nAfter you are done setting up the loading component, it\'s time to write a function that will handle rendering the boxes. This function will be used as an `onClick` handler that will send either `x` or `o` based on the player who clicks the box. It will also render the boxes with `x` or `o` based on the player who has clicked the box previously. Here\'s the function :\\n\\n```js\\n  function renderBoxes() {\\n    let boxElements = [];\\n    for (let i = 1; i < 10; i += 1) {\\n      if (boxes[i] === undefined) {\\n        boxElements.push(\\n          <div\\n            onClick={() => handlePlay(i.toString())}\\n            className=\'w-20 h-20 border-2 border-white flex items-center justify-center text-2xl text-white\'\\n          ></div>\\n        );\\n      } else {\\n        if (boxes[i] === \'x\') {\\n          boxElements.push(\\n            <div className=\'w-20 h-20 border-2 border-white flex items-center justify-center text-2xl text-white\'>\\n              X\\n            </div>\\n          );\\n        } else {\\n          boxElements.push(\\n            <div className=\'w-20 h-20 border-2 border-white flex items-center justify-center text-2xl text-white\'>\\n              O\\n            </div>\\n          );\\n        }\\n      }\\n    }\\n    return <div id=\'tiles\' className=\'grid grid-cols-3 grid-rows-3 gap-3 mt-10\'>{boxElements}</div>;\\n  }\\n```\\n\\nThe above `renderBoxes()` function will render only the box grid. We also need some prompts to mention which user should be playing their move (X or Y) and also announce the winner. For this, here\'s a simple UI that you can return in the Room function :\\n\\n```js\\n    <section id=\'room\'>\\n      <div className=\'flex justify-end mr-5 text-white space-x-5 items-center\'>\\n        <p>Waku status : active</p>\\n\\n        <svg width=\'20\' height=\'20\' viewBox=\'0 0 48 48\' xmlns=\'http://www.w3.org/2000/svg\'>\\n          <g fill=\'none\' stroke=\'currentColor\' strokeWidth=\'4\'>\\n            <path d=\'M13.5 39.37A16.927 16.927 0 0 0 24 43c3.963 0 7.61-1.356 10.5-3.63M19 9.747C12.051 11.882 7 18.351 7 26c0 1.925.32 3.775.91 5.5M29 9.747C35.949 11.882 41 18.351 41 26c0 1.925-.32 3.775-.91 5.5\' />\\n            <path strokeLinecap=\'round\' strokeLinejoin=\'round\' d=\'M43 36c0 1.342-.528 2.56-1.388 3.458A5 5 0 1 1 43 36Zm-28 0c0 1.342-.528 2.56-1.388 3.458A5 5 0 1 1 15 36ZM29 9c0 1.342-.528 2.56-1.388 3.458A5 5 0 1 1 29 9Z\' />\\n          </g>\\n        </svg>\\n        <p>Peers : {node?.libp2p?.getPeers()?.length ?? \'-\'}</p>\\n      </div>\\n\\n      <div className=\'mx-auto max-w-screen-xl px-4 mt-20 lg:flex lg:h-mt-40 lg:items-center\'>\\n        <div className=\'mx-auto max-w-xl\'>\\n          <div className=\'flex space-x-2 text-white opacity-60 mb-5 items-center\'>\\n            <Link href=\'/\'>\\n              <svg width=\'20\' height=\'20\' viewBox=\'0 0 1024 1024\' xmlns=\'http://www.w3.org/2000/svg\'>\\n                <path fill=\'currentColor\' d=\'M224 480h640a32 32 0 1 1 0 64H224a32 32 0 0 1 0-64z\' />\\n                <path\\n                  fill=\'currentColor\'\\n                  d=\'m237.248 512l265.408 265.344a32 32 0 0 1-45.312 45.312l-288-288a32 32 0 0 1 0-45.312l288-288a32 32 0 1 1 45.312 45.312L237.248 512z\'\\n                />\\n              </svg>\\n            </Link>\\n            <p>Game URL</p>\\n          </div>\\n          <div className=\'px-3 py-3 text-center flex border-2 border-white text-white underline items-center justify-between\'>\\n            <p>https://waku-xo.vercel.app/game/{props.room}</p>\\n            <button onClick={() => copy(`https://waku-xo.vercel.app/game/${props.room}`)}>\\n              <svg width=\'20\' height=\'20\' viewBox=\'0 0 256 256\' xmlns=\'http://www.w3.org/2000/svg\'>\\n                <path\\n                  fill=\'currentColor\'\\n                  d=\'M216 32H88a8 8 0 0 0-8 8v40H40a8 8 0 0 0-8 8v128a8 8 0 0 0 8 8h128a8 8 0 0 0 8-8v-40h40a8 8 0 0 0 8-8V40a8 8 0 0 0-8-8Zm-56 176H48V96h112Zm48-48h-32V88a8 8 0 0 0-8-8H96V48h112Z\'\\n                />\\n              </svg>\\n            </button>\\n          </div>\\n\\n          <h1 className=\'text-3xl sm:text-4xl text-white mt-20\'>\\n            {!opponentJoined && \'Waiting for opponent to join\'}\\n            {winner == null &&\\n              opponentJoined &&\\n              (Object.keys(boxes).length % 2 === 0\\n                ? player === \'x\'\\n                  ? \'Your turn\'\\n                  : \\"Opponent\'s turn\\"\\n                : player === \'o\'\\n                ? \'Your turn\'\\n                : \\"Opponent\'s turn\\")}\\n            {winner != null && (winner === \'x\' ? \'X is winner\' : \'O is winner\')}\\n          </h1>\\n{\\n!winner &&\\n          <div className=\'flex justify-center\'>{renderBoxes()}</div>\\n}\\n        </div>\\n      </div>\\n    </section>\\n```\\n\\n### Step 10 : Rendering the room\\n\\n`Room.js` is quite a big chunk of code, right? But don\'t worry - it is easy to follow up and the final code can be found [here](https://github.com/hackyguru/tictactoe/blob/main/components/Room.js).\\n\\nThere is one final step before our TicTacToe is complete. It is to create the `game/[id].js` page component. This component will render the room based on the `room id` provided on the URL. We use the     `useRouter()` hook to query the room id from the URL and then render the Room component :\\n\\n```js\\n\\nimport Header from \'@/components/Header\'\\nimport Room from \'@/components/Room\'\\nimport React, { useState, useEffect } from \'react\'\\nimport Loading from \'@/components/Loading\';\\nimport { useRouter } from \'next/router\'\\n\\n\\n// Waku imports\\nimport { ContentPairProvider, useWaku } from \\"@waku/react\\";\\n\\n// Misc imports\\nimport ShortUniqueId from \'short-unique-id\';\\n\\nexport default function Game() {\\n\\n    const router = useRouter();\\n    const room = router.query.id;\\n\\n    return (\\n        <>\\n            <ContentPairProvider\\n                contentTopic={\\"/tictactoe/\\" + room}\\n            >\\n                <div className=\'bg-black h-screen\'>\\n                    <Header />\\n                    <Room room={room} />\\n                </div>\\n            </ContentPairProvider>\\n        </>\\n    )\\n}\\n```\\n\\n### What\'s next?\\n\\nI hope that your TicTacToe application with Waku will be up and running now. If you are still stuck at part of the above 10 steps, please refer to our [example repository](https://github.com/hackyguru/tictactoe) now. You can also try out the TicTacToe game in [this link](https://waku-xo.vercel.app).\\n\\nPlease note that this is a very basic demonstration of using Waku\'s react hooks to build a TicTacToe game. The game still needs a lot of improvements in terms of handling the connection, establishing the winning , etc.\\n\\nHere are some ideas for you to include in the future: \\n\\n- adding P2E (Play to Earn) mechanisms where users can connect their wallet, stake some crypto and then the winner gets the stake.\\n\\n- adding names for players\\n\\n- minting an NFT for the winner once a game is over\\n\\nWith Waku, the possibilities are limitless. Go ahead and start building! If you have any questions, feel free to drop us a messafe in our support channel on the [Waku discord community](https://discord.waku.org)."},{"id":"learnings-from-hackers","metadata":{"permalink":"/learnings-from-hackers","source":"@site/posts/key-learnings-from-waku-hackers-in-2023.mdx","title":"Key Learnings from Waku Hackers in 2023","description":"A review of the key learnings from Waku hackathon participants this year and what we are doing to improve developers\' experience.","date":"2023-12-20T00:00:00.000Z","formattedDate":"December 20, 2023","tags":[],"readingTime":6.995,"hasTruncateMarker":true,"authors":[{"name":"Amelia Trapp","twitter":"@amelia_trapp","github":"Amelia7689","key":"amelia"}],"frontMatter":{"layout":"post","name":"Key Learnings from Waku Hackers in 2023","title":"Key Learnings from Waku Hackers in 2023","date":"2023-12-20T00:00:00.000Z","authors":"amelia","published":null,"slug":"learnings-from-hackers","image":"/img/black-waku-logo-with-name.png"},"prevItem":{"title":"Building a Tic-Tac-Toe Game with Waku","permalink":"/tictactoe-tutorial"},"nextItem":{"title":"The Waku Roadmap","permalink":"/waku-roadmap"}},"content":"A review of the key learnings from Waku hackathon participants this year and what we are doing to improve developers\' experience. \\n\\n\x3c!--truncate--\x3e\\n\\n---\\n\\n2023 has been an incredible year for Waku. We attended eight events across four continents, participated in three ETHGlobal hackathons, and hosted the first Waku Hacker House. It has been amazing to see the growth of the developer community on Waku, and we want to make sure that next year it will be even easier to onboard new hackers and developers.\\n\\nWe recently held an X Space where we invited the winning projects from the ETHRome hackathon to tell us what they like about Waku, what worked well while using Waku, and where they saw areas for improvement. Below, you will find some of the key insights from the hackers and learn how their feedback is informing improvements around Waku documentation and the greater developer experience. \\n\\n[V\xe1clav](https://twitter.com/vpavlin), [Aaron](https://twitter.com/vrycmfy), and [Guru](https://twitter.com/hackyguru) represented the Waku team on the Space. We were also joined by participants from the winning ETHRome teams [Feka](https://twitter.com/Feka_7heaven), [mrnmrc.eth](https://twitter.com/mrnmrceth), [Martin](https://twitter.com/martinlecl), [R\xe9gis](https://twitter.com/Rgis295478), [Florian](https://twitter.com/floriantruchot), and [Mattia](https://twitter.com/Mattia).  \\n\\n<blockquote class=\\"twitter-tweet\\"><p lang=\\"zxx\\" dir=\\"ltr\\"><a href=\\"https://t.co/3hJv115Sg2\\">https://t.co/3hJv115Sg2</a></p>&mdash; Waku (@Waku_org) <a href=\\"https://twitter.com/Waku_org/status/1722659158816612463?ref_src=twsrc%5Etfw\\">November 9, 2023</a></blockquote> <script async src=\\"https://platform.twitter.com/widgets.js\\" charset=\\"utf-8\\"><\/script>\\n\\n\\n## \u201cBlockchain seems like the default way to do decentralised things, but in the end, it\'s not the only one\u201d - Mattia\\n\\nBy not executing transactions on a blockchain, Waku protocols benefit from decentralisation and speed without requiring gas fee payments. \\n\\nMattia praised the seamless interoperability enabled by Waku\u2019s platform-agnostic nature, allowing his team and all the hackers at the event to use the protocols on any platform or blockchain without restrictions. He noted that this helps to eliminate silos between chains, which is a key issue in web3. We believe this platform-agnostic characteristic will help Waku become the standard for communication in web3. \\n\\n\\n## Top tip for hackers: What we mean when we say \u201cno more chat apps\u201d\\n\\nAs you may have noticed, during Waku\u2019s recent hackathon, we requested that participants not submit \u2018standard chat apps\u2019. If you are wondering why, many of these are already in the ecosystem and we want to encourage hackers to find new use cases that can add value to users. Building a chat protocol with the proper security parameters to protect its users during a hackathon is also highly challenging. Chat apps refer to person-to-person messaging apps, such as Telegram. But much of the functionality within Waku revolves around chat-like interactions. As Guru and V\xe1clav noted, in essence, Waku activities are akin to a chat interface, albeit one that transcends traditional UI constraints. Even sophisticated applications, such as that submitted by Mattia\'s team, are interactions between Waku nodes, where the data could range from simple text to more complex data like GPS locations.\\n\\nWhether it is interactions between humans or machines, the core principle remains a form of chat. Within the Waku ecosystem, users essentially engage in a dialogue, either issuing commands to nodes for execution or communicating with AI services, which then carry out tasks based on predefined transactions. Hackers require creativity to transform these interactions into something truly exciting. \\n\\n\\n## Issues with Waku documentation and what we are doing about it\\n\\nMatija shared that his team had difficulties when it came to implementing encryption, and they had to resort to using asymmetric encryption. They created a public-private key pair and exchanged it between the users. This is not always convenient, especially if there is a group of people involved. It presents a challenge to Waku\u2019s bandwidth constraints to ensure everyone has all of the relevant public keys and then to re-encrypt them. \\n\\nA protocol in Waku called Noise solves this by negotiating a symmetric key pair between users. Multiple teams shared feedback that it was either not easy to locate the correct resources or that it was not easy to use. While we currently have [developer specification](https://rfc.vac.dev/spec/35/) documents for Noise on the Vac research site, based on the hackers\' feedback, we have created more accessible guides around encryption, which will be live very soon on the [Waku Docs](https://docs.waku.org/) site. We will be following this with better Noise protocol guides soon. \\n\\nFederico noted that he and his team found it overwhelming to use Waku for the first time due to its extensive components that did not align with their project requirements. However, they commended the well-written nature of the documentation that provided a solid foundation for their work. In particular, he attested to the quality of the \u2018[getting started](https://docs.waku.org/)\u2019 example. However, he suggested that for hackathon projects, a more streamlined and beginner-friendly example would be beneficial. Additionally, Frederico recommended incorporating examples with popular frameworks like React, as it aligns with the prevalent usage of frameworks in building applications.\\n\\nV\xe1clav acknowledged the limited nature of the current documentation and examples; it is a symptom of Waku\u2019s relative youth and constant evolution. V\xe1clav encouraged community participation by highlighting the existence of the [bounties repository](https://github.com/waku-org/bounties/), where contributors can propose and work on examples aligned with specific frameworks or use cases. This collaborative approach aims to address gaps in documentation and make Waku more accessible to a broader audience.\\n\\nWe are happy to share that since the X Space happened, we have released a [Waku React package](https://docs.waku.org/guides/js-waku/use-waku-react/) based on Federico\'s feedback that provides components and UI adapters to integrate @waku/sdk into React applications effortlessly.\\n\\n\\n## We are improving connection issues by better node incentivisation\\n\\nMartin and Florian shared that their team experienced network connection issues several times during the hackathon, noting that the network was likely overloaded due to the significant number of hackathon participants. Aaron shared his appreciation for the feedback: \u201cWe must be brutally honest if we are going to fix the things that aren\'t easy to work with.\u201d \\n\\nRunning nodes that fully participate in the Waku Relay Network should be encouraged, and [we have been doing so in this Q](https://blog.waku.org/waku-roadmap) by optimising the software and making participation permissionless. With such innovations, the community can benefit from more neutral contributions to the network, hence the backbone of a secure, scalable network, and a more extensive set of nodes to get sender and recipient k-anonymity.\\n\\n\\n## You called for storage\u2026 and it is coming!\\n\\nThe hackers mentioned that using Waku alone without any additional decentralised storage solution limits what they can build during a hackathon\'s time-constrained period. As V\xe1clav noted: \u201cWaku is in general ephemeral, and it should not be used, and it cannot be used for long-term storage.\u201d\\n\\nUntil now, hackers have relied on alternatives such as IPFS and Arweave when they need a decentralised storage element for their projects. However, both options rely on some form of centralised gateways to access external data.\\n\\nThe good news is [Codex](https://codex.storage/) is currently in development and will be able to step in and fill the gap. As the storage layer of the [Logos](logos.co) technology stack, Codex is durable and decentralised. Codex implements protocol constructs that incentivise wide participation of data storage providers, both small and large, thus ensuring a robust network resistant to censorship and external attack. An end-to-end solution with good integration between Waku and Codex will give developers precisely what they need from communications and storage.\\n\\n\\n## \u201cWe\'re on the precipice of something that we\'ve all been waiting for\u201d Aaron\\n\\nAaron took a moment in the Space to remind the community how close Waku is to realising one of the original promises of the Ethereum ecosystem - a decentralised peer-to-peer communications protocol. \\n\\n\u201cWith Waku, we\'re on the precipice of something we\'ve all been waiting for. We cannot lose sight of the tech that props up this entire ecosystem\u2026 In the Ethereum whitepaper, Whisper was outlined as the peer-to-peer communication protocol for the network. Due to one reason or another, Whisper\'s development did not progress in the same way other areas did. Waku boldly is picking up that torch and going forward. And with so many different world events happening, both positive and otherwise, Waku aims to be a tool for all people and machines to be leveraged.\u201d\\n\\nPlease ensure you follow [Waku on X](https://twitter.com/Waku_org) to get updates on the upcoming X Space, scheduled for February. The teams behind the best projects from ETHIstanbul and ETHIndia will join us. \\n\\nWe will be participating in more major hackathons next year, which we hope to see you at, but in the meantime, why not check out our [open bounties](https://github.com/waku-org/bounties/issues)? You are welcome and encouraged to share your feedback with us anytime on [Discord](https://discord.com/invite/gMPAzmcDER)."},{"id":"waku-roadmap","metadata":{"permalink":"/waku-roadmap","source":"@site/posts/2023-11-17-the-waku.roadmap.mdx","title":"The Waku Roadmap","description":"A comprehensive review of the Waku roadmap for H2 2023","date":"2023-11-17T00:00:00.000Z","formattedDate":"November 17, 2023","tags":[],"readingTime":10.07,"hasTruncateMarker":true,"authors":[{"name":"Amelia Trapp","twitter":"@amelia_trapp","github":"Amelia7689","key":"amelia"},{"name":"mf","twitter":"@0x_m_f","github":"DeBelg","key":"mf"}],"frontMatter":{"layout":"post","name":"The Waku Roadmap","title":"The Waku Roadmap","date":"2023-11-17T00:00:00.000Z","authors":["amelia","mf"],"published":true,"slug":"waku-roadmap","categories":"roadmap, waku, progress, milestones","image":"/img/black-waku-logo-with-name.png","hide_table_of_contents":false},"prevItem":{"title":"Key Learnings from Waku Hackers in 2023","permalink":"/learnings-from-hackers"},"nextItem":{"title":"Scaling Waku: A Progress Update","permalink":"/scaling-waku-progress-update"}},"content":"A comprehensive review of the Waku roadmap for H2 2023\\n\\n\x3c!--truncate--\x3e\\n\\n## Background on Waku\\n\\nTo understand why Waku exists, you need only to consider the centralised internet. Technology giants can dictate what we see and with whom we can communicate. The centralised platforms we regularly use to communicate have privileged access to outlandish realms of personal data that powerful commercial and political institutions can leverage. In contrast, [Waku](https://waku.org/) empowers internet users to circumvent these actions, offering a decentralised, open-source suite of privacy-preserving, peer-to-peer messaging protocols. The protocols are designed to flourish in resource-restricted environments to be accessible to people across the globe and can run on phones, servers, or browsers. Waku can be used for general messaging with humans, machines, or a hybrid situation.\\n\\nWe apply [Waku Relay](https://hackmd.io/@vac/main/%2FYYlZYBCURFyO_ZG1EiteWg#11WAKU2-RELAY-gossipsub) on top of the gossip protocol [GossipSub](https://docs.libp2p.io/concepts/pubsub/overview/) from libp2p to route messages and information with a subset of connected peers, increasing security and privacy. A gossip protocol is a peer-to-peer protocol in which nodes periodically exchange information about themselves and other associated nodes. Currently, it is possible to use the Waku Network and join a public gossipsub network in a permissionless manner. Some projects using Waku that opt to do this include [Status Desktop and Mobile](https://status.app/), [Railgun](https://docs.railgun.org/wiki/learn/privacy-system/community-relayers), and [TheGraph](https://docs.graphops.xyz/graphcast/design-principles).\\n\\n\\n## Achievements in H1 2023\\n\\nOne of the critical limitations of Waku is its reliance on a single GossipSub network for all users, which necessitates that each user relay traffic for all applications. As the adoption of Waku continues to grow, the bandwidth consumption skyrockets. Users with limited bandwidth capabilities are marginalised and unable to participate fully in the Waku Relay network. The key focus of the Waku development team in the first half of this year was to resolve some of these limitations around scaling to support the Status app\u2019s goal of serving one million users.\\n\\nWe met our milestone of providing a Waku network that can scale to approximately ten thousand active users within a [Status Community](https://status.app/), primarily thanks to implementing static sharding. Instead of having one relay network, we split the Waku Network into several relay (gossipsub) networks so that the end user is not required to relay the traffic of all applications, but rather just the traffic on the same shard. [We have also developed opt-in message signing](https://blog.waku.org/scaling-waku-progress-update/) as another stopgap solution to match the Status app timeline and needs. The Community signs the messages with a single key belonging to the entire Community, presenting a more private solution than having individual signatures. This solution set, in addition to protocol and software improvements, should enable the Status team to launch the Status apps with reasonable bandwidth usage.\\n\\nThe manual coordination of shard assignment with static sharding requires the actions of a central entity. While it is still permissionless, and anyone could run a node on any shard, the lack of coordination would deteriorate the user experience. Being able to scale Waku to support one million users on the Status app is dependent on our ability to improve on our H1 deliveries, which we will be stress testing and running through simulations.\\n\\nThe Waku team also deployed basic protections. The Denial of Service (DoS) protections are very light and do not give any guarantees regarding bandwidth usage. Users running a node, such as Status Desktop, will not want it to hog their bandwidth. What was delivered in H1 has caveats in terms of permissionless and relative DOS protection. It is possible to build an application with either properties, but not both. You will find our approach to resolving this in the H2 roadmap below.\\n\\nYou can read more about all of the deliveries in H1 [here.](https://blog.waku.org/scaling-waku-progress-update/)\\n\\n\\n## Roadmap milestones in H2 2023\\n\\nWaku\u2019s core milestone for H2 is launching and bootstrapping Waku Network Gen 0. There are an additional two milestones for 2024 that we have begun working on; those are:\\n\\n\\n\\n* [Add support for multiple platforms](https://github.com/waku-org/pm/milestone/2)<span style={{ textDecoration: \\"underline\\"}}>:</span>\\n\\nWe will be researching and experimenting with nim in 2023 to lay the groundwork for supporting multiple platforms.\\n\\n* [Instate quality assurance processes](https://github.com/waku-org/pm/milestone/3)<span style={{ textDecoration: \\"underline\\"}}>;</span>\\n\\nThis workstream has been initiated this year.\\n\\n\\n\\n#### Waku Network Gen 0\\n\\nThe [Waku Network Gen 0](https://hackmd.io/6Q_bHochRMOvTRXN0vCr5A?both#Waku-Network-Gen-0) builds on H1 2023\u2019s network sharding innovations and uses rate limiting from work done in 2021 and 2022. The goal is to create one permissionless, auto-scalable, DoS protected public network. The auto-sharding protocol automatically allocates messages for an application and does not require a centralised, manual allocator.\\n\\nThrough rate limiting, we will be working to ensure that users (or attackers) cannot flood the network beyond the maximum expected bandwidth usage. We will protect abuse through our RLN DoS protection, capping publishers to 1 message per second. We are also working on a dimensioning mechanism that would give publishers a maximum allocation of messages per day, limiting the maximum size of these messages within the overall network. Individuals can join a group on-chain and prove their membership in each message in a zero-knowledge manner \u2013 that is, without revealing which member they are. The number of members in the group is likely to be capped initially to guarantee maximum bandwidth usage by the network, although we will be able to review those when launching subsequent versions.\\n\\nRunning nodes that fully participate in the Waku Relay Network should be encouraged. We aim to do so by optimising the software and making participation permissionless. With such innovations, the community can benefit from more neutral contributions to the network, hence the backbone of a secure, scalable network, and a more extensive set of nodes to get sender and recipient [k-anonymity](https://vac.dev/rlog/wakuv2-relay-anon?).\\n\\nIt\u2019s important to note that all current and future issues need to be solved while preserving our principles:\\n\\n\\n\\n* Private\\n* Modular\\n* Scalable\\n* Censorship resistant\\n* Portable: works on mobile and browser\\n\\n\\n### Development Roadmap tracks\\n\\nWe have organised our research and development work into three tracks:\\n\\nGeneral Track;\\n\\nService Protocols;\\n\\nDoS protection.\\n\\nWe will review each track in more detail below.\\n\\n\\n#### General Track\\n\\nThe foundational work focuses on creating a scalable and auto-sharded Waku Network. Here, we determine specifications, design, and implement strategies based on our research and development that aid in scaling the Waku Network.\\n\\nYou can view the latest progress from the General Track [here](https://github.com/orgs/waku-org/projects/2/views/2?filterQuery=E%3A+1.+). Below are the key milestones and associated tasks from this track.\\n\\n\\n\\n* **[1.1: Network requirements and design](https://github.com/waku-org/research/issues/6)**\\n  * Goal: 22 Sep 2023\\n  * Key Activities:\\n    * Determine network specifications and design.\\n* **[1.2: Auto-sharding for autoscaling](https://github.com/waku-org/pm/issues/65)**\\n  * Goal: 30 Sep 2023\\n  * Key Activities:\\n    * Design and implement auto-sharding strategy.\\n    * Launch a limited number of shards.\\n* **[1.3: Node bandwidth management mechanism](https://github.com/waku-org/pm/issues/66)**\\n  * Goal: 31 Oct 2023\\n  * Key Activities:\\n    * Implement bandwidth management to choose shards based on availability for relay nodes dynamically\\n    * Design predictable bandwidth limits per shard\\n* **[1.4: Peer management and discovery](https://github.com/waku-org/pm/issues/67)**\\n  * Goal: 30 Nov 2023\\n  * Key Activities:\\n    * Design transparent interaction between applications and shards\\n    * Peer management system to track and discover public shared peers\\n* **[1.5: Launch and dogfood integrated public Waku Network MVP](https://github.com/waku-org/research/issues/1)**\\n  * Goal: 31 Jan 2024\\n  * Key Activities:\\n    * Launch Waku Network MVP\\n    * Gather feedback and improve\\n\\n\\n#### **Service Protocols**\\n\\nOur focus within [Service Protocols](https://docs.waku.org/overview/concepts/protocols) is required to upkeep and expand protocols such as filter, lightpush, peer exchange and store within the public network in a decentralised manner. Work within this track also involves ongoing efforts to incentivise our network.\\n\\nYou can view the latest progress from the Service Protocols Track [here](https://github.com/orgs/waku-org/projects/2/views/2?filterQuery=E%3A+2.+). Below are the key milestones and associated tasks from this track.\\n\\n\\n\\n* **[2.1: Production testing of existing protocols](https://github.com/waku-org/pm/issues/49)**\\n  * Goal: 30 Nov 2023\\n  * Key Activities:\\n    * Test and improve current service protocols: [filter](https://rfc.vac.dev/spec/12/), [lightpush](https://rfc.vac.dev/spec/19/), and [peer-exchange](https://rfc.vac.dev/spec/34/).\\n* **[2.2: Sharded capability discovery for light protocols](https://github.com/waku-org/pm/issues/63)**\\n  * Goal: 30 Sep 2023\\n  * Key Activities:\\n    * Peer selection mechanism that translates content topics to their underlying shard\\n* **[2.3: Basic distributed store services](https://github.com/waku-org/pm/issues/64)**\\n  * Goal: 30 Nov 2023 (integrate in 2024)\\n  * Key Activities:\\n    * Discover Store nodes for specific content topics and time ranges.\\n    * Service nodes to advertise their store services\\n* **[2.4: Basic design for service incentivisation](https://github.com/waku-org/pm/issues/80)**\\n  * Goal: 31 Dec 2023\\n  * Key Activities:\\n    * Incentivize service provision of the Waku Network\\n    * Tokenomics implementation\\n\\n\\n#### **DoS Protection**\\n\\nDenial of Service (DoS) mitigation is a challenge within any network. Bandwidth is a scarce resource for the Waku network; DoS protection is about stopping an attacker from flooding the network or for a Waku node to hog all of a user\u2019s bandwidth. This track covers consensus mechanisms such as our rate-limiting designs.\\n\\nWe balance free traffic with a fairly incentivised structure that doesn\u2019t exhaust the overall bandwidth. We must implement measures to ensure the bandwidth usage is feasible for additional protocol-wide DOS protection. We need to assist node operators in maximising the use of their resources and allocate shard support depending on current traffic so that we can assure ongoing service guarantees.\\n\\nYou can view the latest progress from the DoS Protection Track [here](https://github.com/orgs/waku-org/projects/2/views/2?filterQuery=E%3A+3.+). Below are the key milestones and associated tasks from this track.\\n\\n\\n\\n* **[3.1: DoS requirements and design](https://github.com/waku-org/pm/issues/69)**\\n  * Goal: 22 Sep 2023\\n  * Key Activities:\\n    * Define DoS/spam protection specifications\\n    * Design initial membership mechanisms\\n    * [Free and or paid traffic design](https://hackmd.io/@alrevuelta/rkqbPKaoo)\\n* **[3.2: Basic DoS protection in production](https://github.com/waku-org/pm/issues/70)**\\n  * Goal: 31 Oct 2023\\n  * Key Activities:\\n    * Implement and launch the RLN mechanism\\n    * Implement rate limiting\\n* **[3.3: Membership for Status Communities](https://github.com/waku-org/pm/issues/71)**\\n  * Goal: 30 Nov 2023\\n  * Key Activities:\\n    * Design membership assignments for community members\\n* **[3.4: Further memberships](https://github.com/waku-org/pm/issues/72)**\\n  * Goal: 31 Dec 2023\\n  * Key Activities:\\n    * Expanding memberships to third parties\\n\\n\\n### Anticipated risks to delivering our H2 milestones\\n\\nWe have identified several challenges that may impact our ability to deliver on our roadmap milestones.\\n\\n**1. Ongoing structural design changes due to practical implications:**\\n\\nOur network dimensioning on modelling and assumptions may need to be modified when applied in real-world use cases. For example, we have designed the network not to allow more than one message published per second by each publisher. We have set message sizes to a maximum of 150 KB, implemented a 20-second grace period, and divided all traffic among 8 defined network shards. The risk is that, despite our modelling and research, the structural changes might not be helpful for all applications.\\n\\nWe are committed to building in the open and accept that our [project management process](https://github.com/waku-org/pm/blob/master/README.md) could be better. This principle of openness is why we are dedicating effort to producing easily digestible content, such as our documentation at [docs.waku.org](https://docs.waku.org/).\\n\\n**2. Interactions between applications and nodes:**\\n\\nWaku Relay is the foundation for building decentralised communications. There is uncertainty on how applications will interact with the underlying nodes to ensure that all app traffic gets routed seamlessly and transparently, all while having a balanced data load throughout eight different routing shards.\\n\\n**3. Navigating Bandwidth Management**\\n\\nBandwidth in peer-to-peer networks is a luxury that needs to be acutely observed and managed. To maintain a large group of peers hosting nodes, we must be capable of securely managing bandwidth allocation to their nodes.\\n\\n\\n### Become a part of the Waku ecosystem\\n\\nIf you have questions about Waku\u2019s development roadmap or want to join a like-minded community focused on bringing peer-to-peer communications to millions of users, join the Waku [Discord](https://discord.waku.org/) or follow us on [X](https://twitter.com/Waku_org).\\n\\nIf the technology speaks to you, [check out our open job positions](https://https://status.app/jobs/) or crack some of our [bounties](https://github.org/waku-org/bounties).\\n\\nYou can also help to ensure that we stay decentralised by [running your own Waku Node!](https://docs.waku.org/guides/nwaku/run-node)\\n\\nTo integrate Waku into your application, check the table below for the necessary links. You can always get further support from us on Discord.\\n\\n\\n\\n\\n<table>\\n  <tr>\\n    <td>\\n    </td>\\n    <td><strong>Integrate Waku into your application</strong>\\n    </td>\\n  </tr>\\n  <tr>\\n    <td>docs\\n    </td>\\n    <td><a href=\\"https://docs.waku.org/\\">https://docs.waku.org</a>\\n    </td>\\n  </tr>\\n  <tr>\\n    <td>nwaku\\n    </td>\\n    <td><a href=\\"https://github.com/waku-org/nwaku\\">https://github.com/waku-org/nwaku</a>\\n    </td>\\n  </tr>\\n  <tr>\\n    <td>browser (JS/TS)\\n    </td>\\n    <td><a href=\\"https://github.com/waku-org/js-waku\\">https://github.com/waku-org/js-waku</a>\\n    </td>\\n  </tr>\\n  <tr>\\n    <td>Go\\n    </td>\\n    <td><a href=\\"https://github.com/waku-org/go-waku\\">https://github.com/waku-org/go-waku</a>\\n    </td>\\n  </tr>\\n  <tr>\\n    <td>Rust\\n    </td>\\n    <td><a href=\\"https://github.com/waku-org/waku-rust-bindings\\">https://github.com/waku-org/waku-rust-bindings</a>\\n    </td>\\n  </tr>\\n</table>\\n\\n\\nWe look forward to connecting and hearing your feedback on our roadmap."},{"id":"scaling-waku-progress-update","metadata":{"permalink":"/scaling-waku-progress-update","source":"@site/posts/2023-09-21-scaling-waku-a-progress-update.mdx","title":"Scaling Waku: A Progress Update","description":"A glance into how Waku has progressed its scaling capabilities throughout 2023","date":"2023-09-25T00:00:00.000Z","formattedDate":"September 25, 2023","tags":[],"readingTime":7.61,"hasTruncateMarker":true,"authors":[{"name":"mf","twitter":"@0x_m_f","github":"DeBelg","key":"mf"}],"frontMatter":{"layout":"post","name":"Scaling Waku: A Progress Update","title":"Scaling Waku: A Progress Update","date":"2023-09-25T00:00:00.000Z","authors":"mf","published":true,"slug":"scaling-waku-progress-update","categories":"scaling, waku, progress, milestones","image":"/img/black-waku-logo-with-name.png","hide_table_of_contents":false},"prevItem":{"title":"The Waku Roadmap","permalink":"/waku-roadmap"},"nextItem":{"title":"Device Pairing in Js-waku and Go-waku","permalink":"/device-pairing-in-js-waku-and-go-waku"}},"content":"A glance into how Waku has progressed its scaling capabilities throughout 2023\\n\\n\x3c!--truncate--\x3e\\n\\nAs we move forward into the last months 2023, our primary goal has been to solidify the scalability of Waku protocols, focusing on Status Communities.\\n\\n\\n\\n\\nWe have [set and reached](https://github.com/waku-org/pm/issues/12) our milestone of providing a Waku network that can scale to approximately 10K _active_ users in Status Communities. While continuing to provide [Status](https://status.im) the required network services to make such a community viable, we believe that the research, protocols, tools, and solutions we are working on will allow the overall Waku network to scale to over a million nodes.\\n\\n\\nTo meet Status\'s timeline for the Communities feature, the Waku team made some tough decisions that required tradeoffs in terms of decentralization and other design goals. However, this approach has allowed us to demonstrate the core stability and scalability of Waku\'s protocols, while continuously working towards long-term solutions that provide better anonymity, robustness, and decentralization features.\\n\\n\\nThis article will continue diving deeper into what we did and where you can learn more about these topics. If you\'re already keen to get your hands dirty, we have recently published our upgraded [Waku documentation](https://docs.waku.org), allowing us to build faster, [together](https://docs.waku.org/community/).\\n\\n\\n## Overview\\n\\n- [ **Theoretical: Laying the groundwork**](#laying-the-theoretical-groundwork)\\n    - Theoretical Analysis of Scaling Gossipsub.\\n    - Static Sharding\\n\\n- [**Bridging theory to practice**](#bridging-theory-to-practice)\\n    - Simulations\\n    - Status Telemetry Analysis\\n\\n- [**Hands-on achievements**](#hands-on-achievements)\\n    - Status MVP Delivery (Scaled Waku Communities to 10k)\\n    - Protocol Service Improvements\\n        - PostgreSQL transition\\n        - Waku Peer Exchange\\n        - Filter Protocol Redesign\\n    - Status DoS mitigation mechanism\\n    - Building for builders\\n        - Waku Docs upgrade\\n        - C API\\n-   [**Contribute to the decentralisation of communication**](#contribute-to-the-decentralisation-of-communication)\\n\\n---\\n\\n\\n## Laying the theoretical groundwork\\n\\n\\n\\n### Theoretical Analysis of Scaling gossipsub\\nWe started in Q1 by doing a [theoretical analysis (mathematical modelling)](https://hackmd.io/IYmyyUIdSEuRZ7WbYd6dng?view) of GossipSub scaling under certain conditions.\\n\\nThe numbers for our message rates and sizes chosen for the model come from the telemetric analysis of typical traffic on significantly sizable Discord servers and existing Status Communities. From this, we conclude that the Waku Relay network can scale to 10,000 nodes per shard.\\n\\nSuppose we further assume that each Status Community operates on a separate shard. In that case, each community can scale to 10,000 _active_ relay-only users while bandwidth usage remains within a reasonable range for each user.\\n\\nRealistically most community nodes are not active simultaneously, so this approach could scale to ~100,000 nodes per community if roughly 1/10th of users are active at any time.\\n\\n### Static sharding\\n\\nBased on the analyses above, we published [an RFC](https://rfc.vac.dev/spec/57/), bringing together an integrated strategy to scale Status Communities based on static sharding. This requires manually selecting and configuring static shard(s) per community, with no sharing of shards between communities. Static sharding provides a simple way to achieve scalability with reasonable Denial of Service (DoS) protection (more on that below) but also requires some trade-offs in decentralisation and anonymity. Therefore, our longer-term strategy is to provide a way to auto-scale the Waku network with \\"autosharding\\" - this allows multiple applications and communities to share the same set of shards without intervening manually in the underlying message routing strategies.\\n\\n[This Github issue](https://github.com/waku-org/research/issues/3) provides more information on our network strategy as we advance. In the near future you can expect an elaborated post on our strategy & roadmap.\\n\\n---\\n## Bridging theory to practice\\n---\\n\\n### Simulations\\nTo test our theoretical conclusions, the Distributed Systems Testing (DST) team ran extensive simulations using a Waku simulation tool built on the Kurtosis framework, [Wakurtosis](https://github.com/vacp2p/wakurtosis).\\n\\nThe DST team has recently published a [summary report](https://docs.google.com/document/d/1U3bzlbk_Z3ZxN9tPAnORfYdPRWyskMuShXbdxCj4xOM/edit) detailing these conclusions about scalability, matching our theoretical expectations while showing that the nwaku client can deal with the resource overhead in a growing network.\\n\\nWhile achieving full-scale simulations of 10,000 nodes posed challenges, initial simulations of up to 1000 nodes aligned with our mathematical models. This gave us confidence in the viability of our approach.\\n\\n\\n### Status telemetry analysis\\n\\nHaving drawn theoretical conclusions under which a Waku Relay network would scale, we then experimented to verify our conclusions. Afterwards we performed a [telemetric analysis](https://github.com/vacp2p/vac-book/blob/main/scratch/status-scaling/status-telemetry-analysis.md) of current Status Community traffic.\\n\\nThis allowed us to discover potential bottlenecks when sending large messages over Waku, determine major bandwith usage, and propose strategies to help Status Communities reasonably use Waku without compromising its scalability.\\n\\n\\n\\n\\n---\\n##  Hands-on achievements\\n---\\n\\n### Protocol service improvements\\n\\nTo cater to the needs of a growing network of users on diverse platforms, the team improved (and in some cases wholly redesigned) our existing protocols based on the lessons we have learned from dogfooding the Waku network. Of these, the changes to the store and filter protocols were the most significant.\\n\\n#### - PostgreSQL transition\\n To be able to retrieve an increasing amount of large history queries & messages from our store protocol, we have [transitioned](https://github.com/waku-org/pm/issues/4 ) from a simple SQLite backend to a more robust PostgreSQL archive. This allows store nodes to serve multiple queries in parallel while improving message reliability through redundancy.\\n\\n#### - Filter protocol redesign\\nThe filter protocol allows resource-restricted devices to receive only a subset of messages routed in the network. We have redesigned [the entire filter protocol](https://rfc.vac.dev/spec/12/) to be more robust and provide features requested by Waku-based applications, such as refreshing existing subscriptions.\\n\\nThis new filter protocol version is currently being dogfooded within both mobile and desktop production environment, and the initial feedback is prominently positive.\\n\\n\\n#### - **Waku peer exchange**\\n We have designed and then created a discovery mechanism suitable for resource-restricted nodes called [Waku peer exchange](https://rfc.vac.dev/spec/34/). Work on all these protocols empowers nodes, including resource-restricted devices, to participate seamlessly, ensuring that the network remains accessible to all.\\n\\n\\n\\n### Connectivity: discovering and managing peers\\n\\nA Waku network can only function well if we make it efficient for nodes to connect and interact.\\n\\nDuring the first half of 2023, we spent significant effort improving how a node discovers peers and manages its connectivity to those peers. We have boosted a node\'s ability to differentiate between \\"good\\" and \\"bad\\" connections, including integrating [gossipsub peer scoring](https://github.com/libp2p/specs/blob/master/pubsub/gossipsub/gossipsub-v1.1.md#peer-scoring).\\n\\n\\nThanks to the introduction of [libp2p rendezvous discovery](https://rfc.vac.dev/spec/57/#libp2p-rendezvous-and-circuit-relay), nodes behind restrictive NATs can now make themselves discoverable and connect to other nodes by coordinating a NAT hole punch via a [circuit-relay connection](https://rfc.vac.dev/spec/57/#libp2p-rendezvous-and-circuit-relay).\\n\\nWe have also modified [discovery](https://rfc.vac.dev/spec/51/#discovery) methods such as [discv5](https://github.com/ethereum/devp2p/blob/master/discv5/discv5.md), to consider static sharding when filtering discovered nodes.\\n\\n### DoS protection\\n\\nOne of the most important considerations of any Waku network deployment is protecting the network against spam and DOS attacks. While we are still working on productising a [privacy-preserving spam protection mechanism based on rate-limiting nullifiers](https://rfc.vac.dev/spec/17/), we focused in H1 on developing a simple DoS mitigation mechanism for Status Communities.\\n\\nThis requires all messages belonging to a community to be signed with a key distributed to all community members. Since static sharding ensures messages are only routed within a community, each relayer in the Waku network can validate that each routed message truly originated from within the community and discard those that did not.\\n\\n\\n\\n\\n\\n### Building for builders\\n\\n#### - Docs\\nWe are continuing to make building on Waku more accessible than ever. We have redesigned and improved our [docs website](https://docs.waku.org/), making it easier for you to get acquainted with our work.\\n\\n#### - C API\\nThe nwaku client has recently seen the introduction of [a C API](https://github.com/waku-org/nwaku/tree/b9d5d28af5afcc2589357a132c9b5beb57202828/examples/cbindings) that can be seamlessly wrapped in multiple programming languages (see the [Python wrapper](https://github.com/waku-org/nwaku/tree/b9d5d28af5afcc2589357a132c9b5beb57202828/examples/python) as an example), an efficient [addition](https://docs.waku.org/guides/nodes-and-sdks/) to our existing languages and frameworks support. By simplifying the process of integrating nwaku as a service node into other applications, we are fostering an environment where more projects can actively build on Waku and contribute to the Waku network.\\n\\n## Setting the stage for growth\\n\\nThis post provides a glimpse into the Waku Team\'s progress in the first half of 2023.\\n\\n\\nOur sights are currently set on taking what we have learned and building a [viable public Waku Network](https://github.com/waku-org/research/issues/1) that can scale to even larger numbers while maintaining our core [principles](https://status.im/about/#our-principles) of open-access, privacy-preservation, decentralisation, and transparency about trade-offs.\\n\\n\\nConquering those research & development challenges will not only scale Waku, but will play a significant role in growing and scaling Status Communities. Where we now have made certain trade-offs, our end-goal and principles are aligned in our end-goals, you\'ll soon read more about our goals and milestones in our upcoming Roadmap.\\n\\n\\n\\nAs a team, we remain dedicated to this mandate while acknowledging the vast involvement of community members and collaborators who contribute to our journey.\\n\\n\\n\\n## **Contribute to the decentralisation of communication.**\\n\\nHelp us ensure that we are staying decentralised by [running your own Waku Node!](https://docs.waku.org/guides/run-nwaku-node)\\n\\n|  | Integrate Waku in your application |\\n| --- | --- |\\n| nwaku | https://github.com/waku-org/nwaku |\\n| Browser (JS/TS) | https://github.com/waku-org/js-waku |\\n| Go | https://github.com/waku-org/go-waku |\\n| Rust | https://github.com/waku-org/waku-rust-bindings |\\n| More\u2026 | https://docs.waku.org/guides/nodes-and-sdks |\\n\\n\\nSoon we will also release our upcoming roadmap.\\n\\nStay tuned, and follow our [Twitter](https://twitter.com/Waku_org) to keep yourself updated on new launches. Say hello to us on [Discord](https://discord.gg/GdJJh38sZR), [join our team](https://jobs.status.im/), or crack some of our [bounties](https://github.org/waku-org/bounties)  --- No need to remain shy!\\n\\n\\n\\n\\n\\n------------\\n*`Written by Mf & Hanno 09/2023`*"},{"id":"device-pairing-in-js-waku-and-go-waku","metadata":{"permalink":"/device-pairing-in-js-waku-and-go-waku","source":"@site/posts/2023-04-24-device-pairing-in-js-waku-and-go-waku.mdx","title":"Device Pairing in Js-waku and Go-waku","description":"Device pairing and secure message exchange using Waku and noise protocol.","date":"2023-04-24T12:00:00.000Z","formattedDate":"April 24, 2023","tags":[],"readingTime":4.09,"hasTruncateMarker":true,"authors":[{"name":"Richard","twitter":"richardramos_me","github":"richard-ramos","website":"https://richard-ramos.github.io/","key":"rramos"}],"frontMatter":{"layout":"post","name":"Device Pairing in Js-waku and Go-waku","title":"Device Pairing in Js-waku and Go-waku","date":"2023-04-24T12:00:00.000Z","authors":"rramos","published":true,"slug":"device-pairing-in-js-waku-and-go-waku","categories":"platform"},"prevItem":{"title":"Scaling Waku: A Progress Update","permalink":"/scaling-waku-progress-update"},"nextItem":{"title":"The Future of Waku Network: Scaling, Incentivization, and Heterogeneity","permalink":"/future-of-waku-network"}},"content":"Device pairing and secure message exchange using Waku and noise protocol.\\n\\n\x3c!--truncate--\x3e\\n\\nAs the world becomes increasingly connected through the internet, the need for secure and reliable communication becomes paramount. In [this article](https://vac.dev/wakuv2-noise) it is described how the Noise protocol can be used as a key-exchange mechanism for Waku.\\n\\nRecently, this feature was introduced in [js-waku](https://github.com/waku-org/js-noise) and [go-waku](https://github.com/waku-org/go-waku), providing a simple API for developers to implement secure communication protocols using the Noise Protocol framework. These open-source libraries provide a solid foundation for building secure and decentralized applications that prioritize data privacy and security.\\n\\nThis functionality is designed to be simple and easy to use, even for developers who are not experts in cryptography. The library offers a clear and concise API that abstracts away the complexity of the Noise Protocol framework and provides an straightforward interface for developers to use. Using this, developers can effortlessly implement secure communication protocols on top of their JavaScript and Go applications, without having to worry about the low-level details of cryptography.\\n\\nOne of the key benefits of using Noise is that it provides end-to-end encryption, which means that the communication between two parties is encrypted from start to finish. This is essential for ensuring the security and privacy of sensitive information\\n\\n### Device Pairing\\n\\nIn today\'s digital world, device pairing has become an integral part of our lives. Whether it\'s connecting our smartphones with other computers or web applications, the need for secure device pairing has become more crucial than ever. With the increasing threat of cyber-attacks and data breaches, it\'s essential to implement secure protocols for device pairing to ensure data privacy and prevent unauthorized access.\\n\\nTo demonstrate how device pairing can be achieved using Waku and Noise, we have examples available at https://examples.waku.org/noise-js/. You can try pairing different devices, such as mobile and desktop, via a web application. This can be done by scanning a QR code or opening a URL that contains the necessary data for a secure handshake.\\n\\nThe process works as follows:\\n\\nActors:\\n\\n- Alice the initiator\\n- Bob the responder\\n\\n1. The first step in achieving secure device pairing using Noise and Waku is for Bob generate the pairing information which could be transmitted out-of-band. For this, Bob opens https://examples.waku.org/noise-js/ and a QR code is generated, containing the data required to do the handshake. This pairing QR code is timeboxed, meaning that after 2 minutes, it will become invalid and a new QR code must be generated\\n2. Alice scans the QR code using a mobile phone. This will open the app with the QR code parameters initiating the handshake process which is described in [43/WAKU2-DEVICE-PAIRING](https://rfc.vac.dev/spec/43/#protocol-flow). These messages are exchanged between two devices over Waku to establish a secure connection. The handshake messages consist of three main parts: the initiator\'s message, the responder\'s message, and the final message, which are exchanged to establish a secure connection. While using js-noise, the developer is abstracted of this process, since the messaging happens automatically depending on the actions performed by the actors in the pairing process.\\n3. Both Alice and Bob will be asked to verify each other\'s identity. This is done by confirming if an 8-digits authorization code match in both devices. If both actors confirm that the authorization code is valid, the handshake concludes succesfully\\n4. Alice and Bob receive a set of shared keys that can be used to start exchanging encrypted messages. The shared secret keys generated during the handshake process are used to encrypt and decrypt messages sent between the devices. This ensures that the messages exchanged between the devices are secure and cannot be intercepted or modified by an attacker.\\n\\nThe above example demonstrates device pairing using js-waku. Additionally, You can also try building and experimenting with other noise implementations like nwaku, or go-waku, with an example available at https://github.com/waku-org/go-waku/tree/master/examples/noise in which the same flow described before is done with Bob (the receiver) using go-waku instead of js-waku.\\n\\n### Conclusion\\n\\nWith its easy to use API built on top of the Noise Protocol framework and the LibP2P networking stack, if you are a developer looking to implement secure messaging in their applications that are both decentralized and censorship resistant, Waku is definitely an excellent choice worth checking out!\\n\\nWaku is also Open source with a MIT and APACHEv2 licenses, which means that developers are encouraged to contribute code, report bugs, and suggest improvements to make it even better.\\n\\nDon\'t hesitate to try the live example at https://examples.waku.org/noise-js and build your own webapp using https://github.com/waku-org/js-noise, https://github.com/waku-org/js-waku and https://github.com/waku-org/go-waku. This will give you a hands-on experience of implementing secure communication protocols using the Noise Protocol framework in a practical setting. Happy coding!\\n\\n### References\\n\\n- [Noise handshakes as key-exchange mechanism for Waku](https://vac.dev/wakuv2-noise)\\n- [Noise Protocols for Waku Payload Encryption](https://rfc.vac.dev/spec/35/)\\n- [Session Management for Waku Noise](https://rfc.vac.dev/spec/37/)\\n- [Device pairing and secure transfers with Noise](https://rfc.vac.dev/spec/43/)\\n- [go-waku Noise\'s example](https://github.com/waku-org/go-waku/tree/master/examples/noise)\\n- [js-waku Noise\'s example](https://github.com/waku-org/js-waku-examples/tree/master/examples/noise-js)\\n- [js-noise](https://github.com/waku-org/js-noise/)\\n- [go-noise](https://github.com/waku-org/js-noise/)"},{"id":"future-of-waku-network","metadata":{"permalink":"/future-of-waku-network","source":"@site/posts/2023-04-03-waku-as-a-network.mdx","title":"The Future of Waku Network: Scaling, Incentivization, and Heterogeneity","description":"Learn how the Waku Network is evolving through scaling, incentivization, and diverse ecosystem development and what the future might look like.","date":"2023-04-03T00:00:00.000Z","formattedDate":"April 3, 2023","tags":[],"readingTime":5.745,"hasTruncateMarker":true,"authors":[{"name":"Franck","twitter":"fryorcraken","github":"fryorcraken","key":"franck"}],"frontMatter":{"layout":"post","name":"The Future of Waku Network: Scaling, Incentivization, and Heterogeneity","title":"The Future of Waku Network: Scaling, Incentivization, and Heterogeneity","date":"2023-04-03T00:00:00.000Z","authors":"franck","published":true,"slug":"future-of-waku-network","categories":"platform, operator, network","image":"/img/black-waku-logo-with-name.png","discuss":"https://forum.vac.dev/t/discussion-the-future-of-waku-network-scaling-incentivization-and-heterogeneity/173","hide_table_of_contents":false},"prevItem":{"title":"Device Pairing in Js-waku and Go-waku","permalink":"/device-pairing-in-js-waku-and-go-waku"}},"content":"Learn how the Waku Network is evolving through scaling, incentivization, and diverse ecosystem development and what the future might look like.\\n\\n\x3c!--truncate--\x3e\\n\\nWaku is preparing for production with a focus on the Status Communities use case. In this blog post, we will provide an\\noverview of recent discussions and research outputs, aiming to give you a better understanding of how the Waku network\\nmay look like in terms of scaling and incentivization.\\n\\n## DOS Mitigation for Status Communities\\n\\nWaku is actively exploring DOS mitigation mechanisms suitable for Status Communities. While RLN\\n(Rate Limiting Nullifiers) remains the go-to DOS protection solution due to its privacy-preserving and\\ncensorship-resistant properties, there is still more work to be done. We are excited to collaborate with PSE\\n(Privacy & Scaling Explorations) in this endeavor. Learn more about their latest progress in this [tweet](https://twitter.com/CPerezz19/status/1640373940634939394?s=20).\\n\\n## A Heterogeneous Waku Network\\n\\nAs we noted in a previous [forum post](https://forum.vac.dev/t/waku-payment-models/166/3), Waku\'s protocol\\nincentivization model needs to be flexible to accommodate various business models. Flexibility ensures that projects\\ncan choose how they want to use Waku based on their specific needs.\\n\\n### Reversing the Incentivization Question\\n\\nTraditionally, the question of incentivization revolves around how to incentivize operators to run nodes. We\'d like to\\nreframe the question and instead ask, \\"How do we pay for the infrastructure?\\"\\n\\nWaku does not intend to offer a free lunch.\\nEthereum\'s infrastructure is supported by transaction fees and inflation, with validators receiving rewards from both sources.\\nHowever, this model does not suit a communication network like Waku.\\nUsers and platforms would not want to pay for every single message they send. Additionally, Waku aims to support instant\\nephemeral messages that do not require consensus or long-term storage.\\n\\nProjects that use Waku to enable user interactions, whether for chat messages, gaming, private DeFi, notifications, or\\ninter-wallet communication, may have different value extraction models. Some users might provide services for the\\nproject and expect to receive value by running nodes, while others may pay for the product or run infrastructure to\\ncontribute back. Waku aims to support each of these use cases, which means there will be various ways to \\"pay for the\\ninfrastructure.\\"\\n\\nIn [his talk](https://vac.dev/building-privacy-protecting-infrastructure), Oskar addressed two strategies: RLN and service credentials.\\n\\n### RLN and Service Credentials\\n\\nRLN enables DOS protection across the network in a privacy-preserving and permission-less manner: stake in a contract,\\nand you can send messages.\\n\\nService credentials establish a customer-provider relationship. Users might pay to have messages they are interested in\\nstored and served by a provider. Alternatively, a community owner could pay a service provider to host their community.\\n\\nProviders could offer trial or limited free services to Waku users, similar to Slack or Discord. Once a trial is expired or outgrown,\\na community owner could pay for more storage or bandwidth, similar to Slack\'s model.\\nAlternatively, individual users could contribute financially, akin to Discord\'s Server Boost, or by sharing their own\\nresources with their community.\\n\\nWe anticipate witnessing various scenarios across the spectrum: from users sharing resources to users paying for access to the network and everything in between.\\n\\n## Waku Network: Ethereum or Cosmos?\\n\\nAnother perspective is to consider whether the Waku network will resemble Ethereum or Cosmos.\\n\\nFor those not familiar with the difference between both, in a very concise manner:\\n\\n- Ethereum is a set of protocols and software that are designed to operate on one common network and infrastructure\\n- Cosmos is a set of protocols and software (SDKs) designed to be deployed in separate yet interoperable networks and infrastructures by third parties\\n\\nWe want Waku to be decentralized to provide censorship resistance and privacy-preserving communication.\\nIf each application has to deploy its own network, we will not achieve this goal.\\nTherefore, we aim Waku to be not only an open source set of protocols, but also a shared infrastructure that anyone can leverage to build applications on top, with some guarantees in terms of decentralization and anonymity.\\nThis approach is closer in spirit to Ethereum than Cosmos.\\nDo note that, similarly to Ethereum, anyone is free to take Waku software and protocols and deploy their own network.\\n\\nYet, because of the difference in the fee model, the Waku Network is unlikely to be as unified as Ethereum\'s.\\nWe currently assume that there will be separate gossipsub networks with different funding models.\\nSince there is no consensus on Waku, each individual operator can decide which network to support, enabling Waku to maintain its permission-less property.\\n\\nMost likely, the Waku network will be heterogeneous, and node operators will choose the incentivization model they prefer.\\n\\n## Scalability and Discovery Protocols\\n\\nTo enable scalability, the flow of messages in the Waku network will be divided in shards,\\nso that not every node has to forward every message of the whole network.\\nDiscovery protocols will facilitate users connecting to the right nodes to receive the messages they are interested in.\\n\\nDifferent shards could be subject to a variety of rate limiting techniques (globally, targeted to that shard or something in-between).\\n\\nMarketplace protocols may also be developed to help operators understand how they can best support the network and where\\ntheir resources are most needed. However, we are still far from establishing or even assert that such a marketplace will be needed.\\n\\n## Open Problems\\n\\nSplitting traffic between shards reduces bandwidth consumption for every Waku Relay node.\\nThis improvement increases the likelihood that users with home connections can participate and contribute to the gossipsub network without encountering issues.\\n\\nHowever, it does not cap traffic.\\nThere are still open problems regarding how to guarantee that someone can use Waku with lower Internet bandwidth or run critical services, such as a validation node, on the same connection.\\n\\nWe have several ongoing initiatives:\\n\\n- Analyzing the Status Community protocol to confirm efficient usage of Waku [[4]](https://github.com/vacp2p/research/issues/177)\\n- Simulating the Waku Network to measure actual bandwidth usage [[5]](https://github.com/waku-org/pm/issues/2)\\n- Segregating chat messages from control and media messages [[6]](https://rfc.vac.dev/spec/57/#control-message-shards)\\n\\nThe final solution will likely be a combination of protocols that reduce bandwidth usage or mitigate the risk of DOS attacks, providing flexibility for users and platforms to enable the best experience.\\n\\n## The Evolving Waku Network\\n\\nThe definition of the \\"Waku Network\\" will likely change over time. In the near future, it will transition from a single\\ngossipsub network to a sharded set of networks unified by a common discovery layer. This change will promote scalability\\nand allow various payment models to coexist within the Waku ecosystem.\\n\\nIn conclusion, the future of Waku Network entails growth, incentivization, and heterogeneity while steadfastly\\nmaintaining its core principles. As Waku continues to evolve, we expect it to accommodate a diverse range of use cases\\nand business models, all while preserving privacy, resisting censorship, avoiding surveillance, and remaining accessible\\nto devices with limited resources.\\n\\n## References\\n\\n1. [51/WAKU2-RELAY-SHARDING](https://rfc.vac.dev/spec/51/)\\n2. [57/STATUS-Simple-Scaling](https://rfc.vac.dev/spec/57/)\\n3. [58/RLN-V2](https://rfc.vac.dev/spec/58/)\\n4. [Scaling Status Communities: Potential Problems](https://github.com/vacp2p/research/issues/177)\\n5. [Waku Network Testing](https://github.com/waku-org/pm/issues/2)\\n6. [51/WAKU2-RELAY-SHARDING: Control Message Shards](https://rfc.vac.dev/spec/57/#control-message-shards)"}]}')}}]);