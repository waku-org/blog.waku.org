<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://waku.org/es</id>
    <title>Waku Blog</title>
    <updated>2024-03-04T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://waku.org/es"/>
    <subtitle>Waku Blog</subtitle>
    <icon>https://waku.org/theme/image/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[Cree una dApp con Waku]]></title>
        <id>https://waku.org/es/build-dapps-using-waku</id>
        <link href="https://waku.org/es/build-dapps-using-waku"/>
        <updated>2024-03-04T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Read in English]]></summary>
        <content type="html"><![CDATA[<a href="/build-dapps-using-waku"><button class="lsd-button lsd-button--medium lsd-button--outlined"><span class="lsd-button__text">Read in English</span></button></a><br><br><p><strong>TL;DR</strong></p><p>¿Sabías que, más allá de ser una mera palabra de moda en el sector, la comunicación descentralizada representa una respuesta estratégica a las vulnerabilidades inherentes de los sistemas centralizados? Da prioridad a la privacidad, la seguridad y la resistencia a la censura, lo que la convierte en un componente indispensable en el conjunto de herramientas de los desarrolladores web.</p><p>Los sistemas de comunicación centralizados tradicionales han luchado durante mucho tiempo contra la censura, los puntos únicos de fallo y los problemas de privacidad. Con el auge de la Web 3 y la tecnología blockchain, las soluciones de comunicación descentralizadas como Waku se perfilan como una alternativa prometedora. Waku ofrece un sistema de mensajería peer-to-peer (P2P) que es resistente a la censura, escalable y seguro, por lo que es una opción ideal para los desarrolladores de dApps que buscan construir aplicaciones de próxima generación.</p><p>Este artículo te guiará sobre cómo construir una aplicación descentralizada (dApp) utilizando Waku, un protocolo de comunicación descentralizado sin compromisos, y Vue.js, un popular marco de JavaScript para la construcción de interfaces de usuario. Antes de sumergirse en los aspectos prácticos de desarrollo de este artículo, se recomienda que tenga una comprensión básica de Vue.js, familiaridad con Tailwind CSS para el estilo de interfaz de usuario, y una comprensión de web3.js para la integración de la cartera sin problemas.</p><p><strong>¿Qué es Waku?</strong></p><p>Waku es un conjunto de protocolos de mensajería peer-to-peer descentralizados que permiten una comunicación segura y resistente a la censura a través de una red descentralizada. Sus características incluyen el cifrado de extremo a extremo, la mensajería persistente/efímera y el descubrimiento eficiente de pares, proporcionando una base para la comunicación segura y fiable.</p><p>Waku funciona dentro de una topología entre pares, creando una red descentralizada que frustra la censura y proporciona resistencia a la vigilancia. Su diseño permite la escalabilidad, con capacidad para millones de usuarios. Está diseñado para ser el sucesor de Whisper, la capa de mensajería del conjunto de protocolos P2P de la cadena de bloques Ethereum, y lo supera en escalabilidad y eficiencia de recursos.</p><p>La arquitectura de Waku se basa en tres dominios de interacción de red distintos: cotilleo, descubrimiento y solicitud/respuesta. Aunque Waku es un todo cohesivo en términos de capacidades, abarca tres clientes principales diseñados para diferentes entornos y varios SDK, incluidos Rust, React Native, Kotlin y Swift.</p><ul><li>nwaku: La implementación de referencia en Nim.</li><li>go-waku: Adaptado para la integración nativa con aplicaciones Golang.</li><li>js-waku: Una implementación de JavaScript optimizada para entornos de navegador.</li></ul><p>Waku consta de múltiples protocolos, cada uno de los cuales cumple una función específica dentro de la red. Incluyen, entre otros</p><ul><li>Waku Relay: La columna vertebral de la red Waku, que emplea un enfoque pub/sub a la mensajería peer-to-peer. Hace hincapié en la privacidad, la resistencia a la censura y la seguridad, ampliando el protocolo libp2p GossipSub.</li><li>Waku Filter: Versión ligera del protocolo de retransmisión diseñada para dispositivos con recursos limitados. Permite a los nodos ligeros recibir mensajes específicos de interés de los nodos completos.</li><li>Waku Store: Facilita la recuperación de mensajes para los dispositivos que no pueden participar en la red Waku Relay mientras están desconectados.</li><li>Waku Light Push: Un protocolo de solicitud/respuesta que permite a los nodos con ventanas de conexión cortas o ancho de banda limitado publicar mensajes en la red Waku.</li></ul><p>Comprender la arquitectura y los protocolos de Waku sienta las bases para proceder a implementaciones prácticas.</p><p><strong>Casos de uso de Waku</strong></p><p>La versátil arquitectura y capacidades de Waku son relevantes en una gran variedad de escenarios del mundo real en los que la comunicación segura y descentralizada es primordial. Ya se trate de facilitar conversaciones privadas entre usuarios, permitir el intercambio de datos entre dispositivos o soportar la comunicación entre nodos dentro de una red, Waku emerge como una solución robusta.</p><ul><li>Comunicación centrada en la privacidad</li></ul><p>El énfasis de Waku en la privacidad lo convierte en una opción ideal para escenarios en los que salvaguardar la información del usuario es de suma importancia. En aplicaciones que tratan con datos sensibles o conversaciones confidenciales, el cifrado de extremo a extremo de Waku y su arquitectura descentralizada proporcionan un entorno seguro, mitigando los riesgos asociados a las plataformas de comunicación centralizadas.</p><ul><li>Mensajería resistente a la censura</li></ul><p>Waku ofrece una luz de esperanza para la comunicación sin restricciones en regiones donde prevalece la censura en Internet. Su topología peer-to-peer impide que las autoridades centralizadas controlen o supervisen el tráfico de mensajería, garantizando que los usuarios puedan comunicarse libremente sin temor a la censura. Esto hace que Waku sea especialmente valioso para promover la libertad de expresión y apoyar canales de comunicación abiertos.</p><ul><li>Uso en dApps para comunicación descentralizada</li></ul><p>Las aplicaciones descentralizadas (dApps) forman un ecosistema floreciente en el que Waku puede desempeñar un papel fundamental. La integración de Waku en las dApps mejora las funcionalidades de comunicación, permitiendo interacciones en tiempo real entre los usuarios mientras se mantiene el espíritu descentralizado. Esto resulta especialmente valioso en escenarios como las plataformas colaborativas, las redes sociales o cualquier aplicación en la que la participación y comunicación de los usuarios sean componentes centrales.</p><p>Al explorar las características y capacidades de Waku, se hace evidente que la aplicabilidad de Waku va más allá de las ventajas teóricas, encontrando aplicación práctica en diversas áreas.</p><p><strong>Creación de una dApp con Waku y Vue.js</strong></p><p>Los sistemas de sondeo a menudo se enfrentan a retos relacionados con la centralización, las preocupaciones por la privacidad y la susceptibilidad a la manipulación. Mediante la integración de Waku y Vue.js, podemos hacer frente a estos desafíos, creando una aplicación de votación descentralizada que aprovecha el poder de la comunicación peer-to-peer.</p><p>Aquí está el código fuente completo de aplicación de votación en GitHub: <a href="https://github.com/wolz-CODElife/waku-vue-poll" target="_blank" rel="noopener noreferrer">https://github.com/wolz-CODElife/waku-vue-poll</a> y <a href="https://waku-vue-poll.vercel.app/" target="_blank" rel="noopener noreferrer">la aplicación en vivo</a> está alojada en Vercel.</p><p>Herramientas de desarrollo utilizadas: </p><ul><li><strong>Vite:</strong> Para arrancar la aplicación Vue3 con la plantilla Tailwind.</li><li><strong>Vue 3:</strong> Para construir la interfaz de usuario.</li><li><strong>TypeScript:</strong> Para la seguridad de tipos y la posibilidad de detectar errores durante la compilación.</li><li><strong>Tailwind CSS:</strong> Para dar estilo a la interfaz de usuario.</li><li><strong>Web3.js:</strong> Para implementar wallet connect.</li><li><strong>Plugin Node Polyfill Webpack</strong>: Para proporcionar polyfills necesarios para emitir eventos Web3.js en el navegador. Dado que Vue3 usa webpack v5, donde los módulos polyfill del núcleo de Node fueron eliminados.</li><li><strong>Crypto Hash: </strong>Para generar la dirección del usuario, cuando no hay una cartera de crypto disponible.</li><li><strong>Protobufjs:</strong> Para serializar datos de mensajes enviados a través de Waku.</li><li><strong>@waku/sdk: </strong>Para acceder a los métodos del nodo Waku en JavaScript.</li></ul><p><strong>Configuración del entorno de desarrollo</strong></p><p>Para configurar tu entorno de desarrollo, asegúrate de que tienes Node v18+, abre una nueva terminal en tu directorio de trabajo y ejecuta el siguiente comando:</p><p>Lo que iniciará un diálogo en la terminal, puedes elegir las opciones que te sirvan, o utilizar las mismas opciones que yo utilicé:</p><p>Esto debería crear una nueva aplicación Vue en tu directorio de trabajo. Navega a la aplicación, instala las dependencias por defecto e inicia la aplicación usando el siguiente comando:</p><p>A continuación, queremos crear una estructura de archivos que nos permita separar en componentes las distintas partes de la aplicación. Tu ruta src debería tener una estructura de archivos como esta:</p><p>A medida que avancemos iremos actualizando los archivos con el código necesario. En cuanto a assets/3dpoll.jpg siéntete libre de sustituirlo por cualquier imagen que veas adecuada para tu landing page.</p><p><strong>Configuración de Tailwind en Vue.js</strong></p><p>Para construir nuestra interfaz de usuario, primero tenemos que instalar y configurar el CSS de Tailwind en Vue 3. Puedes seguir la guía oficial sobre <a href="https://v2.tailwindcss.com/docs/guides/vue-3-vite#setting-up-tailwind-css" target="_blank" rel="noopener noreferrer">Configuración de Tailwind CSS.</a></p><p><strong>Configuración de rutas</strong></p><p>Para crear múltiples páginas/rutas en la aplicación, tenemos que instalar Vue Router ejecutando el siguiente comando en el terminal:</p><p>En esta aplicación, sólo necesitamos dos rutas: "Home" y "Polls", las cuales tenemos dentro de la carpeta src/views. Estas rutas contendrán el Layout de cada página, y luego podremos definir las rutas en el archivo src/router/index.ts usando el siguiente código:</p><p>En el fragmento de código anterior, se define una configuración de enrutador Vue.js. Importamos las funciones y tipos necesarios de 'vue-router' y el componente Home de @/views/Home.vue.</p><p>El array routes contiene definiciones de rutas para los componentes Home y Polls. El enrutador se crea usando las funciones createRouter y createWebHistory, y las rutas que definimos anteriormente.</p><p>El componente: () =&gt; import('../views/Polls.vue') se utiliza para importar dinámicamente el componente 'Polls.vue'. Se trata de una funcionalidad de Vue.js que permite cargar el componente de forma asíncrona cuando es necesario, lo que puede ayudar a mejorar el rendimiento inicial de carga de la página al dividir el código en trozos más pequeños.</p><p>Finalmente, el router se exporta para que podamos acceder a él en "main.ts".</p><p>A continuación, registramos el enrutador en la aplicación Vue incluyéndolo en el archivo "main.ts" de la siguiente manera:</p><p>A continuación, crearemos un Layout para nuestra aplicación con lo siguiente dentro de "App.vue":</p><p>En el código anterior, utilizamos router-view para cargar dinámicamente los componentes de la ruta actual en el DOM.</p><p>Instalación de Waku y sus dependencias</p><p>Para empezar a utilizar Waku en nuestra aplicación Vue 3, necesitamos instalar @waku/sdk que es una implementación en TypeScript del protocolo Waku diseñada para entornos de navegador web.</p><p>Para instalar @waku.sdk ejecuta el siguiente comando en el terminal:</p><p>También se recomienda crear una estructura de mensajes para tu aplicación, normalmente los desarrolladores de Waku utilizan <a href="https://protobuf.dev/" target="_blank" rel="noopener noreferrer">Protocol Buffers</a> por coherencia, interoperabilidad, compatibilidad y tamaño de la carga útil. Para instalar protobufjs, ejecuta el siguiente comando en el terminal:</p><p><strong>Implementación de la lógica Waku</strong></p><p>La aplicación se ejecuta sobre dos lógicas fundamentales, que son las integraciones de wallet connect y Waku communication. Crearemos dos composables "waku.ts" y "client.ts" dentro de src/composables.</p><p>"waku.ts" contiene todos los métodos que nuestra aplicación Vue necesita para interactuar con el protocolo Waku y transmitir mensajes (encuestas) entre los usuarios de la aplicación. Dentro de este archivo, deberías tener el siguiente código:</p><p>El código anterior permite la interacción con la red Waku, posibilitando la creación y participación en encuestas dentro de una aplicación Vue.</p><p>En primer lugar, importamos las funciones necesarias y definimos la estructura de datos utilizando interfaces de TypeScript para establecer un estándar para PollOption, PollMessage y Poll. Estas estructuras representan las preguntas y opciones disponibles en una encuesta y la estructura general de una encuesta, respectivamente.</p><p>Se definen variables reactivas (estado, remitente y sondeos) para realizar un seguimiento del estado de la conexión, la información del remitente y la lista de sondeos. Estas variables serán necesarias para actualizar la aplicación Vue en respuesta a los cambios en la red Waku.</p><p><em>Fíjate en que no hemos hecho que WakuNode o cualquier variable que interactúe con la red Waku sea directamente reactiva. Como esto desencadenaría el<a href="https://github.com/waku-org/js-waku/issues/1746" target="_blank" rel="noopener noreferrer"> problema #1746 </a>debido a que los nodos Waku son demasiado complejos para que los mecanismos de Vue los manejen, tenemos que mantener la instancia WakuNode fuera del ámbito reactivo de Vue.</em></p><p>La conexión WakuNode se establece utilizando la función createLightNode, optimizando el uso de recursos mediante la creación de un nodo ligero de Waku. Este nodo se conecta a la red Waku y espera a que los peers se unan utilizando los protocolos<a href="https://rfc.vac.dev/spec/19/" target="_blank" rel="noopener noreferrer"> LightPush</a> y <a href="https://rfc.vac.dev/spec/12/" target="_blank" rel="noopener noreferrer">Filter</a>. Hemos definido un<a href="https://docs.waku.org/learn/concepts/content-topics/" target="_blank" rel="noopener noreferrer"> Content Topic</a>específico para esta aplicación para categorizar los mensajes, el cual debe tener el siguiente formato:/{application-name}/{version}/{content-topic-name}/{encoding}. Asegúrate de reemplazar WAKU_CONTENT_TOPIC con tu propio Content Topic. Por otro lado, Protobuf se utiliza para codificar y decodificar mensajes de manera eficiente para adaptarse a la estructura de mensajes PollQuestionWakuMessage.</p><p>Después de conectarse a la red Waku, el siguiente paso es interactuar. Hemos creado una función llamada useWaku() que encapsula y devuelve todas las variables y métodos necesarios para interactuar con Waku en toda la aplicación.</p><p>En primer lugar, tenemos la función start() que inicia la conexión de WakuNode, espera a que los peers se conecten y se suscribe al Content Topic elegido, antes de actualizar el estado del usuario a status.value = "connected".</p><p>A continuación, tenemos la función stop() que cancela la suscripción al Content Topicy detiene el WakuNode, antes de actualizar el estado del usuario a status.value = "not connected".</p><p>A continuación, tenemos la función subscribe() que crea una suscripción al Content Topic utilizando Waku Filter, recibe los mensajes de sondeo entrantes, los decodifica y actualiza la lista de sondeos. La función handleSubscriptionResult decodifica los mensajes de sondeo entrantes, comprueba si hay duplicados y actualiza la lista de sondeos de forma apropiada.</p><p>A continuación, tenemos la función unsubscribe() que desconecta la aplicación del Content Topic.</p><p>Por último, la función publish() acepta los parámetros necesarios para crear un nuevo mensaje de sondeo y enviarlo codificado a la red Waku mediante el protocolo LightPush.</p><p><strong>Implementación de la lógica wallet connect</strong></p><p>La variable sender en el composable “waku.ts” guarda la dirección de la cartera conectada. Para poder implementar wallet connect, necesitamos primero instalar “Web3.js” ejecutando el siguiente comando en la terminal:</p><p>Dado que Vue 3 utiliza webpack v5, necesitamos instalar Node Polyfill Webpack Plugin para proporcionar los polyfills necesarios para emitir eventos Web3.js en el navegador. Ejecuta el siguiente comando en la terminal para instalar el plugin Node Polyfill Webpack:</p><p>Luego inclúyelo en "vite.config.ts" para que tu "vite.config.ts" se vea así:</p><p>Notarás que también estamos soportando top-level-await, esto es porque estamos instanciando WakuNode en un nivel superior y la compilación de Vite no soporta esto.</p><p>Dentro del "client.ts" tendremos el siguiente código:</p><p>El código anterior permite a los usuarios conectar su cartera de crypto a la aplicación como medio de identificación. En este escenario, utilizamos la dirección de la cartera como remitente del sondeo.</p><p>Sin embargo, algunos usuarios pueden no tener carteras y no queremos limitar la aplicación sólo a los usuarios que tienen carteras de crypto. Para solucionar esto, creamos la función generateUniqueID() para formar un hash aleatorio a partir de la dirección navigator.userAgent del navegador del usuario. Luego almacenamos la dirección del remitente en localStorage como "'senderWalletAddress'".</p><p>También creamos una función disconnectWallet() para eliminar la dirección de la cartera del localStorage y detener la ejecución del WakuNode.</p><p>Para demostrar la propiedad de los sondeos, los usuarios tienen que firmar cada mensaje de sondeo utilizando su cartera, para ello se ejecuta la función signMessage.</p><p>El composable useWalletConnect encapsula y devuelve las funciones connectWallet, disconnectWallet y signMessage para que sean accesibles a través de la aplicación.</p><p><strong>Construir los componentes de la interfaz de usuario</strong></p><p>Ahora que tenemos nuestra lógica, podemos construir la interfaz de usuario para utilizar los datos y métodos en nuestros composables.</p><p>Tenemos 3 componentes principales en esta aplicación, la NavBar, Home y Polls. Siéntete libre de crear tu propia interfaz de usuario o utilizar la mía:</p><ul><li><a href="https://github.com/wolz-CODElife/waku-vue-poll/blob/master/src/components/NavBar.vue" target="_blank" rel="noopener noreferrer">NavBar</a>: src/components/NavBar.vue</li><li><a href="https://github.com/wolz-CODElife/waku-vue-poll/blob/master/src/views/Home.vue" target="_blank" rel="noopener noreferrer">Inicio:</a> src/views/Home.vue</li><li><a href="https://github.com/wolz-CODElife/waku-vue-poll/blob/master/src/views/Polls.vue" target="_blank" rel="noopener noreferrer">Encuestas</a>: src/views/.vue</li></ul><p><strong>Creación de encuestas</strong></p><p>Si revisas el código de mi componente NavBar, encontrarás que tenemos una ref llamada poll:</p><p>Esta referencia es actualizada por el formulario modal, y al enviarlo, activamos la función sendMessage:</p><p>En el código anterior, convertimos a string los datos de la encuesta que incluye la pregunta, y las opciones para que podamos publicar la encuesta como un mensaje a Waku. A continuación, creamos un msgid y una marca de tiempo para el mensaje, antes de utilizar la cartera del usuario para firmar el mensaje. Una vez firmado el mensaje, llamamos a la función waku.publish(waku.sender.value, stringifiedMessage) para mandar la actualización a los usuarios suscritos al Content Topic.</p><p>Votación en tiempo real y sondeo de resultados</p><p>En el componente "Poll.vue", tenemos una función handleVote():</p><p>Esta función se activa cuando se pulsa  el botón de radio de cualquier opción. Esta función recoge el msgid y el selectedOption como parámetros. A continuación, llama a la función subscribe() para obtener la última versión de las encuestas, antes de actualizar el recuento de votos de una opción en la encuesta que tiene el msgid.</p><p>Creamos una copia reactiva del sondeo para que la actualización del recuento de votos se refleje aunque cambie el estado. Luego publicamos la copia reactiva, que enviará los resultados actualizados de la encuesta a todos los usuarios que estén suscritos al Content Topic de esta aplicación.</p><p>Para realizar un seguimiento de las encuestas que un usuario ha votado, almacenamos una matriz "votePolls" en el localStorage.</p><p>Siéntete libre de jugar con la funcionalidad y optimizar el rendimiento para satisfacer las necesidades de tu aplicación.</p><p><strong>Resumen del artículo</strong></p><p>En estaguía exhaustiva, nos embarcamos en un viaje para integrar Waku, un protocolo de comunicación descentralizado, en una aplicación Vue.js, creando una dApp de votación en tiempo real. Recapitulemos los puntos claves de la guía:</p><p><strong>Entendiendo Waku</strong></p><ul><li>Exploramos Waku como una familia de protocolos que facilitan las comunicaciones privadas y resistentes a la censura a través de una red descentralizada.</li><li>Examinamos las características de Waku, su arquitectura y su enfoque en la privacidad, la descentralización y la adaptabilidad a diversas plataformas.</li><li>Analizamos los diferentes componentes de Waku, como Waku Relay, Waku Filter, Waku Store y Waku Light Push.</li></ul><p><strong>Casos de uso de Waku</strong></p><ul><li>Analizamos escenarios del mundo real en los que Waku resulta muy valioso, haciendo hincapié en su papel en la comunicación centrada en la privacidad, la mensajería resistente a la censura y la comunicación descentralizada dentro de las dApps.</li></ul><p><strong>Creación de una dApp con Waku y Vue.js</strong></p><ul><li>Configuramos una aplicación Vue.js utilizando Vite y Tailwind CSS.</li><li>Establecimos una conexión a la red Waku, implementamos la autenticación de monedero usando Web3.js, e integramos el @waku/sdk para la comunicación descentralizada.</li><li>Demostramos el proceso paso a paso de construir una encuesta de votación en tiempo real, conectándonos a la red Waku.</li></ul><p>Al concluir esta guía, considera realizar las siguientes acciones para seguir explorando y experimentando con Waku:</p><ul><li><strong>Documentación de Waku:</strong> Visita la<a href="https://docs.waku.org/" target="_blank" rel="noopener noreferrer"> documentación de Waku </a>para profundizar en las funcionalidades, protocolos y casos de uso de Waku.</li><li><strong>Experimenta con funcionalidades adicionales:</strong> Amplía las capacidades de tu dApp experimentando con funcionalidades adicionales proporcionadas por Waku. Explora características como mensajería efímera, almacenamiento descentralizado y más para mejorar sus aplicaciones descentralizadas.</li><li><strong>Únete a la Comunidad Waku:</strong> Participa con la comunidad<a href="https://waku.org/community/" target="_blank" rel="noopener noreferrer"> Waku</a> en foros, redes sociales o canales de desarrolladores. Conéctate con desarrolladores afines, comparte tus experiencias y mantiénete actualizado sobre los últimos desarrollos dentro del ecosistema Waku.</li><li><strong>Contribuye a Waku:</strong> Considera la<a href="https://waku.org/about/team/" target="_blank" rel="noopener noreferrer"> posibilidad de contribuir al proyecto Waku</a> en plataformas como GitHub. Ya sea informando de problemas, enviando pull requests o sugiriendo mejoras, tus contribuciones pueden desempeñar un papel vital en el crecimiento de este protocolo de comunicación descentralizado</li></ul>]]></content>
        <author>
            <name>Joel Adewole</name>
        </author>
    </entry>
</feed>